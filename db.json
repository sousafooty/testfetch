{
    "josecoding": [
        {
            "tutorials": [
                {
                    "name": "Chapter 1",
                    "description": "Java Basics",
                    "content": [
                        {"name": "Introduction to Java Programming", 
                            "book": ["Java is one of the most used programming languages in the world for developing the desktop application and web application.","It has completed 22 years in the programming world.","History of Java:","Java programming language was developed by James Ghosling, Patrick Naughton, Mike Sheridan at Sun Microsystems Inc. in 1991.","The initial name was Oak but it was renamed to Java in 1995 as OAK was a registered trademark of another Tech company.","Evolution of Java:","There are many java versions that have been released. Current stable release of Java is Java SE 8 and development of Java SE 9 is in progress and will be released soon.","JDK Alpha and Beta (1995)","JDK 1.0 (23rd Jan, 1996)","JDK 1.1 (19th Feb, 1997)","J2SE 1.2 (8th Dec, 1998)","J2SE 1.3 (8th May, 2000)","J2SE 1.4 (6th Feb, 2002)","J2SE 5.0 (30th Sep, 2004): This version of Java have introduced major changes in java programming world. Some of them are:","Java Concurrency API","Var argument methods","Generics","Annotations","For each loop","Enumerations","Static import","Autoboxing and unboxing etc.","Java SE 6 (11th Dec, 2006)","Java SE 7 (28th July, 2011) : Java 7 has following new major changes:","Multi-catch block","Support of String in Switch case","Try with resources etc.","Java SE 8 (18th March, 2014) : Java 8 has introduced major programming paradigms. Some of them are:","Lambda Expressions.","Functional Interfaces","Default methods in interface.","Streams","Enhanced Security etc","Features of Java:","Simple:  Java is easy to learn. It does not include concepts of pointers and operator overloading that were available in C++.","Object Oriented: You can model everything into an object which has data and behavior. Java has incorporated various object-oriented concepts such as Abstraction, Encapsulation, Polymorphism, and inheritance.","Platform independence:  Java is write-once, run-anywhere language. Once you compile java code, you can run it on any machine. For example: If you compile your code on Windows OS, you can easily run the same bytecode in linux.","Portable: Java byte can be portable to any platform and can be executed on any platform.","Multi-threading: Java has provided multithreading feature which will help you to execute various task in parallel. It has introduced executor framework which is more robust and easy to use.","High performance: Java can not be as fast as C and C++ as it is interpreted language but it has provided various features such as Just in time compiler to increase performance.","I think You might have got some idea about Java now.","That’s all about Introduction to Java Programming."],
							"id": 1}, 
                        {"name": "Java Hello World Program", 
                            "book":["Introduction to Java Programming","In this post, we will see how to write first java program. This post is intended only for java beginner.","Index for this post:","Prerequisite for running a java program","Run the program","How this java program works","hello world program will be a very simple program which will print “Hello World” to console.","Before running the program, you need to make sure java is properly installed on your machine.","Prerequisite for running a java program:","install the JDK if you don’t have installed it, download the JDK and install it.","set path of the jdk/bin directory. you can follow this link for setting the path","create simple hello worldjava program","compile and run the java program","// First java hello world program","class HelloWorld {","public static void main(String[] args) {","System.out.println('Hello, World!'); ","}","}","You can either write a program in IDE such eclipse or you can simply write in in text editor.","Let’s run this program","If you run this program in eclipse ide, you can simply right click and on “run as java application”.","You can compile this java program using command line as below:","javac helloworld.java","You can run the program using command line as below:","java helloworld","When you run above program, you will get below output:","Hello, World!","How this java program works", "Line number 2: // First java hello world program","This is a comment in java and this statement will be ignored at run time.", "Line number 3: class HelloWorld:", "As java is object oriented programming, every java application should have class definition.", "Line number 4: public static void main(String[] args) {","This is called main method in java. This is entry point for this program.","public: This is access modifier which is used to define visibility. Here main method will be visible to all other classes.","static: As this will be executed by JVM, it should be static.There should be no need to create object of this call.","void: This main method will not return anything.","main: “main” is method name here.","String args[]: you can pass arguments to java program using args[] array.","Line number 4: System.out.println('Hello, World!')","System.out.println is used to print anything on console.As we have passed “Hello, World!” here, it will print “Hello, World!” to console.","that’s all about Java hello world program."],
							"id": 2}, 
                        {"name": "Object and Clases in Java", 
                            "book": ["In this post, we will learn about Object and class in java. As Java is an object-oriented programming language, we need to design our program using Objects and classes.","Object: An entity that has state and behavior may be termed as Object.","For example: Employee has state with name, age and department, and behavior such as working on the assignment.","Class: A class is a blueprint/template that defines state and behavior of objects.","For example: Employee is a class in above example.","Object is an instance of class: As object are created on the basis of blueprint/template that class provides, Object is an instance of the class.","Let’s create a simple class:", "package org.arpit.java2blog;", "public class Employee {", "String name;","String age;","public void workOnAssignment()","{","// Working on assignment","}","}","Let’ s see an example of Object now:","You can create object of above class as below:","Employee employee1=new Employee();", "Objects are stored in heap memory.","When above statement gets called, physical object is created in the memory as below:","Now let’s create two objects i.e. employee1 and employe2 and set name and age for these two objects.","Employee employee1=new Employee();","employee1.setName('Martin');","employee1.setAge(24);","Employee employee2=new Employee();","employee2.setName('John');","employee2.setAge(20);","These two objects will be created in memory as below:","Object are created using constructor with the help of new operator. We will see more about in subsequent tutorials.","that’s all about Object and class in java."],
							"id": 3}, 
                        {"name": "Data Types in Java", 
                            "book": ["Data types in javarefer to type of data that can be stored in variable. As Java is strongly typed language, you need to define datatype of variable to use it and you can not assign incompatible datatype otherwise the compiler will give you an error.","int d='Hello'","The compiler will give you an error with this message – 'Type mismatch: cannot convert from String to int'.","There are two types of data types in java.","Primitive data types","Referenced data types.","Primitive data types:","Primitive data types are those datatypes which are defined by java language itself.","There are 8 primitive data types in java.","Data Type Default Value Default size","boolean false 1 bit","char '\u0000' 2 byte","byte 0 1 byte","short 0 2 byte","int 0 4 byte","long 0L 8 byte","float 0.0f 4 byte","double 0.0d 8 byte","Let’s see some example about data types:","Adding two integers:","package org.arpit.java2blog;","public class DataTypesDemo {","public static void main(String[] args) {","int a=10;","int b=20;","int c=a+b;","System.out.println(c);","}","}","When you run above program, you will get below output:","30","Assigning int to double(Widening):","Here we will assign int to double. As double takes more memory than int. This is widening operation.","package org.arpit.java2blog;","public class DataTypesDemo {","public static void main(String[] args) {","int a=30;","double b=a;","System.out.println(a);","System.out.println(b);","}","}","When you run above program, you will get below output:","30","30.0","Assigning double to int(Narrowing or typecasting):","Here we will assign double to int. As double takes more memory than int. This is Narrowing operation.","package org.arpit.java2blog;", "public class DataTypesDemo {", "public static void main(String[] args) {","double a=30.0;","int b=(int) a;","System.out.println(a);","System.out.println(b);","}","}","When you run above program, you will get below output:","30.0","30", "Assinging int to byte(Overflow condition):","When you assing int to byte and value of int is larger than size of byte then it is a case of overflow.", "package org.arpit.java2blog;", "public class DataTypesDemo {", "public static void main(String[] args) {","int a=200;","byte b=(byte) a;","System.out.println(a);","System.out.println(b);","}","}", "When you run above program, you will get below output:","200","-56","Reference data types:","Reference data types are those data types which are provided as class by Java API or by class that you create.","String is example of Reference data types provided by java.","That’s all about data types in java."],
							"id": 4}, 
                        {"name": "Variable in Java",
                            "book":["Variable is nothing but name of memory location in java.Each variable has the specific data type which defines size and layout of variable’s memory.","There are three kinds of variables in java.","Local Variables","Instance Variables","Static variables.","Local variable:","A Variable which is declared inside a method can be termed as “Local Variable”. It is mandatory to initialize local variable otherwise Compiler will complain about it.","Instance variable:","A Variable which is declared at class level can be termed as “Instance variable”. It is not mandatory to initializeInstance variable.","All instance variable will be by default initialized by JVM.","Static variable:","A Variable which is declared as static is known as “Static variable”. Static variables are class level variables.","Let’s understand it with the help of simple program:", "package org.arpit.java2blog;", "public class VariableDemo {","int a;  // Instance variable","static int b=20; // static variable", "public void print()","{","int c=10; // local variable","System.out.println('Method local variable: ' + c);","}", "public static void main(String args[])","{","VariableDemo demo=new VariableDemo();","System.out.println('Instance variable: '+ demo.a); // Printing Instance variable","System.out.println('Static variable: ' + b);   // Printing static variable","demo.print();  //Printing local variable using print method.","}","}", "When you run above program, you will get below output:","Instance variable: 0","Static variable: 20","Method local variable: 10","That’s all about Variables in java."],
							"id": 5}, 
                        {"name": "Acces modifiers in java", 
                            "book": ["The access modifiers in java define accessibility (scope) of variable, method, constructor or class.","There are 4 types of access modifiers in java.","Public","Private","Protected","Default","You don’t have to explicitly put default modifier.JVM will use default modifier if you do not provide Public, Private and Protected.","Public access modifier:","Public modifier is accessible in whole java world.If you put class as public that means that class is available everywhere.","Let’s see with help of example:","Create a class named A.java in package com.", "package com;", "public class A {","public int a;","public A(int a)","{","this.a=a;","}","public void methodA()","{","System.out.println('In method of class A');","}","}", "Create another class named “B.java” in package com.","package org;","import com.A;","public class B {","public static void main(String args[])","{","A objA=new A(20);","objA.methodA();","System.out.println('Value of variable a is: '+objA.a);","}","}", "When you run above program, you will get below output:","In method of class A","Value of variable a is: 20","Private access modifier:","The private access modifier is accessible only within class.","You can not use private and protected with class unless and until it is nested class.","Let’s understand it with the help of example:", "package com;", "public class A {","private int a;","A(int a)","{","this.a=a;","}","private void methodA()","{","System.out.println('In method of class A');","}","}","class B {", "public static void main(String args[])","{","A objA=new A(20);","objA.methodA();","System.out.println('Value of variable a is: ' + objA.a);","}","}","You will get compilation error at line no.22 and 23, as you can not access private variables or methods from outside the class.","Default access modifier:","If you do not provide any access, JVM considers it as default access.In case of default access modifer, you can not access method, variable or class outside of the package.","Create a class named A.java in package com.", "package com;","public class A {","int a;","public A(int a)","{","this.a=a;","}","void methodA()","{","System.out.println('In method of class A');","}","}", "Create another class named “B.java” in package com.", "package org;", "import com.A;", "public class B {", "public static void main(String args[])","{","A objA=new A(20);","objA.methodA();","System.out.println('Value of variable a is: ' + objA.a);","}","}", "Here you will get compilation error at line no.11 and 12,as we are trying accesss variable a and methodA of class A outside the package “com”.", "Protected access modifier:","Protected access modifiers can be accessed within the same package or outside the package by inheritance only.","Let’s understand with the help of example:","Create a class named A.java in package com.", "package com;", "public class A {", "protected int a;", "protected A(int a)","{","this.a=a;","}","protected void methodA()","{","System.out.println('In method of class A');","}","}", "Create another class named “B.java” in package com.", "package org;", "import com.A;", "public class B extends A{", "B(int a) {","super(a);","}", "public static void main(String args[])","{","B ObjB=new B(20);","ObjB.methodA();","System.out.println('Value of variable a is: ' + ObjB.a);","}","}", "When you run above program, you will get below output:","In method of class A","Value of variable a is: 20","As you can see, we are able to access class A’s variable a and methodA using inheritance.","That’s all about access modifiers in Java."], "id": 6}, {"name": "this keyword in java with example", "book": ["this keyword in java is used to refer to current object or instance of class. It can be used in constructor to call any other overloaded constructor but this keyword should be the first statement in the constructor.","This keyword can be used for instance variables:","this keyword can be used to refer to the instance variable of class.", "package org.arpit.java2blog;", "public class Employee {", "String name;","int age;","public Employee(String name,int age)","{","this.name=name;","this.age=age;","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}", "public void setName(String name) {","this.name = name;","}", "public int getAge() {","return age;","}", "public void setAge(int age) {","this.age = age;","}", "public static void main(String args[])","{","Employee e1=new Employee('John',20);","System.out.println('Employee's name : '+ e1.getName());","System.out.println('Employee's age : ' + e1.getAge());","}","}", "When you run above program, you will get below output:","Employee’s name : John","Employee’s age : 20","As you can see we have used this keyword to set values for instance variable in the constructor.","This keyword can be used to call the overloaded constructor:","If you want to call overloaded constructor of same class, you can use this keyword to do that.","For example:", "package org.arpit.java2blog;", "public class Employee {", "String name;","int age;","public Employee() {","System.out.println('Calling No arg constructor');","}","public Employee(String name,int age)","{","this();","System.out.println('Calling Parameterized constructor');","this.name=name;","this.age=age;","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}", "public void setName(String name) {","this.name = name;","}", "public int getAge() {","return age;","}", "public void setAge(int age) {","this.age = age;","}", "public static void main(String args[])","{","Employee e1=new Employee('John',20);","System.out.println('Employee's name : '+ e1.getName());","System.out.println('Employee's age : ' + e1.getAge());","}","}", "When you run above program, you will get below output:","Calling No arg constructor","Calling Parameterized constructor","Employee’s name : John","Employee’s age : 20","Please note that this keyword used for calling another constructor should be first statement in that constructor.","this keyword can be used return object of the class:", "package org.arpit.java2blog;", "public class Employee {", "String name;","int age;","public Employee(String name,int age)","{","this.name=name;","this.age=age;","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}", "public void setName(String name) {","this.name = name;","}", "public int getAge() {","return age;","}", "public void setAge(int age) {","this.age = age;","}", "public Employee getEmployee()","{","return this;","}","public static void main(String args[])","{","Employee e1=new Employee('John',20);","Employee e1Copy=e1.getEmployee();","System.out.println('Employee's name : '+e1Copy.getName());","System.out.println('Employee's age : '+e1Copy.getAge());","}","}", "Calling No arg constructor","Employee’s name : John","Employee’s age : 20","that’s all about this keyword in java."],
							"id": 7}, 
                        {"name": "Super keyword in java with example", 
                            "book": ["Super Keyword in java is used to refer to object of the immediate superclass.Super keyword is used in the context of inheritance.","Super keyword in java can be used at three level:","Variable level","Constructor level","Method level","Usage of super at variable level:","We can refer to variable of super class using:", "super.variableName", "Let’s see this with the help of example.", "package org.arpit.java2blog;", "public class Person","{","String name;","public Person()","{","System.out.println('Calling Person constructor');","name='Default';","}","}","class Employee extends Person{","String name;","int age;","public Employee()","{","System.out.println('Calling Employee class constructor');","this.name='Martin';","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public void printName()","{","System.out.println('Printing default name from person class : ' + super.name);","}","public static void main(String args[])","{","Employee e1=new Employee();","e1.printName();","}","}", "When you run above program, you will get below output:","Calling Person constructorCalling Employee class constructorPrinting default name from person class : Default","As you can see, we have used super.name to print name from parent class in Employee class.","Usage of super at Constructor level:","super keyword can be used to call the constructor of parent class.Please note that super should be first statement in child class constructor.","Let’s see with the help of example:", "package org.arpit.java2blog;", "public class Person","{","String name;","public Person(String name)","{","this.name=name;","System.out.println('Calling Person Parameterized constructor');","}","}","class Employee extends Person{","int age;","public Employee(String name)","{","super(name);","System.out.println('Calling Employee class constructor');","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee('John');","System.out.println('Employe's name:'+e1.getName());","}","}", "When you run above program, you will get below output:","Calling Person Parameterized constructorCalling Employee class constructorEmployee’s name:John","As you can see we have used super keyword to call Person contructor from employee class.","Usage of super keyword at method level:","Super keyword can be used to call method of Parent class. It can be used to specifically call method of parent class in case of method overriding.","Let’s see with the help of example:", "package org.arpit.java2blog;", "public class Person","{","String name;","public Person()","{","System.out.println('Calling Person constructor');","name='Default';","}","public void printName()","{","System.out.println('Printing default name from person class : ' + this.name);","}","}","class Employee extends Person{","String name;","int age;","public Employee()","{","System.out.println('Calling Employee class constructor');","this.name='Martin';","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public void printName()","{","super.printName();","System.out.println('Printing name from Employee class : ' + this.name);","}","public static void main(String args[])","{","Employee e1=new Employee();","e1.printName();","}","}", "When you run above program, you will get below output:","Calling Person constructorCalling Employee class constructorPrinting default name from person class : DefaultPrinting name from Employee class : Martin","As you can see, we have called Person class method from Employee class using super keyword.That’s all about super keyword in java."], 
                                "id": 8}]
                },
                {
                    "name": "Chapter 2",
                    "description": "Java Control Statements",
                    "content": [
                        {"name": "For loop in java with example", 
                            "book": ["There are several looping statements available in java. One of them is for loop in java.","For loop in java is used to execute some statements repeatedly until condition returns false.","There are three parts to for loop.","Initialization","Condition","Increment or decrement","Syntax for for loop in java:","for (initialization; condition; increment/decrement) {"," //block of statements","}Initialization: Initialization statement executes at beginning of loop only once.","condition:Condition gets evaluated in each iteration. For loop executes block of statements repeatedly unless condtion returns false.","Increment/Decrement: These statements get executed in each iteration.","Let’s take a very simple example:","Print number from 1 to 10 using for looppublic class ForLoopMain {","public static void main(String[] args) {","for (int i = 1; i < 11; i++) {","System.out.print(' '+i);","}","}","}Output:","1 2 3 4 5 6 7 8 9 10","Let’s try to print only even numbers now.","public class ForLoopMain {","public static void main(String[] args) {","for (int i = 1; i < 11; i++) {","if(i%2==0)","System.out.print(' '+i);","}","}","}","Output:","2 4 6 8 10","Exercise:","If you are given array of integer, you need to find an element in that array.","Input:","{32,45,53,65,43,23}","You need to write a program to search an element in the array.If element is found in the array, return “PRESENT” else return “NOT PRESENT”","I would recommend you to try it yourself and then look at below code.","Program:","package org.arpit.java2blog;","public class ForStatementExample {","public static void main(String[] args) {","ForStatementExample bse=new ForStatementExample();","int arr[] ={32,45,53,65,43,23};","System.out.println(bse.findElementInArr(arr, 53));","}","public String findElementInArr(int arr[],int elementTobeFound)","{","for (int i = 0; i < arr.length; i++) {","if(arr[i]==elementTobeFound)","{","System.out.println(elementTobeFound+' is present in the array ');","return 'PRESENT';","}","}","return 'NOT PRESENT';"," }","}","Output:","53 is present in the array","PRESENT","Infinite for loop in java:","You need to be careful with condition you provide in for loop otherwise you may end up creating infinite for loop.","For example:","Let’s say you want to print number from 10 to 1 and you use below code:","package org.arpit.java2blog;","public class ForLoopMain {","public static void main(String[] args) {","for (int i = 10; i >0; i--) {","System.out.print(' '+i);","}","}","}","Output:","10 9 8 7 6 5 4 3 2 1","Now in above code, instead of i–, you have put i++. In this code, loopwill go into infinite loop.","package org.arpit.java2blog;","public class ForLoopMain {","public static void main(String[] args) {","for (int i = 10; i >0; i++) {","System.out.print(' '+i);","}","}","}","Another example of inifinite loop is below code:","package org.arpit.java2blog;","package org.arpit.java2blog;","public class ForLoopMain {","public static void main(String[] args) {","for (; ; ) {","}","}","}","Use two variables in for loop in java:","You can use multiple variables in for loop too.","For example:","Let’s say you want to check if String is palindrome or not. You can use two variables in for loop as below:","package org.arpit.java2blog;","import java.util.Scanner;","public class StringUsingHalfLoop {"," public static void main(String[] args) {","Scanner scanner = new Scanner(System.in);","System.out.print('Enter a string : ');","String str = scanner.nextLine();","boolean isPalin=isPalindrome(str);","if(isPalin)","System.out.println('String is Palindrome');","else","System.out.println('String is not Palindrome');"," }"," static boolean isPalindrome(String str)"," {","for (int i = 0,j=str.length()-1; i <str.length()/2; i++,j--) {","if(str.charAt(i)!=str.charAt(j))","{","return false;","}","}","return true;"," }","}","Output:","Enter a string : madam","String is Palindrome","Enter a string : adam","String is not Palindrome"], 
                            "id": 9}, 
                        {"name": "While loop in java with example", 
                            "book": ["There are several looping statements available in java. One of them is while loop in java.","While loop is used to execute some statements repeatedly until condition returns false. ","If number of iterations are not known beforehand, while loop is recommended.","The syntax for while loop in java:"," while(condition){","//block of statements","}","Let’s take a very simple example:","Print number from 1 to 10 using while loop","public class WhileLoopMain {","public static void main(String[] args) {","int i=1;","while(i<11)","{","System.out.print(' '+i);","i++;","}","}","}","Output:","1 2 3 4 5 6 7 8 9 10","Let’s try to print only even numbers now.","public class WhileLoopMain {","public static void main(String[] args) {","int i=1;","while(i<11)","{","if(i%2==0)","System.out.print(' '+i);","i++;","}","}","}","Output:","2 4 6 8 10","Exercise:","If you are given an array of integer, you need to find an element in that array.","Input:","{32,45,53,65,43,23}","You need to write a program to search an element in the array.If element is found in the array, return “PRESENT” else return “NOT PRESENT”","I would recommend you to try it yourself and then look at below code.","Program:","package org.arpit.java2blog;","public class WhileLoopMain {","public static void main(String[] args) {","WhileLoopMain bse=new WhileLoopMain();","int arr[] ={32,45,53,65,43,23};","System.out.println(bse.findElementInArr(arr, 53));","}","public String findElementInArr(int arr[],int elementTobeFound)","{","int i=0;","while(i<arr.length)","{","if(arr[i]==elementTobeFound)","{","System.out.println(elementTobeFound+' is present in the array ');","return 'PRESENT';","}","i++;","}","return 'NOT PRESENT';"," }","}","Output:","53 is present in the array","PRESENT","Infinite for loop:","You need to be careful with condition you provide in for loop otherwise, you may end up creating infinite for loop.","For example:","Let’s say you want to print number from 10 to 1 and you use below code:","package org.arpit.java2blog;","public class WhileLoopMain {","public static void main(String[] args) {","int i=10;","while(i>0)","{","System.out.print(' '+i);","i--;","}","}","}","Output:","10 9 8 7 6 5 4 3 2 1","Now in above code, instead of i–, you have put i++. In this code,loop will go into infinite loop.","package org.arpit.java2blog;","public class WhileLoopMain {","public static void main(String[] args) {","int i=10;","while(i>0)","{","System.out.print(' '+i);","i++;","}","}","}","Another example of infinite while loop in java is below code:","package org.arpit.java2blog;","package org.arpit.java2blog;","public class WhileLoopMain {","public static void main(String[] args) {","while(true) {","}","}","}"], 
                            "id": 10}, 
                        {"name": "Do While loop in java with example", 
                            "book": ["There are several looping statements available in java. One of them is do while loop in java.","While loop is used to execute some statements repeatedly until condition returns false. ","If number of iterations are not known beforehand, while loop is recommended.","In Do while loop, loop body is executed at least once because condition is checked after loop body.","Syntax for do while loop in java:","do{","//block of statements","}while(condition)","Let’s take a very simple example:","Print number from 1 to 10 using while loop","package org.arpit.java2blog;","public class DoWhileLoopMain {","public static void main(String[] args) {","int i=1;","do{","System.out.print(' '+i);","i++;","}while(i<11);","}","}","Output:","1 2 3 4 5 6 7 8 9 10","Let’s try to print only even numbers now.","package org.arpit.java2blog;","public class DoWhileLoopMain {","public static void main(String[] args) {","int i=1;","do","{","if(i%2==0)","System.out.print(' '+i);","i++;","}while(i<11);","}","}","Output:","2 4 6 8 10","Exercise:","If you are given array of integer, you need to find an element in that array.","Input:","{32,45,53,65,43,23}","You need to write a program to search an element in the array.If element is found in the array, return “PRESENT” else return “NOT PRESENT”","I would recommend you to try it yourself and then look at below code.","Program:","package org.arpit.java2blog;","public class DoWhileLoopMain {","public static void main(String[] args) {","DoWhileLoopMain dwl=new DoWhileLoopMain();","int arr[] ={32,45,53,65,43,23};","System.out.println(dwl.findElementInArr(arr, 53));","}","public String findElementInArr(int arr[],int elementTobeFound)","{","int i=0;","do","{","if(arr[i]==elementTobeFound)","{","System.out.println(elementTobeFound+' is present in the array ');","return 'PRESENT';","}","i++;","}while(i<arr.length);","return 'NOT PRESENT';"," }","}","Output:","53 is present in the array","PRESENT","Infinite do while loop in java:","You need to be careful with the condition you provide in for loop otherwise you may end up creating infinite for loop.","For example:","Let’s say you want to print number from 10 to 1 and you use below code:","package org.arpit.java2blog;","public class DoWhileLoopMain {","public static void main(String[] args) {","int i=10;","do","{","System.out.print(' '+i);","i--;","}while(i>0)","}","}","Output:","10 9 8 7 6 5 4 3 2 1","Now in above code, instead of i–, you have put i++. In this code, the loop will go into infinite loop.","package org.arpit.java2blog;","public class DoWhileLoopMain {","public static void main(String[] args) {","int i=10;","do","{","System.out.print(' '+i);","i++;","}while(i>0)","}","}","Another example of infinite loop is below code:","package org.arpit.java2blog;","package org.arpit.java2blog;","public class WhileLoopMain {","public static void main(String[] args) {"," do{","}while(true)","}","}","That’s all about do while loop in java."], 
                            "id": 11}, 
                        {"name": "If else statement in java", 
                            "book": ["If else statements in java are used to test some conditions.It evaluates a condition to be true or false.","There are three types of if statements.","If statement","If else statement","If else if ladder statement","Simple If statement:","if(condition)","{","// If condition is true, this block will be executed","}","For example:","public class IfMain {"," public static void main(String[] args)"," {","int price=20;","if(price > 10)"," System.out.println('Price is greater than 10');","}","}","Output:","Price is greater than 10","You can write single line followed by semi color after if or you can use curly braces to write block of code.","You can rewrite above code as below.","public class IfMain {","public static void main(String[] args)","{","int price=20;","if(price > 10)","{","System.out.println('Price is greater than 10');","}","}","}","If else statement:","if(condition)","{","// If condition is true, this block will be executed","}","else","{","// If condition is false, this block will be executed","}","For example:","Check if number is odd or even.","package org.arpit.java2blog;","public class IfElseMain {","public static void main(String[] args)","{","IfElseMain ieMain=new IfElseMain();","ieMain.checkOddOrEven(20);","}","public void checkOddOrEven(int number)","{","if(number%2==0)","{"," System.out.println(number+' is even');","}","else","{"," System.out.println(number+' is odd');","}","}","}","Output:","20 is even","If else if ladder statement:","Before we learn about If else if ladder statement, let’s first see some conditional operator.","Conditional Operators:","Java provides many conditional operators.Some of them are:","==: To check if two variables are equal","!=: To check if two variables are not equal","<: To check if first variable is less than other","<= : To check if first variable is less than or equal to other",">:To check if first variable is greater than other",">= :To check if first variable is greater than or equal to other","&& :And operation is used to check if both conditions,used with && operator, are true","||:oroperation is used to check if one of the conditions,used with || operator, are true","if(condition1)","{"," // If condition1 is true, this block will be executed.","}","else if(condition2)","{"," // If condition2 is true, this block will be executed.","}","else if(condition3)","{"," // If condition3 is true, this block will be executed.","}","else ","{ ","// If all above conditions are false, this block will be executed. ","}","For example:","package org.arpit.java2blog;","public class IfElseIfLadderMain {","public static void main(String[] args)","{","int age=28;","if(age >= 18 && age <= 25) { ","System.out.println('Age is between 18 and 25'); ","} ","else if(age >= 26 && age <= 35) { ","System.out.println('Age is between 26 and 35'); ","} ","else if(age >= 36 && age <= 60){","System.out.println('Age is between 35 and 60');","}","else{","System.out.println('Age is greater than 60');","}","}","}","Output:","Age is between 26 and 35","That’s all about if else statement in java."], 
                            "id": 12}, 
                        {"name": "Switch case in java", 
                            "book": ["Switch case in java is alternative to if else if ladder. It is used to execute statements based on some conditions.","Syntax of Switch case in java:","switch(expression) {","case value_1 :"," // Statements"," break; // optional","case value_2 :"," // Statements"," break; // optional","// Default is executed when expression does not match with any of above conditions.","default : // Optional"," // Statements","}","}","Let’s understand it with the help of simple example.","We are going to print weekday based on integer. 0 represents Sunday, 1 represents Monday and so on..","package org.arpit.java2blog;","public class SwitchCaseExample {","public static void main(String[] args) {","int dayOfWeek=5;","switch(dayOfWeek) {","case 0 :"," System.out.println('Sunday');"," break; ","case 1 :"," System.out.println('Monday');"," break;","case 2 :"," System.out.println('Tuesday');"," break;","case 3 :"," System.out.println('Wednesday');"," break;","case 4 :"," System.out.println('Thrusday');"," break;","case 5 :"," System.out.println('Friday');"," break;","case 6 :"," System.out.println('Saturday');"," break; ","// Default is executed when expression does not match with any of above conditions.","default : // Optional","System.out.println('Invalid day of week');","}","}","}","Output:","Friday","As we have highlighted in syntax, break keyword is optional.","Let’s see what happens if we do not use break statement.","package org.arpit.java2blog;","public class SwitchCaseExample {","public static void main(String[] args) {","int dayOfWeek=5;","switch(dayOfWeek) {","case 0 :"," System.out.println('Sunday');"," break;","case 1 :"," System.out.println('Monday');"," break;","case 2 :"," System.out.println('Tuesday');"," break;","case 3 :"," System.out.println('Wednesday');"," break;","case 4 :"," System.out.println('Thrusday');"," break;","case 5 :"," System.out.println('Friday');"," break;","case 6 :"," System.out.println('Saturday');"," break; ","// Default is executed when expression does not match with any of above conditions.","default : // Optional","System.out.println('Invalid day of week');","}","}","}","Output:","Friday","Saturday","Invalid day of week","As you can see here, if you do not use break statement, it will execute all the statements once condition is met.","Switch case String example:","You can use String also in expression from Java 7 onwards.","Let’s understand with help of simple example:","package org.arpit.java2blog;","public class SwitchCaseExample {","public static void main(String[] args) {","int dayOfWeek=5;","switch(dayOfWeek) {","case 0 :"," System.out.println('Sunday');"," break;","case 1 :"," System.out.println('Monday');"," break;","case 2 :"," System.out.println('Tuesday');"," break;","case 3 :"," System.out.println('Wednesday');"," break;","case 4 :"," System.out.println('Thrusday');"," break;","case 5 :"," System.out.println('Friday');"," break;","case 6 :"," System.out.println('Saturday');"," break; ","// Default is executed when expression does not match with any of above conditions.","default : // Optional","System.out.println('Invalid day of week');","}","}","}","Output:","Friday","Switch case uses equals method comparison internally, so case statement is case sensitive here.","Choosing between Switch case and if else if depend on readability and various factors. You can choose as per your need.","that’s all about switch case in java."], 
                            "id": 13},
                        {"name": "Java Continue statement example", 
                            "book": ["continue statement is one of the different control statements which we use very often.If continue statement is found in loop, it will continue the current iteration and will not execute statements following continue statement. ","It is generally used to skip current iteration on the basis of some condition.","Let’s take very simple example:","Java continue statement example:","You have elements in the array from 1 to 10 but you want to print only odd numbers and skip even numbers. ","In this case, if we get an even number, we will skip that iteration so loop won’t print even number.","package org.arpit.java2blog;","public class ContinueStatementExample {","public static void main(String[] args) {","int arr[] ={1,2,3,4,5,6,7,8,9,10};","for (int i = 0; i < arr.length; i++) {","if(arr[i]%2==0)","{","continue;","}","System.out.print(' '+arr[i]);","}","}","}","When you run above program, you will get below output:","1 3 5 7 9","Labeled continue statement:","Labeled break continue is used when you want to continue labeled for loop rather than current loop.","For example:","You have a two-dimensional matrix which contains only 0 and 1. You want to skip a row if row starts with 1.","package org.arpit.java2blog;","public class LabeledContinueStatment {","public static void main(String[] args) {","int[][] arr = { { 1, 0, 0 }, { 0, 0, 0 }, { 1, 1, 1 }, { 0, 1, 1 } };","outer: for (int i = 0; i < arr.length; i++) {","for (int j = 0; j < arr[i].length; j++) {","if (arr[i][0] == 1) {","System.out.println('Skipping row '+i+ 'as it started with 1');","continue outer;","}","System.out.print(' ' + arr[i][j]);","}","System.out.println();","}","}","}","When you run above program, you will get below output:","Skipping row 0as it started with 1","0 0 0","Skipping row 2as it started with 1","0 1 1","That’s all about Java continue statement example."], 
                            "id":14},
                        {"name": "Java Break statement example", 
                            "book": ["Break statement is one of the different control statements which we use very often.If break statement is found in loop, it will exit the loop and execute the statement following the loop.","Let’s take very simple example:","Java break statement example:","You want to search for the element in an array and if element is found, exit the loop.","package org.arpit.java2blog;","public class BreakStatementExample {","public static void main(String[] args) {","BreakStatementExample bse=new BreakStatementExample();","int arr[] ={32,45,53,65,43,23};","bse.findElementInArr(arr, 53);","}","public void findElementInArr(int arr[],int elementTobeFound)","{","for (int i = 0; i < arr.length; i++) {","if(arr[i]==elementTobeFound)","{","System.out.println(elementTobeFound+' is present in the array ');","break;// break statement is encounter, control will exit current loop now","}","}","System.out.println('Executing statments following the loop');","}","}","When you run above program, you will get below output:","53 is present in the array","Executing statments following the loop","Labeled break statement:","Labeled break statement is used when you want to break labeled for loop.","For example:","You want to find an element in two-dimensional array. Once you got the element in the array, exit the outer loop.","package org.arpit.java2blog;","public class LabeledBreakStatementExample {","public static void main(String[] args) {","LabeledBreakStatementExample bse = new LabeledBreakStatementExample();","int arr[][] = { { 32, 45, 35 }, { 53, 65, 67 }, { 43, 23, 76 } };","bse.findElementInArr(arr, 65);","}","public void findElementInArr(int arr[][], int elementTobeFound) {","outer: for (int i = 0; i < arr.length; i++) {","for (int j = 0; j < arr[i].length; j++) {","if (arr[i][j] == elementTobeFound) {","System.out.println(elementTobeFound + ' is present in the array ');","break outer; // labeled break statement is encountered, control will exit","// outer loop now","}","}","}","System.out.println('Executing statements following the outer loop');","}","}","When you run above program, you will get below output:","65 is present in the array","Executing statements following the outer loop","Switch Case:","You can also use break statement in switch case. Once case condition is met, you will exit the switch case.","For example:","package org.arpit.java2blog;","public class SwitchCaseExample {","public static void main(String[] args) {","char vehType = 'C';"," switch(vehType) {","case 'B' :","System.out.println('BUS'); ","break;","case 'C' :","System.out.println('Car');","break;","case 'M' :","System.out.println('Motor cycle');","default :","System.out.println('Invalid vehicle type');"," }"," System.out.println('Your vehicle type is ' + vehType);","}","}","When you run above program, you will get below output:","Car","Your vehicle type is C","That’s all about Java break statement example."], 
                            "id": 15}
                    ]
                },
                {
                    "name": "Chapter 3",
                    "description": "Object Oriented Programming concepts",
                    "content": [
                        {"name": "Constructor in java", 
                            "book":["Constructor in java is block of code which allows you to create instance of the object. It does not have return type.","It has two main points","Constructor name should be same as class","Constructor should not have any return type else it will be same as method.","There are three types of Constructor in Java.","Default Constructor","No arg constructor","Parameterized constructor","How to call a constructor?","To call a constructor, you need to use the keyword new, followed by the name of class, followed by parameters if any.","For example: If you want to create the object of class Employee, you can call the constructor like this: new Employee()","Types of Contructor","Default Constructor:","When you do not provide the constructor for your class, JVM will create default constructor.It will not be visible to you, JVM will create it automatically while initializing object of the class.","Let’s check with the example of example:","package org.arpit.java2blog;","public class Employee {","String name;","int age;","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee();","e1.setName('John');","e1.setAge(20);","System.out.println(e1.getName());","System.out.println(e1.getAge());","}","}","As you can see here, we did not provide any constructor for this class but JVM will create default constructor in this case.","When you run above program, you will get below output:","John 20","no arg construtor","no arg constructor is constructor which you provide explicitly in the class and it does not have any argument.","package org.arpit.java2blog;","public class Employee {","String name;","int age;","public Employee()","{","System.out.println('Calling no arg constructor');","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee();","e1.setName('John');","e1.setAge(20);","System.out.println(e1.getName());","System.out.println(e1.getAge());","}","}","When you call above program, you will get below output:","Calling no arg constructor","John","20","Parameterized constructor","When you pass arguments to the constructor, this type of constructor is called Parameterized constructor.","package org.arpit.java2blog;","public class Employee {","String name;","int age;","public Employee(String name,int age)","{","System.out.println('Calling Parameterized constructor');","this.name=name;","this.age=age;","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee('John',20);","System.out.println(e1.getName());","System.out.println(e1.getAge());","}","}","When you run above program, you will get below output:","Calling Parameterized constructor","John","20","If you provide Parameterized Constructor,then you need to be careful.","Let’s see below program:","package org.arpit.java2blog;","public class Employee {","String name;","int age;","public Employee(String name,int age)","{","System.out.println('Calling Parameterized constructor');","this.name=name;","this.age=age;","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee();","e1.setName('John');","e1.setAge(20);","System.out.println(e1.getName());","System.out.println(e1.getAge());","}","}","If you notice, you will get compilation error at line no.38. Why so?","because if you create parameterized constructor in class, JVM won’t provide default constructor to you. ","If you do not write any constructor then only JVM will provide you default constructor.","Constructor chaining","Constructor chaining is the concept where child class calls the constructor of its parent class internally or explicitly.","Whenever you create an object in Java, its superclass constructor gets called. The compiler simply put super() in the constructor internally.","Let’s see with help of example:","Let’s say you have Person class with attribute name and you have child class named “Employee” which extends Person class.","package org.arpit.java2blog;","public class Person","{","String name;","public Person()","{","System.out.println('Calling Person constructor');","name='John';","}","}","class Employee extends Person{","int age;","public Employee()","{","System.out.println('Calling Employee class constructor');","name='Martin';","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee();","System.out.println(e1.getName());","}","}","When you run above program, you will get below output:","Calling Person constructor","Calling Employee class constructor","Martin","As you can see here, First Person constructor got called and it set name variable to “John”","Then Employee constructor got called which have overridden name variable to “Martin”.","That’s why we see a variable name as “Martin” in the end.","What if you want to explicitly call super class parameterized constructor","You can easily do it using super keyword.","Let’s see with the help of Example.","package org.arpit.java2blog;","public class Person","{","String name;","public Person(String name)","{","this.name=name;","System.out.println('Calling Person Parameterized constructor');","}","}","class Employee extends Person{","int age;","public Employee(String name)","{","super(name);","System.out.println('Calling Employee class constructor');","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee('John');","System.out.println('Employee's name:'+e1.getName());","}","}","When you run above program, you will get below output:","Calling Person Parameterized constructor","Calling Employee class constructor","Employee’s name:John","What if you want to call another constructor of same class","If you want to call overloaded constructor of same class, you can use this keyword to do that.","For example:","package org.arpit.java2blog;","public class Employee {","String name;","int age;","public Employee() {","System.out.println('Calling No arg constructor');","}","public Employee(String name,int age)","{","this();","System.out.println('Calling Parameterized constructor');","this.name=name;","this.age=age;","}","public void workOnAssignment()","{","// Working on assignment","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","public static void main(String args[])","{","Employee e1=new Employee('John',20);","System.out.println('Employee's name : '+e1.getName());","System.out.println('Employee's age : '+e1.getAge());","}","}","When you run above program, you will get below output:","Calling No arg constructor","Calling Parameterized constructor","Employee’s name : John","Employee’s age : 20","Please note that this keyword used for calling overloaded constructor should be first statement in that constructor.","that’s all about Constructor in Java."], 
                            "id": 16}, 
                        {"name": "Default constructor", 
                            "book": ["In this post, we will see about Java default constructor.","Default constructor is the no arg constructor which is inserted by compiler unless you provide any other constructor explicitly.","You won’t able to see it as it is present in class file rather than source file.","Is there any difference between no argument constructor and default constructor?","If you provide any constructor in class, it’s no longer default constructor.There is lots of debate on it but it is my opinion.","When you do not provide any constructor, compile will insert default constructor which will call super class’s default constructor.","You need to make sure that super class has no-arg constructor.","Let’s understand this with the help of an example","Create a class named Person.java","package org.arpit.java2blog.constructor;","public class Person {","String name;","int age;","public Person(String name, int age) {","super();","this.name = name;","this.age = age;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","}","Create another class named Employee.java","package org.arpit.java2blog.constructor;","public class Employee extends Person {","int empId;","public int getEmpId() {","return empId;","}","public void setEmpId(int empId) {","this.empId = empId;","}","}","You will get compilation error at line with this message.","“Implicit super constructor Person() is undefined for default constructor. Must define an explicit constructor”","As you can see here, it tells you that Person class should have explicit constructor else it won’t compile.","Once you add no arg constructor to Person class, you won’t get compilation error anymore.","package org.arpit.java2blog.constructor;","public class Person {","String name;","int age;","// Added explicit constructor","public Person()","{","System.out.println('Added explicit constructor');","}","public Person(String name, int age) {","super();","this.name = name;","this.age = age;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","}","As you can see once you add explicit constructor to Person class, there won’t be any compilation error in Employee class.","That’s all about default constructor in java."], 
                            "id": 17}, 
                        {"name": "Abstract class in java", 
                            "book": ["An abstract class is the class which is declared abstract and can have abstract or non abstract methods. An abstract class can not be instantiated. It can be extended by subclass to implement abstract methods and either use or override concrete methods.","Abstract method in java","Abstract method is the method which do not have implementation i.e. it does not have anybody.","abstract class Shape{","public abstract double calculateArea(); }","When do you need abstract class in java?","Let’s understand it with the help of the example. You have Shape class and it has some methods such as draw(), calcualteArea() etc. Drawing a shape is common for all the shapes but calculateArea() is different for each shape.","For example:","For Rectangle, it will be calculated as length * breadth and for circle, it will be pi* radius^2.","So with above behavior, we will implement draw() method in shape class and will create calcualteArea() as abstract method.So if you have some common behaviors and some specific behavior, make your class abstract.","Let’s create a abstract class as Shape and Rectangle, Circle class as concrete classes.","Example of Abstract class in java:","package org.arpit.java2blog;","abstract class Shape{","public void draw()","{","System.out.println('Draw method in shape class');","}","public abstract double calculateArea();","}","class Rectangle extends Shape","{","double length;","double breadth;","public Rectangle(double length, double breadth) {","super();","this.length = length;","this.breadth = breadth;","}","@Override","public double calculateArea() {","return length*breadth;","}","}","class Circle extends Shape","{","double radius;","public Circle(double radius) {","super();","this.radius = radius;","}","@Override","public double calculateArea() {","return 3.14*radius*radius;","}","}","Create a main class named “AbstractClassMain”","package org.arpit.java2blog;","public class AbstactClassMain {","public static void main(String[] args)","{","System.out.println('============================');","Rectangle rec=new Rectangle(3, 4);","rec.draw();","System.out.println('Area of rectangle is '+rec.calculateArea());","System.out.println('============================');","Circle cir=new Circle(3);","cir.draw();","System.out.println('Area of circle is '+cir.calculateArea());","System.out.println('============================');","}","}","============================","Draw method in shape class","Area of rectangle is 12.0","============================","Draw method in shape class","Area of circle is 28.259999999999998","============================","Let’s consider some cases to understand abstract class in java better:","Case 1: Is is possible to have zero abstract method in class but still you can declare class as abstract.","Answer:","Yes, It is possible to declare class as abstract even if you don’t have any abstract method in the class.","For example:","abstract class Shape{","public void draw() { System.out.println(“Draw method in shape class”); } }","Case 2: Class contains abstract method but is it possible to not declare class as Abstract?","Answer:","No, It is mandatory to declare class as Abstract but it contain abstract method.","class Shape{","public void draw()","{","System.out.println('Draw method in shape class');","}","public abstract double calculateArea();","}","You will get compilation errors:","At line 1 : “The type Shape must be an abstract class to define abstract methods”","At line 7: “The abstract method calculateArea in type Shape can only be defined by an abstract class”","If you have abstract method in class, class must be declared as abstract class in java","Case 3: Can you declare class as final and abstract at the same time?","Answer:","No, you can not declare class as final and abstract at the same time. Final means No other class can extend that class and Abstract means Class must be extended by any other class.","Case 4: Can you instantiate abstract class in java?","Answer:","No, you can not instantiate abstract class.","You can not instantiate abstract class in java","Case 5: If you are extending an abstract class in java, do you need to implement all the abstract methods of that class?","Answer:","Yes, you need to implement all the abstract method of superclass unless and until subclass is also an abstract class in java."], 
                            "id": 18}, 
                        {"name": "Difference between Abstract Class and Interface in java", 
                            "book": ["Some of the popular interview questions are “What are differences between abstract class and interface”. “When will you use abstract class and when will you use interface”. So in this article ,we will go through this topic.","Before going through differences between them, Lets go through its introduction.","Abstract class:","Abstract classes are created to capture common characteristics of subclasses. It can not be instantiated, it can be only used as super class by its subclasses. Abstract classes are used to create templatefor its sub classes down the hierarchy.","Lets take example of JDK class GenericServlet","public abstract class GenericServlet implementsServlet, ServletConfig,Serializable{","// abstract method","abstractvoidservice(ServletRequest req, ServletResponse res) ; ","void init(){","// Its implementation","}","// other method related to Servlet","}","When HttpServlet extends Generic servlet, it provides implementation of service() method","public class HttpServlet extends GenericServlet","{","voidservice(ServletRequest req, ServletResponse res)","{","// implementation ","}","protectedvoiddoGet(HttpServletRequest req, HttpServletResponse resp) ","{","// Implementation ","}","protectedvoiddoPost(HttpServletRequest req, HttpServletResponse resp) ","{","// Implementation ","}","// some other methods related to HttpServlet","}","Interface:","An interface is a collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface. So it is kind of signing a contract,you agree that if you implement this interface, then you have to use its methods.It is just a pattern, it can not do anything itself.","Lets take example of Externalizable Interface.","public interface Externalizable","extends Serializable","{","void writeExternal(ObjectOutput out)","throws IOException;","void readExternal(ObjectInput in)","throws IOException,","ClassNotFoundException;","} ","When you implement this interface, you have to implement above two methods.","public class Employee implements Externalizable{ "," int employeeId;"," String employeeName;"," @Override"," public void readExternal(ObjectInput in) throws IOException,"," ClassNotFoundException {employeeId=in.readInt();","employeeName=(String) in.readObject();"," } @Override"," public void writeExternal(ObjectOutput out) throws IOException {","out.writeInt(employeeId);","out.writeObject(employeeName); }","}","When to use Abstract class and interface:","If you have lot of methods and want default implementation for some of them, then go with abstract class","If you want to implement multiple inheritance then you have to use interface.As java does not support multiple inheritance, subclass can not extend more than one class but you can implement multiple interface so you can use interface for that.","If your base contract keeps on changing then you should use an abstract class. Because if your base contract keeps on changing and you still use an interface, you would have to change all the classes which implements that interface every time the contract changes.","Introduction of default and static methods in java 8","Oracle has tried to bridge gap between abstract class and interface by introducing concept of default and static methods in interface.So now we can provide default implementation of a method in interface and will not enforce class to implement it. I will cover these topic in my next post.","Please go throughcore java interview questions for more interview questions."], 
                            "id": 19}, 
                        {"name": "Abstraction in java", 
                            "book": ["Abstraction is a concept of exposing only essential details and hiding implementation details.","You can achieve abstraction using two ways in java.","Abstract class(0 to 100% abstraction)","Interface (100% abstraction)","For example:","When you search for any text on google, you just type text in text area and click on search button. What happens behind the scenes, how google search algorithm works, you might not be aware of that.","Abstract class in java","An abstract class is the class which is declared abstract and can have abstract or non abstract methods.It should be extended by child class and should implement abstract method.","Abstract method in java:","Abstract method is the method which do not have implementation i.e. it does not have any body.","abstract class Shape{","public abstract double calculateArea();// No body for calculatedArea method","}","Interface in java:","Interface is generally used to provide contract for class to implement. Interface do not have implementation of any method.A class implements an interface, thereby inheriting the abstract methods of the interface. So it is kind of signing a contract, you agree that if you implement this interface, then you have to use its methods.It is just a pattern, it can not do anything itself.","Example of interface in java:","package com.arpit.java2blog;","interface Paintable","{","void decorate();","}","public class Room implements Paintable{","@Override","public void paint() {","System.out.println('Painting the room');","}","}","Real life Example of abstraction in java:","Lets say we have Sport as interface. Now it’s implementation will be provided by classes called “Cricket” and “Football”.In real scenario, end user will not aware of implementation class and object of implementation class can be provided by factory method. Factory method can be used to create object of implementation class based on some criterion.","Let’s create an interface called Sport.java.","package com.arpit.java2blog;","public interface Sport {","void play();","}","Create class named “Cricket”","package com.arpit.java2blog;","public class Cricket implements Sport {","@Override","public void play() {","System.out.println('Playing cricket');","}","}","Create class named “Football”","package com.arpit.java2blog;","public class Football implements Sport {","@Override","public void play() {","System.out.println('Playing football');","}","}","Create main class named “SportInterfaceMain”","package com.arpit.java2blog;","public class SportInterfaceMain {","public static void main(String[] args) {","// In real scenario, you will get concrete object using getSport() factory method","Sport sport=new Cricket();","sport.play();","System.out.println('=================');","// You can easily change implementation","sport=new Football();","sport.play();","}","}","When you run above program, you will get below output:","Playing cricket","=================","Playing football","That’s all about abstraction in java."], 
                            "id": 20}, 
                        {"name": "Encapsulation in java", 
                            "book": ["Encapsulation in java is the process of binding related data(variables) and functionality(methods) into a single unit called class. Encapsulation can be achieved by using access modifier such as public, private, protected or default, so your class will be safe from unauthorized access by others and will be simple to maintain.","We can create fully encapsulated class by","Making variables private","Providing getters and setters methods for the accessing the variables.","Encapsulation is also termed as data hiding because you are making variables private and variables can be only excessed through public getters and setters.","Example of Encapsulation in java:","package com.arpit.java2blog;","public class Employee{","private int employeeId;","private String employeeName;","private String department;","public int getEmployeeId() {","return employeeId;","}","public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;","}","public String getEmployeeName() {","return employeeName;","}","public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;","}","public String getDepartment() {","return department;","}","public void setDepartment(String department) {","this.department = department;","}","public static void main(String args[])","{","Employee e1=new Employee();","e1.setEmployeeId(1);","e1.setEmployeeName('John');","e1.setDepartment('Sales');","System.out.println('=============');","System.out.println('Employee Id: '+e1.getEmployeeId());","System.out.println('Employee Name: '+e1.getEmployeeName());","System.out.println('Employee Department: '+e1.getDepartment());","}","}","When you run above program, you will get below output:","=============","Employee Id: 1","Employee Name: John","Employee Department: Sales","Advantages of Encapsulation in java:","It provides control over data. For example: If You want to check if age of employee is greater than 18 in setter method(setAge(int age)).","You can easily do it in setter method without breaking any code.","Increase reusability.","Makes class easy to use for other clients.","It helps the developer to write code more flexible and maintainable by binding them into a single unit and use appropriate access modifier to access the code as per need.","Difference between abstraction and encapsulation in java:","Encapsulation means data hiding using getter and setters. Abstraction means hiding implementation details using abstract class and interface.","Abstraction is more of design level concept and Encapsulation is more of implementation level concept."], 
                            "id": 21}, 
                        {"name": "Polymorphism in java", 
                            "book": ["In this tutorial, we will see about Polymorphism in java.","Polymorphism in java is one of core Object oriented programming concepts with Abstraction, encapsulation, and inheritance.","Polymorphism means one name many forms. In Java, polymorphism can be achieved by method overloading and method overriding.","There are two types of polymorphism in java.","Compile time polymorphism.","Run time polymorphism.","Compile time Polymorphism:","Compile time Polymorphism is nothing but method overloading in java. You can define various methods with same name but different method arguments. You can read more about method overloading.","Let’s understand with the help of example:","package org.arpit.java2blog;","public class MethodOverloadingExample {","public void method1(int a)","{","System.out.println('Integer: '+a);","}","public void method1(double b)","{","System.out.println('Double '+b);","}","public void method1(int a, int b)","{","System.out.println('Integer a and b:'+a+' '+b);","}","public static void main(String args[])","{","MethodOverloadingExample moe=new MethodOverloadingExample();","moe.method1(20);","moe.method1(30.0);","moe.method1(20, 30);","}","}","When you run above program, you will get below output:","Integer: 20","Double 30.0","Integer a and b:20 30","As you can see here, we have used same method name but different method arguments.The compiler will call appropriate method based on best-matched arguments.","Runtime Polymorphism:","Runtime Polymorphism is nothing but method overriding in java.If subclass is having same method as base class then it is known as method overriding Or in another word, If subclass provides specific implementation to any method which is present in its one of parents classes then it is known as method overriding.","Let’s say you have parent class as Shape and child class as Rectangle and circle.","package org.arpit.java2blog;","public class Shape {","public void draw()","{","System.out.println('Drawing Shape');","}","public static void main(String[] args) {","Shape s=new Rectangle();","s.draw();","s=new Circle();","s.draw();","}","}","class Rectangle extends Shape","{","public void draw()","{","System.out.println('Drawing Rectangle');","}","}","class Circle extends Shape","{","public void draw()","{","System.out.println('Drawing Circle');","}","}","When you run above program, you will get below output:","Drawing Rectangle","Drawing Circle","Please note that we are assigning child object to parent object here.","Shape s=new Rectangle();","As you can see we have overridden draw methods in child class Rectangle and Circle.JVM decides at runtime which method it needs to call depending on the object assignment. That’s why this is known as Run time polymorphism.","That’s all about Polymorphism in java."], 
                            "id": 22}, 
                        {"name": "Method overriding in java", 
                            "book": ["If subclass is having same method as base class then it is known as method overriding Or in another words, If subclass provides specific implementation to any method which is present in its one of parents classes then it is known as method overriding","Lets start with a real time example:","In a small organization,There are two kinds of Employees i.e. Manager and Developer. Now we want to print salary of employee.","Create class Employee.java in org.arpit.java2blog","Employee.java:","package org.arpit.java2blog;","public class Employee { ","int employeeId;","String employeeName;","double salary;","public Employee(int employeeId, String employeeName, double salary) {","super();","this.employeeId = employeeId;","this.employeeName = employeeName;","this.salary = salary;","}","public int getEmployeeId() {","return employeeId;","}","public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;","}","public String getEmployeeName() {","return employeeName;","}","public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;","}","public double getSalary() {","return salary;","}","public void setSalary(double salary) {","this.salary = salary;","}","}","Manager.java:","package org.arpit.java2blog;","public class Manager extends Employee{","public static final double BONUSPERCENT=0.2;","public Manager(int employeeId, String employeeName, double salary) {","super(employeeId, employeeName, salary);","}","public double getSalary() {","return salary+salary*BONUSPERCENT;","}","}","Developer.java:","package org.arpit.java2blog;","public class Developer extends Employee{ ","public static final double BONUSPERCENT=0.1;","public Developer(int employeeId, String employeeName, double salary) {","super(employeeId, employeeName, salary);","}","public double getSalary() {","return salary+salary*BONUSPERCENT;","}","}","MethodOverridingMain:","package org.arpit.java2blog;","public class MethodOverridingMain {","/**","* @author Arpit Mandliya","*/","public static void main(String[] args) {","Developer d1=new Developer(1,'Arpit' ,20000);","Developer d2=new Developer(2,'John' ,15000);","Manager m1=new Manager(1,'Amit' ,30000);","Manager m2=new Manager(2,'Ashwin' ,50000);","System.out.println('Name of Employee:' +d1.getEmployeeName()+'---'+'Salary:'+d1.getSalary());","System.out.println('Name of Employee:' +d2.getEmployeeName()+'---'+'Salary:'+d2.getSalary());","System.out.println('Name of Employee:' +m1.getEmployeeName()+'---'+'Salary:'+m1.getSalary());","System.out.println('Name of Employee:' +m2.getEmployeeName()+'---'+'Salary:'+m2.getSalary());","}","}","Run it:","When you will run MethodOverridingMain.java.You will get following output:","Name of Employee:Arpit---Salary:22000.0","Name of Employee:John---Salary:16500.0","Name of Employee:Amit---Salary:36000.0","Name of Employee:Ashwin---Salary:60000.0","As you can see here, We are overriding getSalary() method of Employee class in Developer and Manager. Why we need to override getSalary()?","Because we require specific implementation of getSalary() method based on Class. e.g. Developer class and Manager class have different bonus so we need different implementation for both.","Rules for method overriding:","Arguments Must not change","Return type Can’t change except for covariant (subtype) returns","Access Modifier Must not be more restrictive. Can be less restrictive.","Exceptions Can reduce or eliminate but must not throw new/broader checked exceptions","Contructor Can not be overriden","Static method Can not be overriden","final method Can not be overriden","Now here, I will answer some of the obvious question you could have:","Why can’t you make access modifier more restrictive (e.g. public to private)?","It’s a fundamental principle in OOP: the child class is a fully-fledged instance of the parent class, and must therefore have at least the same interface as the parent class. Making less visible would violate this idea; you could make child classes unusable as instances of the parent class.","Lets see with the help of example:","class Employee{"," public double getSalary(){","//some operation","}"," }","class Developer extends Employee{","private double id getSalary(){","//some operation","}"," }","Now I could call using :","Employee e1=new Developer();","e1.getSalary();","so even you made getSalary() method of developer private, you will be able to access getSalary() method of developer using reference of Employee(super class) even if you have made it private. so you can’t reduce access modifier while overriding method.","Why can’t you override static methods?","Because static methods are related to class not to state of object so You can declare static method in child class but it has nothing to do with parent class. It is method hiding not overriding.","Can you override private methods?","No,you can’t. A private method cannot be overridden since it is not visible from any other class. You can declare a new method for your subclass that has no relation to the superclass method. So it is not method overriding.","Why can’t you override final methods?","Because final methods are meant to be not overridden.You declare a method final because you don’t want it to be overridden in subclass.","What if We change number of arguments?","If you change number of arguments then it will be method overloading not overriding. Parent class method and child class method should have same method signature.","What is dynamic binding?","Binding of overridden methods happen at runtime is known as dynamic binding.","Super keyword:","Super keyword can be used to to call specific parent class method from child class.","For example:","package org.arpit.java2blog;","public class Employee{"," public double getSalary(){","System.out.println('In Employee class getSalary() method');","return 0;"," }"," public static void main(String args[])"," {","Developer d1=new Developer();","d1.getSalary();"," }","}","class Developer extends Employee{"," public double getSalary(){","// calling parent class method","super.getSalary();","System.out.println('In Developer class getSalary() method');","return 0;"," }","}","When you run the program, you will get following output:","In Employee class getSalary() method","In Developer class getSalary() method"], 
                            "id": 23}, 
                        {"name": "Method overloading in java", 
                            "book": ["If subclass is having same method as base class then it is known as method overriding Or in another words, If subclass provides specific implementation to any method which is present in its one of parents classes then it is known as method overriding","Lets start with a real time example:","In a small organization,There are two kinds of Employees i.e. Manager and Developer. Now we want to print salary of employee.","Create class Employee.java in org.arpit.java2blog","Employee.java:package org.arpit.java2blog;","public class Employee { ","int employeeId;","String employeeName;","double salary;","public Employee(int employeeId, String employeeName, double salary) {","super();","this.employeeId = employeeId;","this.employeeName = employeeName;","this.salary = salary;","}","public int getEmployeeId() {","return employeeId;","}","public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;","}","public String getEmployeeName() {","return employeeName;","}","public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;","}","public double getSalary() {","return salary;","}","public void setSalary(double salary) {","this.salary = salary;","}","}","Manager.java:","package org.arpit.java2blog;","public class Manager extends Employee{","public static final double BONUSPERCENT=0.2;","public Manager(int employeeId, String employeeName, double salary) {","super(employeeId, employeeName, salary);","}","public double getSalary() {","return salary+salary*BONUSPERCENT;","}","}","Developer.java:","package org.arpit.java2blog;","public class Developer extends Employee{ ","public static final double BONUSPERCENT=0.1;","public Developer(int employeeId, String employeeName, double salary) {","super(employeeId, employeeName, salary);","}","public double getSalary() {","return salary+salary*BONUSPERCENT;","}","}","MethodOverridingMain:","package org.arpit.java2blog;","public class MethodOverridingMain {","/**","* @author Arpit Mandliya","*/","public static void main(String[] args) {","Developer d1=new Developer(1,'Arpit' ,20000);","Developer d2=new Developer(2,'John' ,15000);","Manager m1=new Manager(1,'Amit' ,30000);","Manager m2=new Manager(2,'Ashwin' ,50000);","System.out.println('Name of Employee:' +d1.getEmployeeName()+'---'+'Salary:'+d1.getSalary());","System.out.println('Name of Employee:' +d2.getEmployeeName()+'---'+'Salary:'+d2.getSalary());","System.out.println('Name of Employee:' +m1.getEmployeeName()+'---'+'Salary:'+m1.getSalary());","System.out.println('Name of Employee:' +m2.getEmployeeName()+'---'+'Salary:'+m2.getSalary());","}","}","Run it:","When you will run MethodOverridingMain.java.You will get following output:","Name of Employee:Arpit---Salary:22000.0","Name of Employee:John---Salary:16500.0","Name of Employee:Amit---Salary:36000.0","Name of Employee:Ashwin---Salary:60000.0","As you can see here, We are overriding getSalary() method of Employee class in Developer and Manager. Why we need to override getSalary()?","Because we require specific implementation of getSalary() method based on Class. e.g. Developer class and Manager class have different bonus so we need different implementation for both.","Rules for method overriding:","Arguments Must not change","Return type Can’t change except for covariant (subtype) returns","Access Modifier Must not be more restrictive. Can be less restrictive.","Exceptions Can reduce or eliminate but must not throw new/broader checked exceptions","Contructor Can not be overriden","Static method Can not be overriden","final method Can not be overriden","Now here, I will answer some of the obvious question you could have:","Why can’t you make access modifier more restrictive (e.g. public to private)?","It’s a fundamental principle in OOP: the child class is a fully-fledged instance of the parent class, and must therefore have at least the same interface as the parent class. Making less visible would violate this idea; you could make child classes unusable as instances of the parent class.","Lets see with the help of example:","class Employee{"," public double getSalary(){"," //some operation","}"," }","class Developer extends Employee{","private double id getSalary(){","//some operation","}"," }","Now I could call using :","Employee e1=new Developer();","e1.getSalary();","so even you made getSalary() method of developer private, you will be able to access getSalary() method of developer using reference of Employee(super class) even if you have made it private. so you can’t reduce access modifier while overriding method.","Why can’t you override static methods?","Because static methods are related to class not to state of object so You can declare static method in child class but it has nothing to do with parent class. It is method hiding not overriding.","Can you override private methods?","No,you can’t. A private method cannot be overridden since it is not visible from any other class. You can declare a new method for your subclass that has no relation to the superclass method. So it is not method overriding.","Why can’t you override final methods?","Because final methods are meant to be not overridden.You declare a method final because you don’t want it to be overridden in subclass.","What if We change number of arguments?","If you change number of arguments then it will be method overloading not overriding. Parent class method and child class method should have same method signature.","What is dynamic binding?","Binding of overridden methods happen at runtime is known as dynamic binding.","Super keyword:","Super keyword can be used to to call specific parent class method from child class.","For example:","package org.arpit.java2blog;","public class Employee{"," public double getSalary(){","System.out.println('In Employee class getSalary() method');","return 0;"," }"," public static void main(String args[])"," {","Developer d1=new Developer();","d1.getSalary();"," }","}","class Developer extends Employee{"," public double getSalary(){","// calling parent class method","super.getSalary();","System.out.println('In Developer class getSalary() method');","return 0;"," }","}","When you run the program, you will get following output:","In Employee class getSalary() method","In Developer class getSalary() method"], 
                            "id": 24}, 
                        {"name": "Final keywod in java", 
                            "book": ["In this post, we will see about final keyword in java.So final keyword can be associated with:","variable","method","class","Final is often used when you want restrict others from doing any changes.","Let’s go through each by one.","Final Variable:","If you make any variable final then you are not allowed to change its value later.It will be constant.If you try to change value, then compiler will give you error.","Let’s take a simple example:","package org.arpit.java2blog;","public class FinalExample{","final int count=10;","public void setCount()","{","count=20;","}","}","In above example, you will get compilation error with text “The final field FinalExampleMain.count cannot be assigned” at highlighted row.","Blank final variable:","Blank final variable is the variable which is not initialized at the time of declaration. It can be initialized only in constructor.","But if you do not initialize final variable, you will get compilation error as below.","package org.arpit.java2blog;","public class FinalExample {","final int count;","}","In above example, you will get compilation error with text “The blank final field count may not have been initialized” at highlighted row.","You can initialize final variable once in a constructor as below.","package org.arpit.java2blog;","public class FinalExample {","final int count;","FinalExample(int count)","{","this.count=count;","}","public static void main(String args[])","{","FinalExample fe=new FinalExample(10);","System.out.println(fe.count);","}","}","Above code will work fine. You might be thinking what may be use of it.","Let’s say you have Employee class and it has an attribute called empNo. Once object is created, you don’t want to change empNo.","So you can declare it final and initialize it in constructor.","static blank final variable:","static blank final variable is static variable which is not initialized at the time of declaration. It can be initialized only in static block.","package org.arpit.java2blog;","public class FinalExample {","static final int count;","static","{","count=10; ","}","public static void main(String args[])","{","System.out.println(FinalExample.count);","}","}","When you run above program, you will get below output:","10","Final Method:","You can not override final methods in subclasses. You can call parent’s class final method using subclass’s object but you can not override it.","package org.arpit.java2blog;","public class Shape{","public final void draw()","{","System.out.println('Draw method in shape class');","}","}","class Rectangle extends Shape","{","public void draw()","{","System.out.println('Draw method in shape class');","}","public static void main(String args[])","{","Rectangle rectangle= new Rectangle();","rectangle.draw();","}","}","You will get compilation error at highlighted row with text “Cannot override the final method from Shape”.","If you remove draw method from rectangle class, it will work fine.","package org.arpit.java2blog;","public class Shape{","public final void draw()","{","System.out.println('Draw method in shape class');","}","}","class Rectangle extends Shape","{","public static void main(String args[])","{","Rectangle rectangle= new Rectangle();","rectangle.draw();","}","}","When you run above program, you will get below output:","Draw method in shape class","Final Class:","If you declare a class final, no other class can extend it.","package org.arpit.java2blog;","final class Shape{","public final void draw()","{","System.out.println('Draw method in shape class');","}","}","class Rectangle extends Shape","{","public static void main(String args[])","{","Rectangle rectangle= new Rectangle();","rectangle.draw();","}","}","You will get compilation error at highlighted row with text “The type Rectangle cannot subclass the final class Shape”.","Summary for final keyword:","You can use final keyword with variable, method, and class.","You can not use final keyword with constructor.","If you do not initialize final variable(unless assigned in constructor), you will get compilation error.","You can not change value of final variable once initialized.","You can override final methods in the sub class.","You can not extend any final class."], 
                            "id": 25}, 
                        {"name": "static keyword in java", 
                            "book": ["In this post, we will see about static keyword in java.So static keyword can be associated with:","Variable","Method","Block","Nested class","Lets go through each one by one.","Static variable:","If any instance variable is declared as static.It is known as static variable.","static int countryCounter;","Some points about static variables are:","Static variable belongs to a class not to a object.","Static variable are initialized only once in class area at the time of class loading","All objects share single copy of static variable","You don’t need to create object to access static variable.You can directly access it using class name.","Static variable can be accessed by instance java methods also.","If you create a class with two variables, one static, one non static.Non static variable of that class (objects created from that class) gets its own version of that variable. But with the static variable, it belongs to the class, and there is only one. Although any object from that class can reference it.","Example:","Lets take a very simple example.You want to track how many objects you have created.For that you have a static variable in your class.Lets say your class is:","Country.java","package org.arpit.java2blog;","/*"," * @author:Arpit Mandliya"," */","public class Country {","//static variable","static int countryCounter;","// instance variable","String name;","int dummyCounter;","Country(String name)","{","this.name=name;","countryCounter++;","dummyCounter++;","}","public static void main(String[] args)","{","System.out.println('****************************************');","Country india=new Country('India');","System.out.println('Country Name: '+india.getName());","System.out.println('Number of country object created: '+Country.countryCounter);","System.out.println('Dummy counter not a static variable: '+india.dummyCounter);","System.out.println('****************************************');","Country france=new Country('France');","System.out.println('Country Name: '+france.getName());","System.out.println('Number of country object created: '+france.countryCounter);","System.out.println('Dummy counter not a static variable: '+france.dummyCounter);","System.out.println('****************************************');","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","}","Output:","When you run above program,you will get following results:","****************************************","Country Name: India","Number of country object created: 1","Dummy counter not a static variable 1","****************************************","Country Name: France","Number of country object created: 2","Dummy counter not a static variable 1","****************************************","In above example,we have one static variable named “countryCounter” so whenever we are creating one new object,its value will be incremented by 1 as counterCounter variable is being shared by all country objects and we have instance variable named “dummyCounter” so whenever any new object is created,its value is initialized to 0 again.","Static Method:","If any method is declared as static.It is known as static method."," public static void printCountryCounter()","{","System.out.println('Number of country object created: '+countryCounter);","}","Some points about static methods are:","Static method belongs to a class not to object.","Static method can be invoked directly using a className.Although It can be invoked usingobjectName also","Generally static method are used for getting static fields.","You can access static methods through java instance methods.","You can not access non static method or instance variable in static methods.","A static method can not refer to this or super keyword.","Example:","We will create above example and will use one static method printCountryCounter for printing countryCounter variable.","Country.java","package org.arpit.java2blog;","/*"," * @author:Arpit Mandliya"," */","public class Country {","String name;","static int countryCounter;","int dummyCounter;","Country(String name)","{","this.name=name;","countryCounter++;","dummyCounter++;","}","public static void main(String[] args)","{","Country india=new Country('India');","System.out.println('****************************************');","System.out.println('Country Name: '+india.getName());","printCountryCounter();","System.out.println('Dummy counter not a static variable: '+india.dummyCounter);","System.out.println('****************************************');","Country france=new Country('France');","System.out.println('Country Name: '+france.getName());","printCountryCounter();","System.out.println('Dummy counter not a static variable: '+france.dummyCounter);","System.out.println('****************************************');","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public static void printCountryCounter()","{","System.out.println('Number of country object created: '+countryCounter);","}","}","Output:","When you run above program,you will get following results:","****************************************","Country Name: India","Number of country object created: 1","Dummy counter not a static variable 1","****************************************","Country Name: France","Number of country object created: 2","Dummy counter not a static variable 1","****************************************","Why can’t you access non static member from static method:","When you call non static method from static method,you will get compilation error.","For example:In above printCountryCounter(),Lets say you call getName()","You will compilation error.","public static void printCountryCounter()"," {","getName();//Compilation error","System.out.println('Number of country object created: '+countryCounter);"," }","Imagine a situation, when you are allowed to call getName() from printCountryCounter() .You can call printCountryCounter() just using class name so when you call printCountryCounter() ,what value getName() should return because value may be different for each new object and which value will it refer.So that is why,you are not allowed call non static member from static method.","Static block:","The static block, is a block of statement inside a Java class that will be executed when a class is first loaded in to the JVM","Some points about static blocks are:","Static blocks are used to initialize static data members.","Static blocks get executed before main method get executed.","package org.arpit.java2blog;","public class StaticBlockExample {","/**","* @Author:Arpit Mandliya","*/","static{","System.out.println('This block will get call before main method');","}","public static void main(String[] args) {","System.out.println('In main method');","}","}","Output:","When you run above program,you will get following results:","This block will get call before main method","In main method","Static class:","In java,you can define a class within another class. Such a class is called a nested class. The class which enclosed nested class is known as Outer class. In java, we can’t make outer class static.","Only nested class can be declared as static","Some points about nested static class are:","Nested static class does not need reference of outer class.","A static class cannot access non-static members of the Outer class. It can access only static members of Outer class including private.","Example:","package org.arpit.java2blog;","/*"," * @author:Arpit Mandliya"," */","public class OuterClass {","static class InnerStaticClass{","public void printInnerClass()","{","System.out.println('In inner class');","}","}","public static void main(String[] args)","{","System.out.println('****************************************');","OuterClass.InnerStaticClass inc=new OuterClass.InnerStaticClass();","inc.printInnerClass();","System.out.println('****************************************');","}","public static void printOuterClass()","{","System.out.println('In outer class');","}","} ","Output:","When you run above program,you will get following results:","****************************************","In inner class","****************************************"], 
                            "id": 26}]
                },
                {
                    "name": "Chapter 4",
                    "description": "Java Collections",
                    "content": [
					{"name": "HashMap in java",
						"book": ["HashMap in java is most common Collection which we use nowadays. It stores entry in key-value pair.","HashMap implements Map interface which maps key to value.","It is not synchronized and is not thread safe.","Duplicate keys are not allowed","One null key and multiple null values are allowed","HashMap<Integer,String> employeeHashmap=new HashMap<Integer,String>();","employeeHashmap.put(1,'Arpit');","employeeHashmap.put(2,'John');","Example:","package org.arpit.java2blog;","import java.util.HashMap;","public class HashMapBuiltMain {","public static void main(String[] args) {","HashMap<Integer, String> employeeHashmap = new HashMap<Integer, String>();","employeeHashmap.put(1, 'Arpit');","employeeHashmap.put(2, 'John');","employeeHashmap.put(3, 'Martin');","employeeHashmap.put(4, 'Vaibhav');","// Iterating HashMap Using keySet() and for each loop","System.out.println('Iterating HashMap Using keySet() and for each loop');","System.out.println('-----------------------------');","for (Integer empId : employeeHashmap.keySet()) {","System.out.println('EmpId:' + empId + ' andEmp Name:' + employeeHashmap.get(empId));","}","System.out.println('-----------------------------');","}","}","When you run above program, you will get below output","Iterating HashMap Using keySet() and for each loop","-----------------------------","EmpId:1 andEmp Name:Arpit","EmpId:2 andEmp Name:John","EmpId:3 andEmp Name:Martin","EmpId:4 andEmp Name:Vaibhav","-----------------------------","Storing Custom objects as Key:","You can store custom objects as Key in HashMap but you should implement hashcode and equals method, otherwise it may not work as expected.You may go through hashcode and equal method to understand it better.","Create a class called Country.java","package org.arpit.java2blog;","public class Country{","String name;","long population;","public Country(String name, long population) {","super();","this.name = name;","this.population = population;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public long getPopulation() {","return population;","}","public void setPopulation(long population) {","this.population = population;","}","@Override","public int hashCode() {","final int prime = 31;","int result = 1;","result = prime * result + ((name == null) ? 0 : name.hashCode());","result = prime * result + (int) (population ^ (population >>> 32));","return result;","}","@Override","public boolean equals(Object obj) {","if (this == obj)","return true;","if (obj == null)","return false;","if (getClass() != obj.getClass())","return false;","Country other = (Country) obj;","if (name == null) {","if (other.name != null)","return false;","} else if (!name.equals(other.name))","return false;","return true;","}","}","Create another class HashMapMain.java","package org.arpit.java2blog;","import java.util.HashMap;","public class HashMapMain {","public static void main(String args[])","{","// HashMap with Country name as key and capital as value","// HashMap stores elements in key value pairs","HashMap<String,String> countryCapitalMap=new HashMap<String,String>();","countryCapitalMap.put('India','Delhi');","countryCapitalMap.put('Japan','Tokyo');","countryCapitalMap.put('France','Paris');","countryCapitalMap.put('Russia','Moscow');","System.out.println('-----------------------------');","// Iterating HashMap Using keySet() and for each loop","System.out.println('Iterating HashMap Using keySet() and for each loop');","for (String countryKey:countryCapitalMap.keySet()) {","System.out.println('Country:'+ countryKey +' andCapital:'+countryCapitalMap.get(countryKey));","}","System.out.println('-----------------------------');","}","}","When you run above program, you will get below output","-----------------------------","Iterating HashMap Using keySet() and for each loop","Country:France andCapital:Paris","Country:Russia andCapital:Moscow","Country:Japan andCapital:Tokyo","Country:India andCapital:Delhi","-----------------------------","HashMap is not synchronized by default but we can make it synchronized using","Collections.synchronizedMap(new HashMap<String, String>());","That’s all about HashMap in java."],
						"id": 27}, 
                        {"name": "LinkedHashMap in java",
							"book": ["In this post, we will see about LinkedHashMap in java. LinkedHashMap is same as HashMap except that it maintains insertion order.","Some points about LinkedHashMap","LinkedHashMap implements Map interface and extends HashMap class.","LinkedHashMap maintains insertion order, so when you will be able to access elements in the order they were inserted like ArrayList.","LinkedHashMap maintains doubly Linked list to maintain insertion order.","Example:","LinkedHashMapMain.java","package org.arpit.java2blog;","import java.util.LinkedHashMap;","public class LinkedHashMapMain {","public static void main(String args[])","{","// LinkedHashMap with Country as key and capital as value","// LinkedHashMap maintains insertion order","LinkedHashMap<String,String> countryCapitalMap=new LinkedHashMap<String,String>();","countryCapitalMap.put('India','Delhi');","countryCapitalMap.put('Japan','Tokyo');","countryCapitalMap.put('France','Paris');","countryCapitalMap.put('Russia','Moscow');","System.out.println('-----------------------------');","// Iterating Using keySet() and for each loop","System.out.println('Iterating Using keySet() and for each loop');","for (String countryKey:countryCapitalMap.keySet()) {","System.out.println('Country:'+ countryKey +' andCapital:'+countryCapitalMap.get(countryKey));","}","System.out.println('-----------------------------');","}","}","If you may iterate LinkedHashMap in multiple ways.","When you run above program, you will get below output:","-----------------------------","Iterating Using keySet() and for each loop","Country:India andCapital:Delhi","Country:Japan andCapital:Tokyo","Country:France andCapital:Paris","Country:Russia andCapital:Moscow","-----------------------------"],
							"id": 28}, 
                        {"name": "TreeMap in java",
							"book": ["TreeMap class implements Map similar to HashMap.","Some important points about TreeMap:","TreeMap implements Map interface and extends HashMap class.","TreeMap is implemented using Red black tree based NavigableMap.","TreeMap is ordered collection and store its elements in natural ordering of keys.","Key which you would like to put in TreeMap must implement Comaparable interface or you can use Comparator for custom sorting","Example:","package org.arpit.java2blog;","import java.util.TreeMap;","public class TreeMapMain {","public static void main(String args[])","{","// TreeMap with Country as key and capital as value","// TreeMap stores elements in natural ordering of keys. ","TreeMap<String,String> countryCapitalMap=new TreeMap<String,String>();","countryCapitalMap.put('India','Delhi');","countryCapitalMap.put('Japan','Tokyo');","countryCapitalMap.put('France','Paris');","countryCapitalMap.put('Russia','Moscow');","System.out.println('-----------------------------');","// Iterating TreeMap Using keySet() and for each loop","System.out.println('Iterating TreeMap Using keySet() and for each loop');","for (String countryKey:countryCapitalMap.keySet()) {","System.out.println('Country:'+ countryKey +' andCapital:'+countryCapitalMap.get(countryKey));","}","System.out.println('-----------------------------');","}","}","When you run above program, you will get following output:","-----------------------------","Iterating TreeMap Using keySet() and for each loop","Country:France andCapital:Paris","Country:India andCapital:Delhi","Country:Japan andCapital:Tokyo","Country:Russia andCapital:Moscow","-----------------------------","As you can see, it is sorted in ascending order of Key(Country)","What if you want custom sorting rather than natural ordering:","If you want custom sorting , then you can using below TreeMap constructor. You can define your own comparator.","TreeMap countryCapitalMap=new TreeMap(Comparator comp);","Example: Create Country.java as below","package org.arpit.java2blog;","public class Country {","String name;","long population;","public Country(String name, long population) {","super();","this.name = name;","this.population = population;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public long getPopulation() {","return population;","}","public void setPopulation(long population) {","this.population = population;","}","}","Create TreeMapCompMain as below:","package org.arpit.java2blog;","import java.util.Comparator;","import java.util.Iterator;","import java.util.TreeMap;","public class TreeMapCompMain {","public static void main(String[] args)","{","Country india=new Country('India',1000);","Country japan=new Country('Japan',10000);","Country france=new Country('France',2000);","Country russia=new Country('Russia',20000);","Comparator comparator=new Comparator() {","@Override","public int compare(Country o1, Country o2) {","return o2.getName().compareTo(o1.getName());","}","};","System.out.println('Sorting TreeMap in reverse order of country name');","TreeMap<Country, String> countryCapitalMap=new TreeMap<Country,String>(comparator);","countryCapitalMap.put(india,'Delhi');","countryCapitalMap.put(japan,'Tokyo');","countryCapitalMap.put(france,'Paris');","countryCapitalMap.put(russia,'Moscow');","Iterator countryCapitalIter=countryCapitalMap.keySet().iterator();//put debug point at this line","while(countryCapitalIter.hasNext())","{","Country countryObj=countryCapitalIter.next();","String capital=countryCapitalMap.get(countryObj);","System.out.println(countryObj.getName()+'----'+capital);","}","}","}","When you run above program, you will get below output:","Sorting TreeMap in reverse order of country name","Russia----Moscow","Japan----Tokyo","India----Delhi","France----Paris","You can pass HashMap to constructor of TreeMap to sort it on Key","TreeMap countryCapitalMap=new TreeMap(Map hm);","By passing HashMap to constructor of TreeMap, you can sort TreeMap.","Example: ","Create Country.java as below. It should implement Comparable interface","package org.arpit.java2blog;","public class Country implements Comparable {","String name;","long population;","public Country(String name, long population) {","super();","this.name = name;","this.population = population;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public long getPopulation() {","return population;","}","public void setPopulation(long population) {","this.population = population;","}","@Override","public int compareTo(Object o) {","Country country=(Country) o;","return this.getName().compareTo(country.getName());","}","}","Create TreeMapCompMain.java as below:","package org.arpit.java2blog;","import java.util.HashMap;","import java.util.Iterator;","import java.util.TreeMap;","public class TreeMapCompMain {","public static void main(String[] args)","{","Country india=new Country('India',1000);","Country japan=new Country('Japan',10000);","Country france=new Country('France',2000);","Country russia=new Country('Russia',20000);","HashMap<Country, String> countryCapitalMap=new HashMap<Country,String>();","countryCapitalMap.put(india,'Delhi');","countryCapitalMap.put(japan,'Tokyo');","countryCapitalMap.put(france,'Paris');","countryCapitalMap.put(russia,'Moscow');","System.out.println('Sorting HashMap by passing it to TreeMap constructor');","TreeMap<Country,String> sortedTreeMapCountryCapital=newTreeMap<Country,String> (countryCapitalMap);","Iterator countryCapitalIter=sortedTreeMapCountryCapital.keySet().iterator();//put debug point at this line","while(countryCapitalIter.hasNext())","{","Country countryObj=countryCapitalIter.next();","String capital=countryCapitalMap.get(countryObj);","System.out.println(countryObj.getName()+'----'+capital);","}","}","}","When you run program, you will get below output:","Sorting HashMap by passing it to TreeMap constructor","France----Paris","India----Delhi","Japan----Tokyo","Russia----Moscow"],
							"id": 29}, 
                        {"name": "TreeSet in java",
							"book": ["In this post, we will see TreeSet in java.","Java TreeSet have following properties:","It can contain only unique element.","It stores objects in ascending order by default,","It implements NavigableSet interface which extends SortedSet.","When you put objects in TreeSet, it must implement Comparable interface.","Lets understand it more with the help of example.","Example:","1) create a class named Country.java.","package com.org.arpit.java2blog;","public class Country implements Comparable{","String countryName;","public Country(String countryName) {","super();","this.countryName = countryName;","}","@Override","public int compareTo(Object arg0) {","Country country=(Country) arg0;","return (this.countryName.compareTo(country.countryName) ) ;","}","public String getCountryName() {","return countryName;","}","public void setCountryName(String countryName) {","this.countryName = countryName;","}","}","2) create TreeSetMain.java as below: ","package com.org.arpit.java2blog;","import java.util.Iterator;","import java.util.TreeSet;","public class TreeSetMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Country indiaCountry=new Country('India');","Country chinaCountry=new Country('China');","Country nepalCountry=new Country('Nepal');","Country bhutanCountry=new Country('Bhutan');","Country indiaCountry2=new Country('India');","Country nepalCountry2=new Country('Nepal');","TreeSet countryTreeSet = new TreeSet();","countryTreeSet.add(indiaCountry);","countryTreeSet.add(chinaCountry);","countryTreeSet.add(nepalCountry);","countryTreeSet.add(bhutanCountry);","countryTreeSet.add(indiaCountry2);","countryTreeSet.add(nepalCountry2);","Iterator counIter=countryTreeSet.iterator(); // put debug point here","while(counIter.hasNext())","{","System.out.println(counIter.next().countryName);","}"," }","}","When you run above program, you get below out:","Bhutan","China","India","Nepal","As you can see, we have added 6 country objects in Treeset but we have only 4!!. As TreeSet can only have unique elements,indiaCountry2 and nepalCountry2 did not add to the TreeSet. Explanation:","When you will put indiaCountry2 in treeSet it will compare this object with indiaCountry as indiaCountry2.compareTo(indiaCountry) and compareTo method will return 0. Both object will treated as equal. As you can not add duplicate element in TreeSet, indiaCountry2 will not be added to above TreeSet.","Now put debug point at line 27 and right click on project-&gt;debug as-&gt; java application. Program will stop execution at line 27 then right click on countryTreeSet then select watch.You will be able to see structure as below.","Tricky question on TreeSet: ","Guess output of below program: ","package com.org.arpit.java2blog;","import java.util.Iterator;","import java.util.TreeSet;","public class Employee implements Comparable { "," public String name;"," public int compareTo(Object o) {","return 0;"," }"," public static void main(String args [])"," {","Employee employeeOne = new Employee();","Employee employeeTwo = new Employee();","employeeOne.name= 'John';","employeeTwo.name= 'Martin';","TreeSet employeeSet = new TreeSet();","employeeSet.add(employeeOne);","employeeSet.add(employeeTwo);","Iterator empIt=employeeSet.iterator();","while(empIt.hasNext())","{","System.out.println(empIt.next().name);","} "," }","}","What will be output of above program:","A. Martin","B. John","C. John","Martin","D. Compilation fails.","E. The code runs with no output.","F. An exception is thrown at runtime.","Correct Answer is B here.","Explanation:","As you can see we have overridden compareTo method in Employee class and always return 0.","Following steps will take place:","First element with “John” will be added to employeeSet.","When we will added second element with martin, compareTo method will get called with employeeOne.compareTo(employeeTwo) and it will return 0.","As compareTo method returns 0, employeeOne is equals to employeeTwo, so employeeTwo will not be added to treeSet.","So output of above program is “John”"],
							"id": 30}, 
                        {"name": "ArrayList in java",
							"book": ["ArrayList in java is most common Collections data structure along with HashMap which we use very often.","Why to choose ArrayList vs Array:","Array is fixed length data structure If array is full , you can not add element to it, where as ArrayList in java can dynamically grow and shrink as per our need.","You can use generics with ArrayList but not with Array","ArrayList have predefined methods which can be used to perform operations.","Some important points about ArrayList in java are:","ArrayList is implementation of list interface.","ArrayList is not synchonized(so not thread safe)","ArrayList is implemented using array as internal data structure.It can be dynamically resized .","ArrayList increases half of its size when its size is increased.","Example of ArrayList in java","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.HashSet;","import java.util.LinkedHashSet;","import java.util.*;","public class JavaArrayListExampleMain {"," /*","* @author : Arpit Mandliya","*/"," public static void main(String[] args) {","ArrayList employeeNameList = new ArrayList();","employeeNameList.add('John');","employeeNameList.add('Ankit');","employeeNameList.add('Rohan');","employeeNameList.add('Amit');","System.out.println('Employee list:');","for (String empName : employeeNameList) {","System.out.println(empName);","}"," }","}","When you run above program, you will get below output:","Employee list:","John","Ankit","Rohan","Amit","Iterate over list :","We have used foreach loop to iterate over list in above example: There are many ways to iterate over list. Some of them are:","1) Using for loop","2) Using Iterator","Iterator example:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.HashSet;","import java.util.LinkedHashSet;","import java.util.*;","public class JavaArrayListExampleMain {"," /*","* @author : Arpit Mandliya","*/"," public static void main(String[] args) {","ArrayList employeeNameList = new ArrayList();","employeeNameList.add('John');","employeeNameList.add('Ankit');","employeeNameList.add('Rohan');","employeeNameList.add('Amit');","System.out.println('Employee list:');","Iterator iter = employeeNameList.iterator();","while (iter.hasNext()) {","System.out.println(iter.next());","}"," }","}","When you run above program, you will get below output:","Employee list:","John","Ankit","Rohan","Amit","Methods of ArrayList in java","I am explaining below method in context of String list, but you can put any object in the list.","add( Object o): This method adds an object o to end of the arraylist.","employeeNameList.add('Amit')","This statement would add a string Amit in the ArrayList at last position.","add(int index, Object o): This adds the object o to the arraylist at the specified index.","employeeNameList.add(5,'Ankit')","It will add the string Ankit to the 5th index (6rd position as the array list starts with index 0) of ArrayList.","Object get(int index): It returns the object of list which is present at the specified index.","String str= employeeNameList.get(2);","It is used to get element from ArrayList and this is most used method. Here we are getting element from ArrayList and assigning it to String object","remove(Object o): Removes the object o from the ArrayList.","employeeNameList.remove('Arpit');","This code will remove the string “Arpit” from the ArrayList.","remove(int index): Removes element which is present at specified index","employeeNameList.remove(3);","It would remove the element of index 3 (4th element of the list as list always starts with 0).","set(int index, Object o): It is mainly used for updating an element. It replaces the element present at the specified index with the object o.","employeeNameList.set(2, 'Ankit');","It would replace element which is present at index 2(3rd element in arrayList)with the value Tom.","int indexOf(Object o): It is used to find index of object o. If object is not present, this method returns -1","int index = employeeNameList.indexOf('Ankit');","This would give the index (position) of the string Ankit in employeeNameList.","int size(): It gives the size of the ArrayList","int sizeOfArrayList = employeeNameList.size();","boolean contains(Object o): ","It checks whether the given object o is present in the ArrayList or not. If not present, it returns false","employeeNameList.contains('Amit');","It would return true if the string “Amit” is present in the list else it will return false","clear():","employeeNameList.clear()","It will remove all the object of ArrayList, so above statement will remove all String object from employeeNameList","addAll(Collection c)","If you want to merge two ArrayList, you can use this method.","Example:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.HashSet;","import java.util.LinkedHashSet;","import java.util.*;","public class JavaArrayListExampleMain {"," /*","* @author : Arpit Mandliya","*/"," public static void main(String[] args) {","ArrayList employeeNameList = new ArrayList();","employeeNameList.add('John');","employeeNameList.add('Ankit');","employeeNameList.add('Rohan');","employeeNameList.add('Amit');","ArrayList otherList = new ArrayList();","otherList.add('abc');","otherList.add('xyz');","// Adding otherList to employeeList","employeeNameList.addAll(otherList);","System.out.println('Employee list:');","for (String empName : employeeNameList) {","System.out.println(empName);","}"," }","}","When you run above program, you will get below output:","Employee list:","John","Ankit","Rohan","Amit","abc","xyz","removeAll(Collection c)","If you want to remove list of elements which is present in other list, you can use this method.","Example:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.HashSet;","import java.util.LinkedHashSet;","import java.util.*;","public class JavaArrayListExampleMain {"," /*","* @author : Arpit Mandliya","*/"," public static void main(String[] args) {","ArrayList employeeNameList = new ArrayList();","employeeNameList.add('John');","employeeNameList.add('Ankit');","employeeNameList.add('Rohan');","employeeNameList.add('Amit');","ArrayList otherList = new ArrayList();","otherList.add('John');","otherList.add('Rohan');","// removing otherList's element from ArrayList","employeeNameList.removeAll(otherList);","System.out.println('Employee list:');","for (String empName : employeeNameList) {","System.out.println(empName);","}"," }","}","When you run above program, you will get below output:","Employee list:","Ankit","Amit","retainAll(Collection)","If you want to retain only those elements which are present in Collection, you can use this method.","Example:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.HashSet;","import java.util.LinkedHashSet;","import java.util.*;","public class JavaArrayListExampleMain {"," /*","* @author : Arpit Mandliya","*/"," public static void main(String[] args) {","ArrayList employeeNameList = new ArrayList();","employeeNameList.add('John');","employeeNameList.add('Ankit');","employeeNameList.add('Rohan');","employeeNameList.add('Amit');","ArrayList otherList = new ArrayList();","otherList.add('John');","otherList.add('Rohan');","// removing otherList's element from ArrayList","employeeNameList.retainAll(otherList);","System.out.println('Employee list:');","for (String empName : employeeNameList) {","System.out.println(empName);","}"," }","}","When you run above program, you will get below output:","Employee list:","John","Rohan","That’s all about ArrayList in java."],
							"id": 31}, 
                        {"name": "LinkedHashSet in java",
							"book": ["In this post, we will see about LinkedHashSet in java. LinkedHashSet is same as HashSet except that it maintains insertion order.","Some points about LinkedHashSet","1) LinkedHashSet implements Set interface and extends HashSet class.","2) LinkedHashSet maintains insertion order, so when you will be able to access elements in the order they were inserted like ArrayList.","Example:","LinkedHashSetMain.java","package org.arpit.java2blog;","import java.util.LinkedHashSet;","public class LinkedHashSetMain {"," public static void main(String args[])"," {"," // LinkedHashSet with Country"," // LinkedHashSet maintains insertion order","LinkedHashSet&lt;String&gt; countryHashSet=new LinkedHashSet&lt;String&gt;();","countryHashSet.add('India');","countryHashSet.add('Japan');","countryHashSet.add('France');","countryHashSet.add('Russia');","countryHashSet.add('India');","countryHashSet.add('France');","countryHashSet.add('United Kingdom');","System.out.println('-----------------------------');","System.out.println('Iterating LinkedHashSet');","System.out.println('-----------------------------');","for (String country:countryHashSet) {","System.out.println(country);","}","System.out.println('-----------------------------');","}","}","When you run above program, you will get below output:","-----------------------------","Iterating LinkedHashSet","-----------------------------","India","Japan","France","Russia","United Kingdom","-----------------------------"],
							"id": 32}, 
                        {"name": "hashcode() and equals() method in java",
							"book": ["In this post ,we will try to understand hashcode() and equals() method in java.","Java HashMap:","1 HashMap in java","2 How HashMap works in java","3 hash and indexfor method in HashMap","4 hashcode and equals method in java","5 How to sort HashMap by keys and values","6 Difference between HashMap and HashSet","7 Difference between HashMap and Hashtable","8 How to iterate over HashMap","These methods can be found in the Object class and hence available to all java classes.Using these two methods, an object can be stored or retrieved from a Hashtable, HashMap or HashSet.","hashcode()","equals()","hashcode() and equals() method","hashcode():","You might know if you put entry in HashMap, first hashcode is calculated and this hashcode used to find bucket(index) where this entry will get stored in hashMap.You can read more at How hashMap works in java. What if you don’t override hashcode method, it willreturn integer representation of memory address.","equals():","You have to override equals method, when you want to define equality between two object. If you don’t override this method, it will check for reference equality(==) i.e. if tow reference refers to same object or not","Lets override default implemenation of hashcode() and equals():","You don’t have to always override these methods, but lets say you want to define equality of country object based on name, then you need to override equals method and if you are overriding equals method, you should override hashcode method too. Below example will make it clear.","Lets see with the help of example.We have a class called Country","1. Country.java","package org.arpit.java2blog;","public class Country {","String name;","long population;","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public long getPopulation() {","return population;","}","public void setPopulation(long population) {","this.population = population;","}","}","This country class have two basic attributes- name and population.","Now create a class called “EqualityCheckMain.java”","package org.arpit.java2blog;","public class EqualityCheckMain {","/**","* @author arpit mandliya","*/","public static void main(String[] args) {","Country india1=new Country();","india1.setName('India');","Country india2=new Country();","india2.setName('India');","System.out.println('Is india1 is equal to india2:' +india1.equals(india2));","}","}","When you run above program, you will get following output","Is india1 is equal to india2:false","In above program, we have created two different objects and set their name attribute to “india”.","Because both references india1 and india2 are pointing to different object, as default implementation of equals check for ==,equals method is returning false. In real life, it should have return true because no two countries can have same name.","Now lets override equals and return true if two country’s name are same.","Add this method to above country class:","@Override","public boolean equals(Object obj) {","if (this == obj)","return true;","if (obj == null)","return false;","if (getClass() != obj.getClass())","return false;","Country other = (Country) obj;","if (name == null) {","if (other.name != null)","return false;","} else if (!name.equals(other.name))","return false;","return true;","}","and now run EqualityCheckMain.java again","You will get following output:","Is india1 is equal to india2:true","Now this is because overriden equals method return true if two country have same name.","One thing to remember here, signature of equals method should be same as above.","Lets put this Country objects in hashmap:","Here we are going to use Country class object as key and its capital name(string) as value in HashMap.","package org.arpit.java2blog;","import java.util.HashMap;","import java.util.Iterator;","public class HashMapEqualityCheckMain {","/**","* @author Arpit Mandliya","*/","public static void main(String[] args) {","HashMap<Country,String> countryCapitalMap=new HashMap<Country,String>(); ","Country india1=new Country();","india1.setName('India');","Country india2=new Country();","india2.setName('India');","countryCapitalMap.put(india1, 'Delhi');","countryCapitalMap.put(india2, 'Delhi');","Iterator countryCapitalIter=countryCapitalMap.keySet().iterator();","while(countryCapitalIter.hasNext())","{","Country countryObj=countryCapitalIter.next();","String capital=countryCapitalMap.get(countryObj);","System.out.println('Capital of '+ countryObj.getName()+'----'+capital);","}","} ","}","When you run above program, you will see following output:","Capital of India----Delhi","Capital of India----Delhi","Now you must be wondering even through two objects are equal why HashMap contains two key value pair instead of one.This is because First HashMap uses hashcode to find bucket for that key object, if hashcodes are same then only it checks for equals method and because hashcode for above two country objects uses default hashcode method,Both will have different memory address hence different hashcode.","Now lets override hashcode method.Add following method to Country class","@Override","public int hashCode() {","final int prime = 31;","int result = 1;","result = prime * result + ((name == null) ? 0 : name.hashCode());","return result;","}","Now run HashMapEqualityCheckMain.java again","You will see following output:","Capital of India----Delhi","So now hashcode for above two objects india1 and india2 are same, so Both will be point to same bucket,now equals method will be used to compare them whichwill return true.","This is the reason java doc says “if you override equals() method then you must override hashCode() method”","hashcode() and equals() contracts:","equals():","The equals method implements an equivalence relation on non-null object references:","1 It is reflexive: for any non-null reference value x, x.equals(x) should return true.","2 It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.","3 It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.","4 It is consistent: for any non-null reference values x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified.","5 For any non-null reference value x, x.equals(null) should return false.","hashcode():","Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.","If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.","It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.","Key points to remember:","1 If you are overriding equals method then you should override hashcode() also.","3 If two objects are equal then they must have same hashcode.","4 If two objects have same hashcode then they may or may not be equal","5 Always use same attributes to generate equals and hashcode as in our case we have used name."],
							"id": 33}, 
                        {"name": "How HashMap works in java",
							"book": ["Most common interview questions are “How HashMap works in java“, “How get and put method of HashMap work internally”. Here I am trying to explain internal functionality with an easy example. HashMap is one of the most used Collections in java.Rather than going through theory, we will start with example first, so that you will get better understanding and then we will see how get and put function work in java.","Let’s take a very simple example. I have a Country class, we are going to use Country class object as key and its capital name(string) as value. Below example will help you to understand, how these key value pair will be stored in hashmap.","1. Country.java","package org.arpit.java2blog;","public class Country {","String name;","long population;","public Country(String name, long population) {","super();","this.name = name;","this.population = population;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public long getPopulation() {","return population;","}","public void setPopulation(long population) {","this.population = population;","}","// If length of name in country object is even then return 31(any random number) and if odd then return 95(any random number).","// This is not a good practice to generate hashcode as below method but I am doing so to give better and easy understanding of hashmap.","@Override","public int hashCode() {","if(this.name.length()%2==0)","return 31;","else ","return 95;","}","@Override","public boolean equals(Object obj) {","Country other = (Country) obj;","if (name.equalsIgnoreCase((other.name)))","return true;","return false;","}","}","If you want to understand more about hashcode and equals method of object, you may refer hashcode() and equals() method in java","2. HashMapStructure.java(main class)","import java.util.HashMap;","import java.util.Iterator;","public class HashMapStructure {","/**"," * @author Arpit Mandliya"," */","public static void main(String[] args) {","Country india=new Country('India',1000);","Country japan=new Country('Japan',10000);","Country france=new Country('France',2000);","Country russia=new Country('Russia',20000);","HashMap<Country, String> countryCapitalMap=new HashMap<Country,String>();","countryCapitalMap.put(india,'Delhi');","countryCapitalMap.put(japan,'Tokyo');","countryCapitalMap.put(france,'Paris');","countryCapitalMap.put(russia,'Moscow');","Iterator countryCapitalIter=countryCapitalMap.keySet().iterator();//put debug point at this line","while(countryCapitalIter.hasNext())","{","Country countryObj=countryCapitalIter.next();","String capital=countryCapitalMap.get(countryObj);","System.out.println(countryObj.getName()+'----'+capital);","}","}","}","Now put debug point at line 24 and right click on project->debug as-> java application. Program will stop execution at line 24 then right click on countryCapitalMap then select watch","Now From above diagram, you can observe the following points","1) There is an Entry[] array called table which has size 16.","2) This table stores Entry class’s object. HashMap class has an inner class called Entry. This Entry have key value as an instance variable. Let’s see structure of entry class Entry Structure.","static class Entry implements Map.Entry","{","final K key;","V value;","Entry next;","final int hash;","...//More code goes here","}","1) Whenever we try to put any key value pair in hashmap, Entry class object is instantiated for key value and that object will be stored in above mentioned Entry[](table). Now you must be wondering, where will above created Enrty object get stored(exact position in table). The answeris, hash code is calculated for a key by calling Hascode() method. This hashcode is used to calculate index for above Entry[] table.","2) Now, If you see at array index 10 in above diagram, It has an Entry object named HashMap$Entry.","3) We have put 4 key-values in hashmap but it seems to have only 2!!!! This is because if two objects have same hashcode, they will be stored at same index. Now the question arises how? It stores objects in the form of LinkedList(logically).","So how hashcode of above country key-value pairs are calculated.","Hashcode for Japan = 95 as its length is odd.","Hashcode for India =95 as its length is odd","HashCode for Russia=31 as its length is even.","HashCode for France=31 as its length is even.","So now if you have good understanding of hashmap structure,Lets go through put and get method.","Put","Let’s see the implementation of put method:","/**"," * Associates the specified value with the specified key in this map. If the"," * map previously contained a mapping for the key, the old value is"," * replaced."," *"," * @param key"," *key with which the specified value is to be associated"," * @param value"," *value to be associated with the specified key"," * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>"," * if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return"," * can also indicate that the map previously associated"," * <tt>null</tt> with <tt>key</tt>.)"," */","public V put(K key, V value) {","if (key == null)","return putForNullKey(value);","int hash = hash(key.hashCode());","int i = indexFor(hash, table.length);","for (Entry e = table[i]; e != null; e = e.next) {","Object k;","if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {","V oldValue = e.value;","e.value = value;","e.recordAccess(this);","return oldValue;","}","}","modCount++;","addEntry(hash, key, value, i);","return null;","}","now lets understand above code step by step","1) Key object is checked for null. If key is null then it will be stored at table[0] because hashcode for null is always 0.","2) Key object’s hashcode() method is called and hash code is calculated. This hashcode is used to find index of array for storing Entry object. It may happen sometimes that, this hashcode function is poorly written so JDK designer has put another function called hash() which takes above-calculated hash value as argument. If you want to learn more about hash() function, you can refer hash and indexFor method in hashmap.","3) indexFor(hash,table.length)is used to calculate exact index in table array for storing the Entry object.","4) As we have seen in our example, if two key objects have same hashcode(which is known as collision) then it will be stored in form of linkedlist.So here, we will iterate through our linkedlist.","If there is no element present at that index which we have just calculated then it will directly put our Entry object at that index.","If There is element present at that index then it will iterate until it gets Entry->next as null.","What if we are putting same key again, logically it should replace old value. Yes, it will do that. While iterating it will check key equality by calling equals() method(key.equals(k)), if this method returns true then it replaces value object with current Entry’s value object.","If it did not find the duplicate key, then current Entry object will become first node in linkedlist and current Entry -> next will become an existing first node on that index.","Get"," Lets see implementation of get now:"," /**"," * Returns the value to which the specified key is mapped, or {@code null}"," * if this map contains no mapping for the key."," *"," *"," * More formally, if this map contains a mapping from a key {@code k} to a"," * value {@code v} such that {@code (key==null ? k==null :"," * key.equals(k))}, then this method returns {@code v}; otherwise it returns"," * {@code null}. (There can be at most one such mapping.)"," *"," *"," * A return value of {@code null} does not <i>necessarily</i> indicate that"," * the map contains no mapping for the key; it's also possible that the map"," * explicitly maps the key to {@code null}. The {@link #containsKey"," * containsKey} operation may be used to distinguish these two cases."," *"," * @see #put(Object, Object)"," */","public V get(Object key) {","if (key == null)","return getForNullKey();","int hash = hash(key.hashCode());","for (Entry e = table[indexFor(hash, table.length)]; e != null; e = e.next) {","Object k;","if (e.hash == hash && ((k = e.key) == key || key.equals(k)))","return e.value;","}","return null;","}","As you got the understanding on put functionality of hashmap. So to understand get functionality is quite simple. If you pass any key to get value object from hashmap.","1) Key object is checked for null. If key is null then value of Object resides at table[0] will be returned.","2) Key object’s hashcode() method is called and hash code is calculated.","3) indexFor(hash,table.length)is used to calculate exact index in table array using generated hashcode for getting the Entry object.","4) After getting index in table array, it will iterate through linkedlist and check for key equality by calling equals() method and if it returns true then it returns the value of Entry object else returns null.","Key points to Remeber:","HashMap has a inner class called Entry which stores key-value pairs.","Above Entry object is stored in Entry[ ](Array) called table","An index of table is logically known as bucket and it stores first element of linkedlist","Key object’s hashcode() is used to find bucket of that Entry object.","If two key object ‘s have same hashcode , they will go in same bucket of table array.","Key object ‘s equals() method is used to ensure uniqueness of key object.","Value object‘s equals() and hashcode() method is not used at all"],
							"id": 34}, 
                        {"name": "How HashSet works in java",
							"book": ["This is one of the frequently asked question in core java interview so in this post, we will see how HashSet works in java.We have already seen How hashMap works in java and also difference between HashMap and HashSet.","Lets first see introduction of Hashset then we will go through internals of it.","HashSet:","HashSet implements Set interface which does not allow duplicate value.It is not synchronized and is not thread safe.","Definition of duplicate can be quite tricky sometimes.Lets consider two cases here.","1) In case of primitive types(such as interger, String)","2) In case of custom defined objects.","In case of primitive types:","In case of primitives type, it is very straight forward.Lets see with help of example:","Lets create a java program:","package org.arpit.java2blog;","import java.util.HashSet;","public class HashSetMain {"," public static void main(String[] args) {","HashSet nameSet=new HashSet();","nameSet.add('Arpit');","nameSet.add('Arpit');","nameSet.add('john');","System.out.println('size of nameSet='+nameSet.size());","System.out.println(nameSet);"," }","}","When you run above program, you will get following output:","size of nameSet=2","[Arpit, john]","So we tried to add String “Arpit” twice, but as HashSet does not allow duplicate value, it will add “Arpit” once in HashSet","In case of Custom Objects:","For understanding how HashSet will work in case of custom objects, you need to understand hashcode and equals method in java.Lets create a class called Country and implement only equals method in it.","package org.arpit.java2blog;","public class Country {"," String name;"," long population;"," public String getName() {","return name;","}"," public void setName(String name){","this.name = name;"," }"," public long getPopulation() {","return population;"," }"," public void setPopulation(long population) {","this.population = population;"," }"," public String toString()"," {","return name;"," }"," @Override"," public boolean equals(Object obj) {","if (this == obj)","return true;","if (obj == null)","return false;","if (getClass() != obj.getClass())","return false;","Country other = (Country) obj;","if (name == null) {","if (other.name != null)","return false;","} else if (!name.equals(other.name))","return false;","return true;"," }","}","create main class:","package org.arpit.java2blog;","import java.util.HashSet;","public class HashSetCountryMain {"," public static void main(String[] args)"," {","HashSet countrySet=new HashSet();","Country india1=new Country();","india1.setName('India');","Country india2=new Country();","india2.setName('India');","countrySet.add(india1);","countrySet.add(india2);","System.out.println('size of nameSet='+countrySet.size());","System.out.println(countrySet);"," }","}","When you run above program, you will get following output:","size of nameSet=2","[India, India]","Now you must be wondering even through two objects are equal why HashSet contains two values instead of one.This is because First HashSet calculates hashcode for that key object, if hashcodes are same then only it checks for equals method and because hashcode for above two country objects uses default hashcode method,Both will have different memory address hence different hashcode.","Now lets add hashcode method in above Country class","@Override"," public int hashCode() {","final int prime = 31;","int result = 1;","result = prime * result + ((name == null) ? 0 : name.hashCode());","return result;"," }","Run above main program again, you will get following output:","size of nameSet=1","[India]","So now we have good understanding of HashSet, lets see its internal representation:","Internal working of HashSet:","When you add any duplicate element to HashSet, add() method returns false and do not add duplicate element to HashSet.","How add method return false? For this, we need to see HashSet’s add method in JavaAPI","public class HashSet","extends AbstractSet","implements Set, Cloneable, java.io.Serializable","{","private transient HashMap<E,Object> map;","// PRESENT is dummy value which will be used as value in map","private static final Object PRESENT = new Object();","/**"," * Constructs a empty map.so hash"," * "," */","public HashSet() {"," map = new HashMap<E,Object>();","}","// return false if e is already present in HashSet","public boolean add(E e) {"," return map.put(e, PRESENT)==null;","}","// other HashSet methods","}","So from above code, It is clear that HashSet uses HashMap for checking duplicate elements.As we know that in HashMap , key should be unique. So HashSet uses this concept, When element is added to HashSet, it is added to internal HashMap as Key.This HashMap required some value so a dummy Object(PRESENT) is used as value in this HashMap.","PRESENT is dummy value which is used value for internal map.","Lets see add method:","// return false if e is already present in HashSet","public boolean add(E e) {"," return map.put(e, PRESENT)==null;","}","So here there will be two cases","map.put(e,PRESENT) will return null, if element not present in that map. So map.put(e, PRESENT) == null will return true ,hence add method will return true and element will be added in HashSet.","map.put(e,PRESENT) will return old value ,if element is already present in that map. Somap.put(e, PRESENT) == null will return false, hence add method will return false and element will not be added in HashSet.","Now you may also read difference between HashMap and HashSet in java."],
							"id": 35}, 
                        {"name": "Comparable in java",
							"book": ["In this post, we will seehow you can use comparable to sort list of objects in java.","Comparable interface:","Class whose objects to be sorted must implement this interface.In this,we have to implement compareTo(Object) method.","For example:","public class Country implements Comparable{","@Override","public int compareTo(Country country) {","return (this.countryId < country.countryId ) ? -1: (this.countryId > country.countryId ) ? 1:0 ;","}}","If any class implements comparable inteface then collection of that object can be sorted automatically using Collection.sort() or Arrays.sort().Object will be sort on the basis of compareTo method in that class.","Objects which implement Comparable in java can be used as keys in a SortedMap like TreeMap or SortedSet like TreeSet without implementing any other interface.","Sorting logic must be in same class whose objects are being sorted. Hence this is called natural ordering of objects","Java code:","For Comparable:","We will create class country having attribute id and name.This class will implement Comparable interface and implement CompareTo method to sort collection of country object by id.","1. Country.java ","package org.arpit.java2blog;","//If this.cuntryId < country.countryId:then compare method will return -1","//If this.countryId > country.countryId:then compare method will return 1","//If this.countryId==country.countryId:then compare method will return 0","public class Country implements Comparable{","int countryId;","String countryName;","public Country(int countryId, String countryName) {","super();","this.countryId = countryId;","this.countryName = countryName;","}","@Override","public int compareTo(Country country) {","return (this.countryId < country.countryId ) ? -1: (this.countryId > country.countryId ) ? 1:0 ;","}","public int getCountryId() {","return countryId;","}","public void setCountryId(int countryId) {","this.countryId = countryId;","}","public String getCountryName() {","return countryName;","}","public void setCountryName(String countryName) {","this.countryName = countryName;","}","}","2.ComparableMain.java","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.Collections;","import java.util.List;","public class ComparableMain {","/**"," * @author Arpit Mandliya"," */","public static void main(String[] args) {","Country indiaCountry=new Country(1, 'India');","Country chinaCountry=new Country(4, 'China');","Country nepalCountry=new Country(3, 'Nepal');","Country bhutanCountry=new Country(2, 'Bhutan');","List listOfCountries = new ArrayList();","listOfCountries.add(indiaCountry);","listOfCountries.add(chinaCountry);","listOfCountries.add(nepalCountry);","listOfCountries.add(bhutanCountry);","System.out.println('Before Sort: ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'||'+'Country name: '+country.getCountryName());","}","Collections.sort(listOfCountries);","System.out.println('After Sort: ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'|| '+'Country name: '+country.getCountryName());","}","}","}","Output:","Before Sort: ","Country Id: 1||Country name: India","Country Id: 4||Country name: China","Country Id: 3||Country name: Nepal","Country Id: 2||Country name: Bhutan","After Sort: ","Country Id: 1|| Country name: India","Country Id: 2|| Country name: Bhutan","Country Id: 3|| Country name: Nepal","Country Id: 4|| Country name: China"],
							"id": 36}, 
                        {"name": "Comparator in java",
							"book": ["In this post, we will see how you can use comparator to sort list of objects in java.","Comparator:","When you want to sort the list of objects of a class,you can use Comparator interface. You don’t need to implement Comparator on the class whose objects need to be sorted. You can create a separate class and implement a Comparator interface as below.","For example:","package com.arpit.java2blog;","import java.util.Comparator;","public class EmployeeSortByIdComparator implements Comparator{","@Override","public int compare(Employee e1, Employee e2) {","return e1.getEmpId()-e2.getEmpId();","}","}","You can use different sorting logic based on different attributes of object that needs to be sorted.","For example:","Let’s say you want to sort list of employees by name,you can use below ocde to do that.","Employee e1= new Employee(4, 'John', 20);","Employee e2= new Employee(3, 'Martin', 40);","Employee e3= new Employee(1, 'Mary', 28);","Employee e4= new Employee(2, 'Andrew', 35);","List<Employee> listofEmployees=new ArrayList<>();","listofEmployees.add(e1);","listofEmployees.add(e2);","listofEmployees.add(e3);","listofEmployees.add(e4);","System.out.println('Before Sorting by name: ');","for (Employee e:listofEmployees) {","System.out.println('Employee Id: '+e.getEmpId()+'|| name: '+e.getName());","}","Collections.sort(listofEmployees,new Comparator<Employee>() {","@Override","public int compare(Employee o1, Employee o2) {","return o1.getName().compareTo(o2.getName());","}","});","System.out.println('After Sorting by name: ');","for (Employee e:listofEmployees) {","System.out.println('Employee Id: '+e.getEmpId()+'|| name: '+e.getName());","}","Java code for Comparator:","Create a class named Employee.java which will have empId, name and age.","1.Employee.java","package com.arpit.java2blog;","public class Employee {","private int empId;","private String name;","private int age;","public Employee(int empId, String name, int age) {","super();","this.empId = empId;","this.name = name;","this.age = age;","}","public int getEmpId() {","return empId;","}","public void setEmpId(int empId) {","this.empId = empId;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public int getAge() {","return age;","}","public void setAge(int age) {","this.age = age;","}","}","Create a class named “EmployeeSortByIdComparator”. This class will have logic to sort list of Employees by empId.","2.EmployeeSortByIdComparator.java","package com.arpit.java2blog;","import java.util.Comparator;","public class EmployeeSortByIdComparator implements Comparator{","@Override","public int compare(Employee e1, Employee e2) {","return e1.getEmpId()-e2.getEmpId();","}","}","Let’s create main class which will have logic to create a list of objects and sort it based on empId.","3.EmployeeComparatorMain.java","package com.arpit.java2blog;","import java.util.ArrayList;","import java.util.Collections;","import java.util.List;","public class EmployeeComparatorMain {","public static void main(String[] args) {","Employee e1= new Employee(4, 'John', 20);","Employee e2= new Employee(3, 'Martin', 40);","Employee e3= new Employee(1, 'Mary', 28);","Employee e4= new Employee(2, 'Andrew', 35);","List<Employee> listofEmployees=new ArrayList<>>();","listofEmployees.add(e1);","listofEmployees.add(e2);","listofEmployees.add(e3);","listofEmployees.add(e4);","System.out.println('Before Sorting by empId: ');","for (Employee e:listofEmployees) {","System.out.println('Employee Id: '+e.getEmpId()+'|| name: '+e.getName());","}","Collections.sort(listofEmployees,new EmployeeSortByIdComparator());","System.out.println('After Sorting by empId: ');","for (Employee e:listofEmployees) {","System.out.println('Employee Id: '+e.getEmpId()+'|| name: '+e.getName());","}","}","}","Output:","Before Sorting by empId: ","Employee Id: 4|| name: John","Employee Id: 3|| name: Martin","Employee Id: 1|| name: Mary","Employee Id: 2|| name: Andrew","After Sorting by empId: ","Employee Id: 1|| name: Mary","Employee Id: 2|| name: Andrew","Employee Id: 3|| name: Martin","Employee Id: 4|| name: John","Anonymous Comparator:","One of advantage of Comparator over comparable is you can create anonymous comparator i.e you don’t need to implement Comparable interface to class whose objects need to be sorted.","Let’s understand more with help of example:","We will use an anonymous class to sort the list of Employees by name.","ComparatorMain.java","package com.arpit.java2blog;","import java.util.ArrayList;","import java.util.Collections;","import java.util.Comparator;","import java.util.List;","public class EmployeeComparatorMain {","public static void main(String[] args) {","Employee e1= new Employee(4, 'John', 20);","Employee e2= new Employee(3, 'Martin', 40);","Employee e3= new Employee(1, 'Mary', 28);","Employee e4= new Employee(2, 'Andrew', 35);","List<Employee> listofEmployees=new ArrayList<>>();","listofEmployees.add(e1);","listofEmployees.add(e2);","listofEmployees.add(e3);","listofEmployees.add(e4);","System.out.println('Before Sorting by name: ');","for (Employee e:listofEmployees) {","System.out.println('Employee Id: '+e.getEmpId()+'|| name: '+e.getName());","}","Collections.sort(listofEmployees,new Comparator<Employee>() {","@Override","public int compare(Employee o1, Employee o2) {","return o1.getName().compareTo(o2.getName());","}","});","System.out.println('After Sorting by name: ');","for (Employee e:listofEmployees) {","System.out.println('Employee Id: '+e.getEmpId()+'|| name: '+e.getName());","}","}","}","Output:","Before Sorting by name: ","Employee Id: 4|| name: John","Employee Id: 3|| name: Martin","Employee Id: 1|| name: Mary","Employee Id: 2|| name: Andrew","After Sorting by name: ","Employee Id: 2|| name: Andrew","Employee Id: 4|| name: John","Employee Id: 3|| name: Martin","Employee Id: 1|| name: Mary","As you can see here, we used an anonymous comparator to sort the list of employees by name. We did not create comparator specific class here.","that’s all about Comparator in Java."],
							"id": 37}, 
                        {"name": "Difference between Comparator and Comparable in java",
							"book": ["One of the common interview question is “What are differences between Comparator and Comparable”. or “How will you sort collection of employee objects by its id or name”.For that we can use two interfaces.i.e. Comparator and Comparable.Before we actually see differences,let me give you brief introduction of both.","Comparable interface:","Class whose objects to be sorted must implement this interface.In this,we have to implement compareTo(Object) method.","For example:","public class Country implements Comparable{","@Override","public int compareTo(Country country) {","return (this.countryId < country.countryId ) ? -1: (this.countryId > country.countryId ) ? 1:0 ;","}}","If any class implements comparable inteface then collection of that object can be sorted automatically using Collection.sort() or Arrays.sort().Object will be sort on the basis of compareTo method in that class.","Objects which implement Comparable in java can be used as keys in a SortedMap like TreeMap or SortedSet like TreeSet without implementing any other interface.","Comparator interface:","Class whose objects to be sorted do not need to implement this interface.Some third class can implement this interface to sort.e.g.CountrySortByIdComparator class can implement Comparator interface to sort collection of country object by id. For example:","public class CountrySortByIdComparator implements Comparator{","@Override","public int compare(Country country1, Country country2) {","return (country1.getCountryId() < country2.getCountryId() ) ? -1: (country1.getCountryId() > country2.getCountryId() ) ? 1:0 ;","}","}","Using Comparator interface,we can write different sorting based on different attributes of objects to be sorted.You can use anonymous comparator to compare at particular line of code. For example:","Country indiaCountry=new Country(1, 'India');","Country russiaCountry=new Country(4, 'Russia');","Country englandCountry=new Country(3, 'England');","Country germanyCountry=new Country(2, 'Germany');","List listOfCountries = new ArrayList();","listOfCountries.add(indiaCountry);","listOfCountries.add(russiaCountry);","listOfCountries.add(englandCountry);","listOfCountries.add(germanyCountry); "," //Sort by countryName","Collections.sort(listOfCountries,new Comparator() {","@Override","public int compare(Country o1, Country o2) {","return o1.getCountryName().compareTo(o2.getCountryName());","}","});","Java code:","For Comparable:","We will create class country having attribute id and name.This class will implement Comparable interface and implement CompareTo method to sort collection of country object by id.","1. Country.java ","package org.arpit.javapostsforlearning;","//If this.cuntryId < country.countryId:then compare method will return -1 //If this.countryId > country.countryId:then compare method will return 1","//If this.countryId==country.countryId:then compare method will return 0","public class Country implements Comparable{","int countryId;","String countryName;","public Country(int countryId, String countryName) {","super();","this.countryId = countryId;","this.countryName = countryName;","}","@Override","public int compareTo(Country country) {","return (this.countryId < country.countryId ) ? -1: (this.countryId > country.countryId ) ? 1:0 ;","}","public int getCountryId() {","return countryId;","}","public void setCountryId(int countryId) {","this.countryId = countryId;","}","public String getCountryName() {","return countryName;","}","public void setCountryName(String countryName) {","this.countryName = countryName;","}","}","2.ComparableMain.java","package org.arpit.javapostsforlearning;","import java.util.ArrayList;","import java.util.Collections;","import java.util.List;","public class ComparableMain {","/**"," * @author Arpit Mandliya"," */","public static void main(String[] args) {","Country indiaCountry=new Country(1, 'India');","Country russiaCountry=new Country(4, 'Russia');","Country englandCountry=new Country(3, 'England');","Country germanyCountry=new Country(2, 'Germany');","List listOfCountries = new ArrayList();","listOfCountries.add(indiaCountry);","listOfCountries.add(russiaCountry);","listOfCountries.add(englandCountry);","listOfCountries.add(germanyCountry);","System.out.println('Before Sort: ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'||'+'Country name: '+country.getCountryName());","}","Collections.sort(listOfCountries);","System.out.println('After Sort: ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'|| '+'Country name: '+country.getCountryName());","}","}","}","Output:","Before Sort: ","Country Id: 1||Country name: India","Country Id: 4||Country name: Russia","Country Id: 3||Country name: England","Country Id: 2||Country name: Germany","After Sort: ","Country Id: 1|| Country name: India","Country Id: 2|| Country name: Germany","Country Id: 3|| Country name: England","Country Id: 4|| Country name: Russia","For Comparator:","We will create class country having attribute id and name and will create another class CountrySortByIdComparator which will implement Comparator interface and implement compare method to sort collection of country object by id and we will also see how to use anonymous comparator.","1.Country.java","package org.arpit.javapostsforlearning;","public class Country{","int countryId;","String countryName;","public Country(int countryId, String countryName) {","super();","this.countryId = countryId;","this.countryName = countryName;","}","public int getCountryId() {","return countryId;","}","public void setCountryId(int countryId) {","this.countryId = countryId;","}","public String getCountryName() {","return countryName;","}","public void setCountryName(String countryName) {","this.countryName = countryName;","}","}","2.CountrySortbyIdComparator.java","package org.arpit.javapostsforlearning;","import java.util.Comparator;","//If country1.getCountryId()<country2.getCountryId():then compare method will return -1 //If country1.getCountryId()>country2.getCountryId():then compare method will return 1","//If country1.getCountryId()==country2.getCountryId():then compare method will return 0"," public class CountrySortByIdComparator implements Comparator{","@Override","public int compare(Country country1, Country country2) {","return (country1.getCountryId() < country2.getCountryId() ) ? -1: (country1.getCountryId() > country2.getCountryId() ) ? 1:0 ;","}","}","3.ComparatorMain.java","package org.arpit.javapostsforlearning;","import java.util.ArrayList;","import java.util.Collections;","import java.util.Comparator;","import java.util.List;","public class ComparatorMain {","/**"," * @author Arpit Mandliya"," */","public static void main(String[] args) {","Country indiaCountry=new Country(1, 'India');","Country russiaCountry=new Country(4, 'Russia');","Country englandCountry=new Country(3, 'England');","Country germanyCountry=new Country(2, 'Germany');","List listOfCountries = new ArrayList();","listOfCountries.add(indiaCountry);","listOfCountries.add(russiaCountry);","listOfCountries.add(englandCountry);","listOfCountries.add(germanyCountry);","System.out.println('Before Sort by id : ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'||'+'Country name: '+country.getCountryName());","}","Collections.sort(listOfCountries,new CountrySortByIdComparator());","System.out.println('After Sort by id: ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'|| '+'Country name: '+country.getCountryName());","}","//Sort by countryName","Collections.sort(listOfCountries,new Comparator() {","@Override","public int compare(Country o1, Country o2) {","return o1.getCountryName().compareTo(o2.getCountryName());","}","});","System.out.println('After Sort by name: ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'|| '+'Country name: '+country.getCountryName());","}","}","}","Output:","Before Sort by id : ","Country Id: 1||Country name: India","Country Id: 4||Country name: Russia","Country Id: 3||Country name: England","Country Id: 2||Country name: Germany","After Sort by id: ","Country Id: 1|| Country name: India","Country Id: 2|| Country name: Germany","Country Id: 3|| Country name: England","Country Id: 4|| Country name: Russia","After Sort by name: ","Country Id: 2|| Country name: England","Country Id: 4|| Country name: Germany","Country Id: 1|| Country name: India","Country Id: 3|| Country name: Russia"],
							"id": 38}, 
                        {"name": "How to iterate a list in java",
							"book": ["In this post, we will see howcan we iterate a list in java. There are four ways of iterating over a list.","1) For loop","2) For each loop(Java 5)","2) While loop","3) Iterator","Below example will help you to understand, how to iterate list in java. I am taking custom object list to understand better","1. Country.java","package org.arpit.java2blog;","public class Country {","String name;","long population;","public Country(String name, long population) {","super();","this.name = name;","this.population = population;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public long getPopulation() {","return population;","}","public void setPopulation(long population) {","this.population = population;","} ","}","2. IterateListMain.java","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.Iterator;","public class IterateListMain {","/**"," * @author Arpit Mandliya"," */","public static void main(String[] args) {","Country india=new Country('India',1000);","Country japan=new Country('Japan',10000);","Country france=new Country('France',2000);","Country russia=new Country('Russia',20000);","// We are going to iterate on this list and will print ","//name of the country ","ArrayList countryLists=new ArrayList();","countryLists.add(india);","countryLists.add(japan);","countryLists.add(france);","countryLists.add(russia);","// For loop","System.out.println('Iterating using for loop : ');","for (int i = 0; i < countryLists.size(); i++) {","Country countryObj=countryLists.get(i);","System.out.println(countryObj.getName());","}","System.out.println('-----------------------------');","// For each loop","System.out.println('Iterating using for each loop : ');","for (Country countryObj:countryLists) {","System.out.println(countryObj.getName());","}","System.out.println('-----------------------------');","// While loop","System.out.println('Iterating using while loop : ');","int i=0;","while(i<countryLists.size())","{","Country countryObj=countryLists.get(i);","System.out.println(countryObj.getName());","i++;","}","System.out.println('-----------------------------');","// Iterator","System.out.println('Iterating using iterator : ');","Iterator iteratorCountryLists= countryLists.iterator();","while(iteratorCountryLists.hasNext())","{","System.out.println(iteratorCountryLists.next().getName());","}","}","}","Run it and you will get following output:","Iterating using for loop : ","India","Japan","France","Russia","-----------------------------","Iterating using for each loop : ","India","Japan","France","Russia","-----------------------------","Iterating using while loop : ","India","Japan","France","Russia","-----------------------------","Iterating using iterator : ","India","Japan","France","Russia"],
							"id": 39}, 
                        {"name": "How to remove duplicates from ArrayList in java",
							"book": ["In this post, we will see how to remove duplicate elements from ArrayList in java.","There are many ways to do it. Some of them are:","1) Using iterative approach","2) Using HashSet (but does not maintain insertion order)","3) Using LinkedHashMap","Program:","package org.arpit.java2blog.algo;","import java.util.ArrayList;","import java.util.HashSet;","import java.util.LinkedHashSet;","import java.util.*;","public class RemoveDuplicatesArrayListMain {","/*"," * @author : Arpit Mandliya"," */","public static void main(String[] args) {","ArrayList employeeNameList = new ArrayList();","employeeNameList.add('John');","employeeNameList.add('Ankit');","employeeNameList.add('Rohan');","employeeNameList.add('John');","employeeNameList.add('Amit');","employeeNameList.add('Ankit');","System.out.println('Removing duplicates from list:');","// Using iterative approach","ArrayList uniqueElements = new ArrayList();","for (String empName : employeeNameList) {","if (!uniqueElements.contains(empName)) {","uniqueElements.add(empName);","}","}","System.out.println('Using iterative approach:');","for (String uniqElem : uniqueElements) {","System.out.println(uniqElem);","}","System.out.println('*******************************');","System.out.println('Using HashSet :');","// using HashSet but does not maintain order","uniqueElements = new ArrayList(new HashSet(","employeeNameList));","for (String uniqElem : uniqueElements) {","System.out.println(uniqElem);","}","System.out.println('*******************************');","System.out.println('Using LinkedHashSet :');","// using LinkedHashSet maintaining order","uniqueElements = new ArrayList(new LinkedHashSet(","employeeNameList));","for (String uniqElem : uniqueElements) {","System.out.println(uniqElem);","}","}","}","When you run above program, you will get following output:","Removing duplicates from list:","Using iterative approach:","John","Ankit","Rohan","Amit","*******************************","Using HashSet :","Rohan","Ankit","Amit","John","*******************************","Using LinkedHashSet :","John","Ankit","Rohan","Amit"],
							"id": 40}, 
                        {"name": "How to iterate over Map or HashMap in java",
							"book": ["In this post, we will see howcan we iterate a map in java. There are four ways of iterating over a map, HashMap or TreeMap.","1) Using keyset() and for each loop(Java 5)","2) Using keyset() and java Iterator","3) Using EntrySet() and for each loop(Java 5)","4) Using EntrySet() and java Iterator","if you remove elements while iterating , then 1st and 3rd optionwill throw java.util.ConcurrentModificationException.","If you understand internal working of HashMap, then it may be easier for you to iterate an HashMap","Lets take an example:","1. IterateMapMain.java ","package org.arpit.java2blog;","import java.util.HashMap;","import java.util.Iterator;","import java.util.Map.Entry;","public class IterateMapMain {","public static void main(String args[])","{","// HashMap with Country as key and capital as value","HashMap<String,String> countryCapitalMap=new HashMap<String,String>();","countryCapitalMap.put('India','Delhi');","countryCapitalMap.put('Japan','Tokyo');","countryCapitalMap.put('France','Paris');","countryCapitalMap.put('Russia','Moscow');","// Iterating Using keySet() and for each loop","System.out.println('Iterating Using keySet() and for each loop');","for (String countryKey:countryCapitalMap.keySet()) {","System.out.println('Country:'+ countryKey +' andCapital:'+countryCapitalMap.get(countryKey));","}","System.out.println('-----------------------------');","// Iterating Using keySet() and java iterator","System.out.println('Iterating Using keySet() and java Iterator');","Iterator countryKeySetIterator=countryCapitalMap.keySet().iterator();","while(countryKeySetIterator.hasNext()){","String countryKey=countryKeySetIterator.next();","System.out.println('Country:'+ countryKey +' and Capital:'+countryCapitalMap.get(countryKey));","}","System.out.println('-----------------------------');","// Iterating Using entrySet() and for each loop","System.out.println('Iterating Using entrySet() and for each loop');","for (Entry<String,String> entry:countryCapitalMap.entrySet()) {","System.out.println('Country:'+ entry.getKey() +' andCapital:'+entry.getValue());","}","System.out.println('-----------------------------');","// Iterating Using entrySet() and java iterator","System.out.println('Iterating Using entrySet() and and java Iterator');","Iterator<Entry<String,String>> entryIterator=countryCapitalMap.entrySet().iterator();","while(entryIterator.hasNext())","{","Entry<String,String> entry=entryIterator.next();","System.out.println('Country:'+ entry.getKey() +' andCapital:'+entry.getValue());","}","System.out.println('-----------------------------');","}","}","Run it and you will get following output:","Iterating Using keySet() and for each loop","Country:France andCapital:Paris","Country:Russia andCapital:Moscow","Country:Japan andCapital:Tokyo","Country:India andCapital:Delhi","-----------------------------","Iterating Using keySet() and java Iterator","Country:France and Capital:Paris","Country:Russia and Capital:Moscow","Country:Japan and Capital:Tokyo","Country:India and Capital:Delhi","-----------------------------","Iterating Using entrySet() and for each loop","Country:France andCapital:Paris","Country:Russia andCapital:Moscow","Country:Japan andCapital:Tokyo","Country:India andCapital:Delhi","-----------------------------","Iterating Using entrySet() and and java Iterator","Country:France andCapital:Paris","Country:Russia andCapital:Moscow","Country:Japan andCapital:Tokyo","Country:India andCapital:Delhi","-----------------------------"],
							"id": 41}, 
                        {"name": "Difference between ArrayList and Vector in java",
							"book":["One of the common interview question is “What is difference between ArrayList and Vector”.Before we actually see differences,let me give you brief introduction of both.","ArrayList","1) ArrayList is implementation of list interface.","2) ArrayList is not synchonized(so not thread safe)","3) ArrayList is implemented using array as internal data structure.It can be dynamically resized .","4) ArrayList increases half of its size when its size is increased.","Vector","1) Vector is implementation of list interface.","2) Vector is synchonized(so thread safe)","3) Vector is implemented using array as internal data structure.It can be dynamically resized.","4) Vector doubles size of array when its size is increased.","Which is better? ArrayList or Vector?","It actually depends on our need.Vector is slower than ArrayList as its methods are synchronized so if we don’t work in multi threaded environment then ArrayList is better choice.","Best Practice:","When we initialize ArrayList or Vector,always initialize with largest capacity java program will need as incrementing size is costlier operation.","Can we synchronize ArrayList?","Yes,ArrayList can also be synchonized with help of method Collections.synchronizedList(arraylist)","List synchronizedArrayList=Collections.synchronizedList(arraylist);"],
							"id": 42}, 
                        {"name": "Difference between HashMap and HashSet in java",
							"book": ["One of the common interview question is “What is difference between HashMap and HashSet”..Before we actually see differences,let me give you brief introduction of both.","HashMap","HashMap implements Map interface which maps key to value.It is not synchronized and is not thread safe.Duplicate keys are not allowed and null keys as well as values are allowed. For more details, you can also read How HashMap works in java.","HashMap<Interger,String> employeeHashmap=new HashMap<Integer,String>();","employeeHashmap.put(1,'Arpit');","employeeHashmap.put(2,'John');","HashSet","HashSet implements Set interface which does not allow duplicate value.It is not synchronized and is not thread safe.For more details, you can also read How HashSet works in java.","HashSet employeeSet=new HashSet();","employeeSet.add('Arpit');","employeeSet.add('Arpit');","employeeSet.add('john');","Above employeeSet will have 2 elements in it as Set does not allow duplicate values.","add method is used to add element to HashSet.If It return true then element is added successfully but if it return false then you are trying to insert duplicate value.","public boolean add(Object o)","One main thing about HashSet is objects which we are going to add in HashSet must implement Hashcode() and equals() method so that we can check for duplicate values.If we are adding custom objects to HashSet then we must override() Hashcode() and equals() method according to our need.If we do not override then object will take default implementation which may not desirable."],
							"id": 43}, 
                        {"name": "Difference between Hashtable and HashMap in java",
							"book": ["One of the common interview question is “What are differences between Hashtable and HashMap”.When I started using them,I used any of them irrespective of their differences.Afterwards i found noticeable differences between them which can affect your performance of application. .Before we actually see differences,let me give you brief introduction of both.","HashMap","HashMap implements Map interface which maps key to value.It is not synchronized and is not thread safe.Duplicate keys are not allowed and null keys as well as value are allowed.","HashMap<Interger,String> employeeHashmap=new HashMap<Integer,String>();","employeeHashmap.put(1,'Arpit');","employeeHashmap.put(2,null);// will work fine","Hashtable","Hashtable implements Map interface which maps key to value.It is synchronized and thread safe.Duplicate keys are not allowed and null key is not allowed.","Hashtable<Interger,String> employeeHashmap=new Hashtable<Integer,String>();","employeeHashmap.put(1,'Arpit');","employeeHashmap.put(2,null);","Some important points need to be discussed.","Synchonized meaning only one thread can modify one tableat one point of time.When any thread perform update operation on hashtable then it acquires lock on it and other threads have to wait for lock to be released.","Fail-fast iterator means if one thread is iterating over hashmap and other thread trying to modify hashmap structurally it will throw ConcurrentModification Exception and fail immediately.Structurally modification means inserting or deleting elements that can change structure of map.","Can we synchronize HashMap?","Yes,We can synchonized a HashMap also with the help of Collections.synchonizedMap(hashmap) so HashMap can be synchronized by","Map map=Collections.synchonizedMap(hashmap)"],
							"id": 44}, 
                        {"name": "Difference between ArrayList and LinkedList in java",
							"book": ["One of the common interview question is “What is difference between ArrayList and LinkedList”.Before we actually see differences,let me give you brief introduction of both.","ArrayList","1) ArrayList is implementation of list interface.","2) ArrayList is not synchonized(so not thread safe)","3) ArrayList is implemented using array as internal data structure.It can be dynamically resized .","LinkedList","1) LinkedList is implementation of list and deque interface.","2) LinkedList is not synchronized","3) LinkedList is implemented using doubly linked list as internal data structure.","When to use ArrayList or LinkedList?","It actually depends on our need.","1) If we have more insertion or deletion then we should use LinkedList.","2) If we have less insertion or deletion and more search operations then we should use ArrayList."],
							"id": 45}, 
                        {"name": "Difference between Iterator and ListIterator in java",
							"book": ["In this post, we will see difference between Iterator and ListIterator in java. They are both used for traversal but it is good to point out differences between them, ","With examples:","1. Country.java ","package org.arpit.java2blog;","public class Country {","String name;","long population;","public Country(String name, long population) {","super();","this.name = name;","this.population = population;","}","public String getName() {","return name;","}","public void setName(String name) {","this.name = name;","}","public long getPopulation() {","return population;","}","public void setPopulation(long population) {","this.population = population;","} ","}","2. IterateListMain.java","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.Iterator;","import java.util.ListIterator;","public class IterateListMain {","/**"," * @author Arpit Mandliya"," */","public static void main(String[] args) {","Country india=new Country('India',1000);","Country japan=new Country('Japan',10000);","Country france=new Country('France',2000);","Country russia=new Country('Russia',20000);","// We are going to iterate on this list and will print ","//name of the country ","ArrayList countryLists=new ArrayList();","countryLists.add(india);","countryLists.add(japan);","countryLists.add(france);","countryLists.add(russia);","System.out.println('-----------------------------');","// Iterator","System.out.println('Iterating using iterator : ');","Iterator iteratorCountryLists= countryLists.iterator();","while(iteratorCountryLists.hasNext())","{","System.out.println(iteratorCountryLists.next().getName());","}","System.out.println('-----------------------------');","//List iterator","System.out.println('Iterating using ListIterator in forward direction : ');","ListIterator listIteratorCountry= countryLists.listIterator();","while(listIteratorCountry.hasNext())","{","System.out.println(listIteratorCountry.next().getName());","}","System.out.println('-----------------------------');","System.out.println('Iterating using ListIterator in backward direction : ');","while(listIteratorCountry.hasPrevious())","{","System.out.println(listIteratorCountry.previous().getName());","}","}","}","When you run above program, you will get following output:","-----------------------------","Iterating using iterator : ","India","Japan","France","Russia","-----------------------------","Iterating using ListIterator in forward direction : ","India","Japan","France","Russia","-----------------------------","Iterating using ListIterator in backward direction : ","Russia","France","Japan","India"],
							"id": 46}]
                },
                {
                    "name": "Chapter 5",
                    "description": "Java Multithreading",
                    "content": [
						{"name": "Java Thread example",
							"book": ["Thread can be called as light weight process. Java supports multithreading , so it allows your application to perform two or more task concurrently.Multithreading can be of advantage specially when now a days, machine has multiple CPUs, so multiple tasks can be executed concurrently.","Whenever we call main method in java, it actually creates a single main thread. Although it creates other threads too but those are related to system and known as daemon threads. So if we want to create more threads to execute task concurrently , we can use multiThreading.","Thread can be created in two ways.","1) By extending Thread class","2) By implementing Runnable interface","By extending Thread class:","You can create your own thread by extending Thread class and override run method. You need to create object of that class and then call start() method on it to execute thread as different threads.","Create a class FirstThread.java as below.","package org.arpit.java2blog.thread;","public class FirstThread extends Thread{"," public void run()"," {","System.out.println('Thread is running');"," }","}","In above program, we have created our own thread by extending Thread class and overriding run method.","Create main class named ThreadExampleMain.java","package org.arpit.java2blog.thread;","public class ThreadExampleMain {"," public static void main(String args[])"," {","FirstThread ft= new FirstThread();","ft.start();"," }","}","In above program ,we are creating a object of FirstThread class and calling start method to execute the thread.","When you run above program, you will get following output.","Thread is running","By implementing Runnableinterface:","The other way is , you need to implement Runnable interface and override public void run() method. You need to instantiate the class, pass created object to Thread constructor and call start method on thread object to execute thread as different threads.","Create a class FirthThread.java as below.","package org.arpit.java2blog.thread;","public class FirstThread implements Runnable{"," public void run()"," {","System.out.println('Thread is running');"," }","}","In above program, we have created our own class and implemented Runnable interface and overridden run() method.","Create main class named ThreadExampleMain.java","package org.arpit.java2blog.thread;","public class ThreadExampleMain {"," public static void main(String args[])"," {","FirstThread ft= new FirstThread();","Thread t=new Thread(ft);","t.start();"," }","}","In above program ,we are creating a object of FirstThread class and passing it to Thread constructor and calling start method to actually execute.The start method will eventually call run method of FirstThread class.","When you run above program, you will get following output.","Thread is running","Thread vs Runnable which is better?","Implementing Runnable interface is considered to be better approach than Extending Thread due to following reasons.","1) Java does not support multiple inheritance so if you extend Thread class and you can not extend any other class which is needed in most of the cases.","2) Runnable interface represents a task and this can be executed with help of Thread class or Executors.","3) When you use inheritance, it is because you want to extend some properties of parent, modify or improve class behavior. But if you are extending thread class just to create thread, so it may not be recommended behavior for Object Oriented Programming."],
							"id": 47}, 
                        {"name": "Difference between process and thread in java",
							"book": ["In this tutorial, we are going to see differences between process and thread in java.","If you are working on multithreading in java, it is good to know differences between process and thread. How multithreading can improve performance by executing code in parallel.","Process vs Thread:","1) The process can be referred as program in execution whereas thread is part of process.","2) Process has its own address space whereas multiple threads share same address space of process. Each thread has its own stack.","3) Process can have multiple threads but thread is the smallest unit which can execute concurrently with other threads.","4) Process are quite heavyweight and have more overhead whereas thread is light weight and have less overhead.","5) Process do not depend on each other whereas threads are not independent as they share address space.","6) You do not require synchronization in case of process. Threads require synchronization to avoid unexpected scenarios.","7) Processes can communicate to each other using inter-process communication only where as thread can communicate directly as thread share same address space.","8) You can easily create new threads by calling thread’s start method but you need to copy resources of parent process to create a new child process."],
							"id": 48}, 
                        {"name": "Java Thread Sleep Example",
							"book": ["Sleep method of java.lang.Thread is used to pause current execution of thread for specific period of time.","Some important points about sleep method are :","1) It causes current executing thread to sleep for specific amount of time.","2) Its accuracy depends on system timers and schedulers.","3) It keeps the monitors it has acquired, so if it is called from synchronized context, no other thread can enter that block or method.","4) If we call interrupt() method , it will wake up the sleeping thread.","synchronized(lockedObject) {","Thread.sleep(1000); // It does not release the lock on lockedObject.","// So either after 1000 miliseconds, current thread will wake up, or after we call ","//t. interrupt() method.","Example: Create a class FirstThread.java as below.","package org.arpit.java2blog.thread;","public class FirstThread implements Runnable{"," public void run()"," {","System.out.println('Thread is running');"," }","}Create main class named ThreadSleepExampleMain.java","package org.arpit.java2blog.thread;","public class ThreadSleepExampleMain {"," public static void main(String args[])"," {","FirstThread ft= new FirstThread();","Thread t=new Thread(ft);","t.start();","long startTime=System.currentTimeMillis();","try {","// putting thread on sleep","Thread.sleep(1000);","} catch (InterruptedException e) {","e.printStackTrace();","}","long endTime=System.currentTimeMillis();","long timeDifference=(endTime-startTime);","System.out.println('Time difference between before and after sleep call: '+timeDifference);"," }","}","When you run above program, you will get following output.","Thread is running","Time difference between before and after sleep call: 1001","You can see there is delay of 1 milliseconds. As mentioned earlier,its accuracy depends on system timers and schedulers."],
							"id": 49}, 
                        {"name": "Java Thread Join Example",
							"book": ["Thread class’s join method can be used to stop current execution of thread until thread it joins, completes its task. So basically , it waits for the thread on which join method is getting called, to die.","There are three variant of join method:","public final void join() throws InterruptedException :","Thread on which join method is getting called to die.","public final void join(long millis) throws InterruptedException:","This method when called on the thread, it waits for either of following:","1) Thread on which join method is getting called, to die.","2) Specified milliseconds","public final void join(long millis,int nanos) throws InterruptedException:","This method when called on the thread, it waits for either of following:","1) Thread on which join method is getting called, to die.","2) Specified milliseconds + nano seconds","Example:","Lets take simple example:","package org.arpit.java2blog.thread;","public class MyRunnable implements Runnable{"," public void run()"," {","try {","System.out.println(Thread.currentThread().getName()+' Start');","// thread sleeps for 4 secs","Thread.sleep(4000);","System.out.println(Thread.currentThread().getName()+' end');","} catch (InterruptedException e) {","// TODO Auto-generated catch block","e.printStackTrace();","}"," } ","}","Create ThreadExampleMain.java","package org.arpit.java2blog.thread;","public class ThreadExampleMain {"," public static void main(String args[])"," {","System.out.println('Main thread execution starts');","MyRunnable mr=new MyRunnable();","Thread t1=new Thread(mr,'Thread 1');","Thread t2=new Thread(mr,'Thread 2');","Thread t3=new Thread(mr,'Thread 3');","t1.start();","// lets waits fort1 to die","try {","t1.join();","} catch (InterruptedException e) {","e.printStackTrace();","}","t2.start();","try {"," // lets waits for 1 sec or t2 to die which ever occurs first ","t2.join(1000);","} catch (InterruptedException e1) {","e1.printStackTrace();","}","t3.start() ;","// complete all threads before completing main thread","try {","t2.join();","t3.join();","} catch (InterruptedException e1) {","e1.printStackTrace();","}","System.out.println('Main thread execution ends');"," }","}","When you run above program, you will get following output.","Main thread execution starts","Thread 1 Start","Thread 1 end","Thread 2 Start","Thread 3 Start","Thread 2 end","Thread 3 end","Main thread execution ends","Lets analysis output now.","1) Main thread execution starts","2) Thread 1 starts(Thread 1 start) and as we have put t1.join() , it will wait for t1 to die(Thread 1 end).","3) Thread 2 starts(Thread 2 start) and waits for either 1 seconds or die but as we have put sleep for 4 seconds in run method, it will not die in 1 second. so main thread resumes and Thread 3 starts(Thread 3 start)","4) As we have put t2.join() and t3.join(). These 2 threads will get completed before exiting main thread.So Thread 2 will end(Thread 2 end ) and then thread 3 will end(Thread 3 end).","5) Main thread execution ends."],
							"id": 50}, 
                        {"name": "Daemon thread in java with example",
							"book": ["Daemon threads are low priority background threads which provide services to user threads. It’s life depends on user threads. If no user thread is running then JVM can exit even if daemon threads are running. JVM do not wait for daemon threads to finish.","Daemon threads perform background tasks such as garbage collection, finalizeretc.","The only purpose of daemon thread is to serve user thread so if there are no user threads, there is no point of JVM to run these threads, that’s why JVM exits once there are no user threads.","Two method related to daemon thread","Public void setDaemon(boolean status) :","This method can be used to mark thread as useror daemon thread. If you put setDaemon(true), it makes thread as daemon.","Public boolean isDaemon()","This method can be used to check if thread is daemon or not.","Daemon Thread example:","package org.arpit.java2blog;","class SimpleThread implements Runnable{"," public void run()"," {","if(Thread.currentThread().isDaemon())","System.out.println(Thread.currentThread().getName()+'is daemon thread');","else","System.out.println(Thread.currentThread().getName()+'is user thread');"," }","}","public class DaemonThreadMain {"," public static void main(String[] args){","SimpleThread st=new SimpleThread();","Thread th1=new Thread(st,'Thread 1');//creating threads","Thread th2=new Thread(st,'Thread 2');","Thread th3=new Thread(st,'Thread 3');","th2.setDaemon(true);//now th2 is daemon thread","th1.start();//starting all threads","th2.start();","th3.start();","}","}","When you run above program, you will get below output:","Thread 1is user thread","Thread 3is user thread","Thread 2is daemon thread","Please note that you can not convert user thread to daemon thread once it is started otherwise it will throw IllegalThreadStateException.","package org.arpit.java2blog;","class SimpleThread implements Runnable{"," public void run()"," {","if(Thread.currentThread().isDaemon())","System.out.println(Thread.currentThread().getName()+'is daemon thread');","else","System.out.println(Thread.currentThread().getName()+'is user thread');"," }","}","public class DaemonThreadMain {"," public static void main(String[] args){","SimpleThread st=new SimpleThread();","Thread th1=new Thread(st,'Thread 1');//creating threads","Thread th2=new Thread(st,'Thread 2');","Thread th3=new Thread(st,'Thread 3');","th1.start();//starting all threads","th2.start();","th3.start();","th2.setDaemon(true);//now converting user thread to daemon thread after starting the thread. ","}","}","When you run above program, you will get below output:","Thread 1is user threadException in thread 'main' ","Thread 2is user thread","Thread 3is user thread","java.lang.IllegalThreadStateException"," at java.lang.Thread.setDaemon(Thread.java:1388)"," at org.arpit.java2blog.DaemonThreadMain.main(DaemonThreadMain.java:28)"],
							"id": 51}, 
                        {"name": "Object level locking vs Class level locking in java",
							"book": ["Synchronization is ability to restrict access to shared resource to only one thread. When two or more threads need access to shared resource, there has to be some mechanism such that shared resource will be used by only one thread. The process by which we can achieve it is called Synchronization.","Why do you need Synchronization?","Let’s understand this with the help of example.","Let’s say you want to count number of request you got for a particular URL. If you get two requests at the same time, then count may be inconsistent.","Without Synchronization: ","package org.arpit.java2blog;","public class RequestCounter {"," private int count;"," public int incrementCount()"," {","count++;","return count;"," }","}","For example:","Thread T1 sees count as 20 and increment it to 21. At the same time, thread t2 also sees count as 20 and increment it to 21. This shows that count became inconsistent.","With Synchronization:","You can achieve Synchronization using two ways.","1) synchronized method","2) synchronized block","You can not use synchronized withinstance or class variables.","synchronized method","You can make whole incrementCount() method synchronized so no two thread can access it parallelly.","package org.arpit.java2blog;","public class RequestCounter {"," private int count;"," public synchronized int incrementCount()"," {","count++;","return count;"," }","}","For example:","Thread T1 sees count as 20 and increment it to 21. At the same time, thread t2 will now see count as 21 and increment it to 22.","synchronized block","You can make use block to synchronize critical section inincrementCount() method so no two thread can access block concurrently.","package org.arpit.java2blog;","public class RequestCounter {"," private int count;"," public int incrementCount() {","synchronized (this) {","count++;","return count;","}"," }","}","For example:","Thread T1 sees count as 20 and increment it to 21. At the same time, thread t2 will now see count as 21 and increment it to 22.","There are two types of locking in java.","1) Object level locking","2) Class level locking","Object level locking:","Object level locking means you want to synchronize non static method or block so that it can be accessed by only one thread at a time for that instance. It is used if you want to protect non static data.","You can achieve Object level locking by following.","Make method synchronized:","public synchronized int incrementCount()","{","}","Using synchronized block and lock on this:","public int incrementCount() {","synchronized (this) {","count++;","return count;","}","Using synchronized block and lock on some other object:","private final Object lock=new Object();","public int incrementCount() {","synchronized (lock) {","count++;","return count;","}","Class level locking:","Class level locking means you want to synchronize static method or block so that it can be accessed by only one thread for whole class. If you have 10 instances of class, only one thread will be able to access only one method or block of any one instance at a time. It is used if you want to protect static data.","This can be achieved by following:","Make static method synchronized:","public static synchronized int incrementCount()","{","}","Using synchronized block and lock on .class:","public int incrementCount() {","synchronized (RequestCounter.class) {","count++;","return count;","}","Using synchronized block and lock on some other static object:","private final static Object lock=new Object();","public int incrementCount() {","synchronized (lock) {","count++;","return count;","}","Can two threads execute static and non static methods concurrently?","Yes, Since two threads will acquire lock on different objects, they can be executed concurrently without any issues.","If one method of class is synchronized and other method of same class is not synchronized? Can they be executed concurrently by two threads?","Yes, because one thread will require lock to get into synchronized block but second thread which will execute non synchronized method that won’t require any lock, so it can be executed concurrently.","Is it safe to call a synchronized method from another synchronized method?","Yes, it is safe to call a synchronized method from another synchronized method because when you call synchronized method, you will get lock on this object and when you call another synchronized method of same class, it is safe to execute as it already has lock on this object.","For example:","public synchronized void method1() {","method2();","// some code"," }"," public synchronized void method2() {","// some code"," }","You are actually doing this.","public void method1() {","synchronized (this) {","method2();","// some code","}"," }"," public void method2() {","synchronized (this) {","// some code","}"," }","Here if any thread calls method2 from method1, it will already have lock on this object hence It is safe to execute."],
							"id": 52}, 
                        {"name": "wait, notify and notifyAll method in java",
							"book": ["You might have noticed Object class has three final method called wait, notify and notifyAll. These methods are used for inter thread communication.Java 5 has introduced executor framework which takes care of inter thread communication for you and internally uses wait, notify and notifyAll but you still require basic understanding of these methods and how inter thread communication works in java using wait , notify and notifyAll.","What are wait , notify and notifyAll methods?","wait , notify and notifyAll method are used to allow threads to communicate to each other via accessing common object or in other terms, Object can be considered a medium for inter thread communication via these methods. These methods need to be called from synchronized context,otherwise it will throw java.lang.IllegalMonitorStateException.","Some background on synchronized block :","1) Only one thread can enter at a time in synchronized block","2) A thread required lock on the object to enter in synchronized block.","3) If Thread A want to enter in synchronized block then Thread A has to wait for Thread B to release it.","Lets have some brief understanding of these methods:","wait():","When you call wait method on the object then it tell threads to give up the lock and go to sleep state unless and until some other thread enters in same monitor and calls notify or notifyAll methods on it.","notify():","When you call notify method on the object, it wakes one of thread waiting for that object. So if multiple threads are waiting for an object, it will wake of one of them. Now you must be wondering which one it will wake up. It actually depends on OS implementation.","notifyAll() :","notifyAll will wake up all threads waiting on that object unlike notify which wakes up only one of them.Which one will wake up first depends on thread priority and OS implementation.","Lets understand it with the help of example:","1.Create a class named Book.java:","It is java bean class on which thread will act and call wait and notify method.","package org.arpit.java2blog.thread;","public class Book {"," String title;"," boolean isCompleted;"," public Book(String title) {","super();","this.title = title;"," }"," public String getTitle() {","return title;"," }"," public void setTitle(String title) {","this.title = title;"," }"," public boolean isCompleted() {","return isCompleted;"," }"," public void setCompleted(boolean isCompleted) {","this.isCompleted = isCompleted;"," }","}","2. Create a class named BookReader.java","This thread will wait until other thread call notify method, then after it will complete its processing. It will first take a lock on book object and will be called from synchronized block .So in this example, it will wait for BookWriter to complete the book.","package org.arpit.java2blog.thread;","public class BookReader implements Runnable{"," Book book;"," public BookReader(Book book) {","super();","this.book = book;"," }"," @Override"," public void run() {","synchronized (book) {","System.out.println(Thread.currentThread().getName()+' is waiting for the book to be completed: '+book.getTitle());","try {","book.wait();","} catch (InterruptedException e) {","e.printStackTrace();","}","System.out.println(Thread.currentThread().getName()+': Book has been completed now!! you can read it');","}"," } ","}","3. Create a class named BookWriter.java","This class will notify thread(in case of notify) which is waiting on book object. It will not give away lock as soon as notify is called, it first complete its synchronized block. So in this example, BookWriter will complete the book and notify it to BookReaders.","package org.arpit.java2blog.thread;","public class BookWriter implements Runnable{"," Book book;"," public BookWriter(Book book) {","super();","this.book = book;"," }"," @Override"," public void run() {","synchronized (book) {","System.out.println('Author is Starting book : ' +book.getTitle() );","try {","Thread.sleep(1000);","} catch (InterruptedException e) {","e.printStackTrace();","}","book.setCompleted(true);","System.out.println('Book has been completed now');","book.notify();","System.out.println('notify one reader');","} "," }","}","4. Create a class ThreadInterCommunicationMain,java.","This is our main class which will create object of above classes and run it.","package org.arpit.java2blog.thread;","public class ThreadInterCommunicationMain {"," public static void main(String args[])"," {","// Book object on which wait and notify method will be called","Book book=new Book('The Alchemist');","BookReader johnReader=new BookReader(book);","BookReader arpitReader=new BookReader(book);","// BookReader threads which will wait for completion of book","Thread johnThread=new Thread(johnReader,'John');","Thread arpitThread=new Thread(arpitReader,'Arpit');","arpitThread.start();","johnThread.start();","// To ensure both readers started waiting for the book","try {","Thread.sleep(3000);","} catch (InterruptedException e) {","e.printStackTrace();","}","// BookWriter thread which will notify once book get completed","BookWriter bookWriter=new BookWriter(book);","Thread bookWriterThread=new Thread(bookWriter);","bookWriterThread.start();"," }","}","In case of notify():","When you run above program, you will get following outputs:","Arpit is waiting for the book to be completed: The Alchemist","John is waiting for the book to be completed: The Alchemist","Author is Starting book : The Alchemist","Book has been completed now","notify one reader","Arpit: Book has been completed now!! you can read it","So here,two BookReader threads(arpit and john) are waiting for book to be completed,so they called book.wait(). Once BookWriter completes it book, it called book.notify() and arpit thread gets up and completes its processing.","In case of notifyAll() :","Lets change BookWriter class to call book.notifyAll().","package org.arpit.java2blog.thread;","public class BookWriter implements Runnable{"," Book book;"," public BookWriter(Book book) {","super();","this.book = book;"," }"," @Override"," public void run() {","synchronized (book) {","System.out.println('Author is Starting book : ' +book.getTitle() );","try {","Thread.sleep(1000);","} catch (InterruptedException e) {","// TODO Auto-generated catch block","e.printStackTrace();","}","book.setCompleted(true);","System.out.println('Book has been completed now');","book.notifyAll();","System.out.println('notify readers');","}"," }","}","When you run above program, you will get following output:","Arpit is waiting for the book to be completed: The Alchemist","John is waiting for the book to be completed: The Alchemist","Author is Starting book : The Alchemist","Book has been completed now","notify readers","John: Book has been completed now!! you can read it","Arpit: Book has been completed now!! you can read it","In case of notifyAll(), it notifies all threads waiting on that object."],
							"id": 53}, 
                        {"name": "Can we start a thread twice in java",
							"book": ["No, Once you have started a thread, it can not be started again. If you try to start thread again , it will throw IllegalThreadStateException","Lets understand with the help of example:","package org.arpit.java2blog;","class FirstThread extends Thread {"," public void run() {","System.out.println('Thread is running');"," }","}","public class StartThreadAgainMain {"," public static void main(String[] args) {","FirstThread ft = new FirstThread();","ft.start();","ft.start();"," }","}","When you run above program , you will get below output:","Thread is runningException in thread 'main' ","java.lang.IllegalThreadStateException"," at java.lang.Thread.start(Thread.java:705)"," at org.arpit.java2blog.StartThreadAgainMain.main(StartThreadAgainMain.java:16)"," As you can see when we started thread twice, it threw IllegalThreadStateException."," If you try to start thread again , it will throw IllegalThreadStateException"],
							"id": 54}, 
                        {"name": "Can we call run() method directly to start a new thread",
							"book": ["No, you can not directly call run method to start a thread. You need to call start method to create a new thread.","If you call run method directly , it won’t create a new thread and it will be in same stack as main.","Lets understand with the help of example:","package org.arpit.java2blog;","class CustomThread extends Thread {"," public void run() {","for (int i = 0; i < 5; i++) {","try {","Thread.sleep(300);","} catch (InterruptedException e) {","e.printStackTrace();","}","System.out.println('Thread is running :'+i);","}"," }","}","public class StartThreadAgainMain {"," public static void main(String[] args) {","CustomThread ct1 = new CustomThread();","CustomThread ct2 = new CustomThread();","ct1.run();","ct2.run();"," }","}","When you run above program , you will get below output:","Thread is running :0","Thread is running :1","Thread is running :2","Thread is running :3","Thread is running :4","Thread is running :0","Thread is running :1","Thread is running :2","Thread is running :3","Thread is running :4","As you can see when we are directly calling run method, it is not creating new threads.","If you use start instead of run in above example:","package org.arpit.java2blog;","class CustomThread extends Thread {"," public void run() {","for (int i = 0; i < 5; i++) {","try {","Thread.sleep(300);","} catch (InterruptedException e) {","e.printStackTrace();","}","System.out.println('Thread is running :'+i);","}"," }","}","public class StartThreadAgainMain {"," public static void main(String[] args) {","CustomThread ct1 = new CustomThread();","CustomThread ct2 = new CustomThread();","ct1.start();","ct2.start();"," }","}","When you run above program , you will get below output:","Thread is running :0","Thread is running :0","Thread is running :1","Thread is running :1","Thread is running :2","Thread is running :2","Thread is running :3","Thread is running :3","Thread is running :4","Thread is running :4","You can not directly call run method to create a thread, you need to call start method to create a new thread."],
							"id": 55}, 
                        {"name": "Difference between notify and notifyAll in java",
							"book": ["In this post, we are going to see difference between notify and notifyall in java.","notify():","When you call notify method on the object, it wakes one of thread waiting for that object. So if multiple threads are waiting for an object, it will wake of one of them. Now you must be wondering which one it will wake up. It actually depends on OS implementation.","notifyAll() :","notifyAll will wake up all threads waiting on that object unlike notify which wakes up only one of them.Which one will wake up first depends on thread priority and OS implementation.","Lets understand it with the help of example:","1. Create a class named File.java:","It is java bean class on which thread will act and call wait and notify method.","package org.arpit.java2blog.thread;","public class File {"," String name;"," boolean isCompleted;"," public File(String name) {"," super();"," this.name = name;"," }"," public String getName() {"," return name;"," }"," public void setName(String name) {"," this.name = name;"," }"," public boolean isCompleted() {"," return isCompleted;"," }"," public void setCompleted(boolean isCompleted) {"," this.isCompleted = isCompleted;"," }","}","2. Create a class named FileReader.java","This thread will wait until other thread call notify method, then after it will complete its processing. It will first take a lock on file object and will be called from synchronized block .So in this example, it will wait for FileWriter to complete the file.","package org.arpit.java2blog.thread;","public class FileReader implements Runnable{"," File file;"," public FileReader(File file) {","super();","this.file = file;"," }"," @Override"," public void run() {","synchronized (file) {","System.out.println(Thread.currentThread().getName()+' is waiting for the file to be completed: '+file.getName());","try {","file.wait();","} catch (InterruptedException e) {","e.printStackTrace();","}","System.out.println(Thread.currentThread().getName()+': File has been completed now!! you can read it');","}"," } ","}","3. Create a class named FileWriter.java","This class will notify thread(in case of notify) which is waiting on file object. It will not give away lock as soon as notify is called, it first complete its synchronized block. So in this example, FileWriter will complete the file and notify it to FileReaders.","package org.arpit.java2blog.thread;","public class FileWriter implements Runnable{"," File file;"," public FileWriter(File file) {","super();","this.file = file;"," }"," @Override"," public void run() {","synchronized (file) {","System.out.println('Write is going to start writing the file : ' +file.getName() );","try {","Thread.sleep(1000);","} catch (InterruptedException e) {","e.printStackTrace();","}","file.setCompleted(true);","System.out.println('File has been completed now');","file.notify();","System.out.println('notify one reader');","} "," }","}","4. Create a class NotifyAndNotifyAllMain,java.","This is our main class which will create object of above classes and run it.","package org.arpit.java2blog.thread;","public class NotifyAndNotifyAllMain {"," public static void main(String args[])"," {","// File object on which wait and notify method will be called","File file=new File('Excel file');","FileReader reader1=new FileReader(file);","FileReader reader2=new FileReader(file);","// FileReader threads which will wait for completion of file","Thread thread1=new Thread(reader1,'Reader 1');","Thread thread2=new Thread(reader2,'Reader 2');","thread2.start();","thread1.start();","// To ensure both readers started waiting for the file","try {","Thread.sleep(3000);","} catch (InterruptedException e) {","e.printStackTrace();","}","// FileWriter thread which will notify once file get completed","FileWriter fileWriter=new FileWriter(file);","Thread fileWriterThread=new Thread(fileWriter);","fileWriterThread.start();"," }","}","In case of notify():","When you run above program, you will get following outputs:","Reader 2 is waiting for the file to be completed: Excel file","Reader 1 is waiting for the file to be completed: Excel file","Write is going to start writing the file : Excel file","File has been completed now","notify one reader","Reader 2: File has been completed now!! you can read it","So here,two FileReader threads(reader 1 and reader 2) are waiting for file to be completed,so they called file.wait(). Once FileWriter completes it’s file, it called file.notify() and reader 2 thread gets up and completes its processing.","In case of notifyAll() :","Lets change FileWriter class to call file.notifyAll().","package org.arpit.java2blog.thread;","public class FileWriter implements Runnable{"," File file;"," public FileWriter(File file) {","super();","this.file = file;"," }"," @Override"," public void run() {","synchronized (file) {","System.out.println('Write is going to start writing the file : ' +file.getName() );","try {","Thread.sleep(1000);","} catch (InterruptedException e) {","e.printStackTrace();","}","file.setCompleted(true);","System.out.println('File has been completed now');","file.notifyAll();","System.out.println('notify all readers');","} "," }","}","When you run above program, you will get following output:","Reader 2 is waiting for the file to be completed: Excel file","Reader 1 is waiting for the file to be completed: Excel file","Write is going to start writing the file : Excel file","File has been completed now","notify all readers","Reader 1: File has been completed now!! you can read it","Reader 2: File has been completed now!! you can read it","In case of notifyAll(), it notifies all threads waiting on that object."],
							"id": 56}, 
                        {"name": "How to print even and odd numbers using threads in java",
							"book": ["In this post, we will see how to print even and odd numbers using threads in java.","Problem","You are given two threads. You need to print odd numbers using one thread and even numbers using another thread.You need to print in natural order up to MAX.","For example:","If MAX is 10, you need to print:","1 2 3 4 5 6 7 8 9 10","So 1 3 5 7 9 will be printed by odd thread","2 4 6 8 10 will be printed by even thread.","Solution 1","We will use wait and notify to solve how to print even and odd numbers using threads in java.","1) Use a variable called boolean odd. If you want to print odd number, it’s value should be true and vice versa for even number.","2) Create two methods(printOdd and printEven), one will print odd numbers and other will print even numbers.","3) Create two threads, one for odd and one for even.","4) will callprintEven method and t2 will call printOdd method simultaneously.","5) If boolean odd is true in printEven method, t1 will wait.","6) If boolean odd is false in printOdd method, t2 will wait.","Print even and odd numbers using threads in java","package org.arpit.java2blog;","public class OddEvenPrintMain {","boolean odd;","int count = 1;","int MAX = 20;","public void printOdd() {","synchronized (this) {","while (count < MAX) {","System.out.println('Checking odd loop');","while (!odd) {","try {","System.out.println('Odd waiting : ' + count);","wait();","System.out.println('Notified odd :' + count);","} catch (InterruptedException e) {","// TODO Auto-generated catch block","e.printStackTrace();","}","}","System.out.println('Odd Thread :' + count);","count++;","odd = false;","notify();","}","}","}","public void printEven() {","try {","Thread.sleep(1000);","} catch (InterruptedException e1) {","e1.printStackTrace();","}","synchronized (this) {","while (count < MAX) {","System.out.println('Checking even loop');","while (odd) {","try {","System.out.println('Even waiting: ' + count);","wait();","System.out.println('Notified even:' + count);","} catch (InterruptedException e) {","e.printStackTrace();","}","}","System.out.println('Even thread :' + count);","count++;","odd = true;","notify();","}","}","}","public static void main(String[] args) {","OddEvenPrintMain oep = new OddEvenPrintMain();","oep.odd = true;","Thread t1 = new Thread(new Runnable() {","@Override","public void run() {","oep.printEven();","}","});","Thread t2 = new Thread(new Runnable() {","@Override","public void run() {","oep.printOdd();","}","});","t1.start();","t2.start();","try {","t1.join();","t2.join();","} catch (InterruptedException e) {","e.printStackTrace();","}","}","}","When you run above program, you will get below output:","Checking odd loop","Odd Thread :1","Checking odd loop","Odd waiting : 2","Checking even loop","Even thread :2","Checking even loop","Even waiting: 3","Notified odd :3","Odd Thread :3","Checking odd loop","Odd waiting : 4","Notified even:4","Even thread :4","Checking even loop","Even waiting: 5","Notified odd :5","Odd Thread :5","Checking odd loop","Odd waiting : 6","Notified even:6","Even thread :6","Checking even loop","Even waiting: 7","Notified odd :7","Odd Thread :7","Checking odd loop","Odd waiting : 8","Notified even:8","Even thread :8","Checking even loop","Even waiting: 9","Notified odd :9","Odd Thread :9","Checking odd loop","Odd waiting : 10","Notified even:10","Even thread :10","Checking even loop","Even waiting: 11","Notified odd :11","Odd Thread :11","Checking odd loop","Odd waiting : 12","Notified even:12","Even thread :12","Checking even loop","Even waiting: 13","Notified odd :13","Odd Thread :13","Checking odd loop","Odd waiting : 14","Notified even:14","Even thread :14","Checking even loop","Even waiting: 15","Notified odd :15","Odd Thread :15","Checking odd loop","Odd waiting : 16","Notified even:16","Even thread :16","Checking even loop","Even waiting: 17","Notified odd :17","Odd Thread :17","Checking odd loop","Odd waiting : 18","Notified even:18","Even thread :18","Checking even loop","Even waiting: 19","Notified odd :19","Odd Thread :19","Notified even:20","Even thread :20","If you observe output, you should be able to understand above program.","Let me try to explain first few lines:","Checking odd loop : t2 Checks for while condition in printOdd method","Odd Thread :1 : t2 Prints the count ,increment it by one and make odd =false","Checking odd loop : Checks for while condition in printOdd method","Odd waiting : 2: Since odd=falsenow, t2 will wait and releases the lock","Checking even loop: t1 checks for while condition in printEven method","Even thread :2 : t1 prints the count,increment it by one and make odd =true","Checking even loop: t1 checks for while condition in printEven method","Even waiting: 3: Since odd=true now, t1 will wait and releases the lock","Notified odd :3 : Since we have called notify when we were printing “Even thread 2”, it will notify t2.","All other steps will follow.","Solution 2: Using remainder","You can use concept of remainder here.","1) If number%2==1 then Odd will print the number and increment it else will go in the wait state.","2) If number%2==0 then Even will print the number and increment it else will go in the wait state.","Let’s check with the help of example.","Create a class named “OddEvenRunnable” and implement Runnable interface.","Create a class named 'OddEvenRunnable'. It will implement Runnable interface.","public class OddEvenRunnable implements Runnable{","public int PRINT_NUMBERS_UPTO=10;","static intnumber=1;","int remainder;","static Object lock=new Object();","OddEvenRunnable(int remainder)","{","this.remainder=remainder;","}","@Override","public void run() {","while (number < PRINT_NUMBERS_UPTO) {","synchronized (lock) {","while (number % 2 != remainder) { // wait for numbers other than remainder","try {","lock.wait();","} catch (InterruptedException e) {","e.printStackTrace();","}","}","System.out.println(Thread.currentThread().getName() + ' ' + number);","number++;","lock.notifyAll();","}","}","}","}","Create Main class named “PrintOddEvenMain”","public class PrintOddEvenMain {","public static void main(String[] args) {","OddEvenRunnable oddRunnable=new OddEvenRunnable(1);","OddEvenRunnable evenRunnable=new OddEvenRunnable(0);","Thread t1=new Thread(oddRunnable,'Odd');","Thread t2=new Thread(evenRunnable,'Even');","t1.start();","t2.start();","}","}","When you run above program, you will get below output","Odd 1","Even 2","Odd 3","Even 4","Odd 5","Even 6","Odd 7","Even 8","Odd 9","Even 10","This is all about printing even and odd numbers using threads in java."],
							"id": 57}]
                },
                {
                    "name": "Chapter 6",
                    "description": "Java Executor Framework",
                    "content": [
						{"name": "Java ThreadPoolExecutor",
							"book": ["Java 5 has introduced new concurrent API called “Executor frameworks” to make programmer life easy. It simplifies design and development of multi-thread applications. It consists of mainly Executor, ExecutorService interface and ThreadPoolExecutor class which implements both interfaces i.e. Executor and ExecutorService. ThreadPoolExecutor class provide the implementation of thread pool. We will understand more about it in the later part of the tutorial.","Why do we need Executor framework?","When we create a simple multi threading application, we createRunnable objects and construct Thread object using Runnable, We need to create, execute and manage thread. It may be difficult for us to do that. Executor Framework does it for you. It is responsible for creating, executing and managing the thread and not only this, it improves the performance of the application too.","When you follow task per thread policy, you create a new thread for each task then if system is highly overloaded, you will get out of memory error and your system will fail. If you use ThreadPoolExecutor , you won’t create thread for new task. You will assign task to a limited number of threads once thread completes one task, it will be given another task.","Core interface of Executor framework is Executor. It has a method called “execute”.","public interface Executor {"," void execute(Runnable command);","}","There is another interface called ExecutorService which extends Executor interface. It can be termed as Executor that provides methods that can control termination and methods that can produce a Future for tracking the progress of one or more asynchronous tasks. It has method such as submit, shutdown, shutdownNow etc.","ThreadPoolExecutor is actual implementation of ThreadPool. It extends AbstractThreadPoolExecutor which implements ExecutorService interface. You can create ThreadPoolExecutor from factory methods of Executor class. It is recommended a way to get an instance of ThreadPoolExecutor.","There are 4 factory methods in Executors class which can be used to get an instance of ThreadPoolExecutor. We are using Executors’ newFixedThreadPool to get an instance of ThreadPoolExecutor.","Example:","ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(5);","Here are four factory method present in Executors class.","newFixedThreadPool: This method returns thread pool executor whose maximum size(let’s say n threads) is fixed.If all n threads are busy performing the task and additional tasks are submitted, then they will have to be in the queue until thread is available.","newCachedThreadPool: this method returns an unbounded thread pool. It doesn’t have maximum size but if it has less number of tasks, then it will tear down unused thread. If thread has been unused for 1 mins(keepAliveTime), then it will tear it down.","newSingleThreadedExecutor: this method returns an executor which is guaranteed to use the single thread. ","newScheduledThreadPool: this method returns a fixed size thread pool that can schedule commands to run after a given delay, or to execute periodically.","Let’s create a basic example of ThreadPoolExecutor and we will use newFixedThreadPool to create a instance of ThreadPoolExecutor.","Let’s create a Task. Here Task will be to read different files and process them.","package org.arpit.java2blog.bean;","public class FetchDataFromFile implements Runnable{"," private final String fileName;"," public FetchDataFromFile(String fileName) {","super();","this.fileName = fileName;"," }"," @Override"," public void run() {","try {","System.out.println('Fetching data from '+fileName+' by '+Thread.currentThread().getName());","Thread.sleep(5000); // Reading file","System.out.println('Read file successfully: '+fileName+' by '+Thread.currentThread().getName());","} catch (InterruptedException e) {","e.printStackTrace();","}"," }"," public String getFileName() {","return fileName;"," }","}","Let’s create ThreadPoolExecutor which will consume above task and process it.","package org.arpit.java2blog;","import java.util.concurrent.Executors;","import java.util.concurrent.ThreadPoolExecutor;","public class ThreadPoolExecutorMain {"," public static void main(String args[]) {","// Getting instance of ThreadPoolExecutor usingExecutors.newFixedThreadPool factory method","ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(5);","for (int i = 0; i < 10; i++) {","FetchDataFromFile fdff = new FetchDataFromFile('File ' + i);","System.out.println('A new file has been added to read : ' + fdff.getFileName());","// Submitting task to executor","threadPoolExecutor.execute(fdff);","}","threadPoolExecutor.shutdown();"," }","}","When you run above program, you will get below output:","A new file has been added to read : File 0","A new file has been added to read : File 1","A new file has been added to read : File 2","Fetching data from File 0 by pool-1-thread-1","Fetching data from File 1 by pool-1-thread-2","A new file has been added to read : File 3","Fetching data from File 2 by pool-1-thread-3","A new file has been added to read : File 4","Fetching data from File 3 by pool-1-thread-4","A new file has been added to read : File 5","Fetching data from File 4 by pool-1-thread-5","A new file has been added to read : File 6","A new file has been added to read : File 7","A new file has been added to read : File 8","A new file has been added to read : File 9","Read file successfully: File 1 by pool-1-thread-2","Read file successfully: File 3 by pool-1-thread-4","Fetching data from File 5 by pool-1-thread-4","Read file successfully: File 4 by pool-1-thread-5","Read file successfully: File 2 by pool-1-thread-3","Read file successfully: File 0 by pool-1-thread-1","Fetching data from File 8 by pool-1-thread-3","Fetching data from File 7 by pool-1-thread-5","Fetching data from File 6 by pool-1-thread-2","Fetching data from File 9 by pool-1-thread-1","Read file successfully: File 5 by pool-1-thread-4","Read file successfully: File 7 by pool-1-thread-5","Read file successfully: File 6 by pool-1-thread-2","Read file successfully: File 8 by pool-1-thread-3","Read file successfully: File 9 by pool-1-thread-1","We have used new newFixedThreadPool, so when we have submitted 10 task, 5 new threads will be created and will execute 5 tasks. Other 5 tasks will wait in wait queue. As soon as any task will be completed by thread, another task will be picked by this thread and will execute it.","Using constructor of ThreadPoolExecutor:","If you want to customize creation of ThreadPoolExecutor, you can use its constructors too.","public ThreadPoolExecutor(int corePoolSize,","int maximumPoolSize,","long keepAliveTime,","TimeUnit unit,","BlockingQueue workQueue ,","ThreadFactory threadFactory,","RejectedExecutionHandler handler) ;","corePoolSize: corePoolSize is the number of threads to keep in the pool, even if they are idle","MaximumPoolSize: the maximum number of threads to allow in the pool","keepAliveTime: When you have more threads already available than corePoolSize, then keepAliveTime is time upto which that thread will wait for task before terminating.","unit: time unit is for keepAliveTime","workQueue: workQueue is the BlockingQueue which holds the tasks before execution.","threadFactory: Factory which is used to create a new Thread.","handler : RejectedExecutionHandler which is used in case execution is block or queue is full. Lets create a RejectedExecutionHandler for handling rejected task.","package org.arpit.java2blog.bean;","import java.util.concurrent.RejectedExecutionHandler;","import java.util.concurrent.ThreadPoolExecutor;","public class RejectTaskHandler implements RejectedExecutionHandler{"," @Override"," public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {","FetchDataFromFile ffdf=(FetchDataFromFile) r;","System.out.println('Sorry!! We won't be able to read :'+ffdf.getFileName());"," }","}","Lets change ThreadPoolExecutorMain.java to below code to make use of ThreadPoolExecutor constructor.","package org.arpit.java2blog.bean;","import java.util.concurrent.BlockingQueue;","import java.util.concurrent.Executors;","import java.util.concurrent.LinkedBlockingQueue;","import java.util.concurrent.ThreadFactory;","import java.util.concurrent.ThreadPoolExecutor;","import java.util.concurrent.TimeUnit;","public class ThreadPoolExecutorMain {"," public static void main(String args[]) {","// Wait queue is used to store waiting task","BlockingQueue queue=new LinkedBlockingQueue(4);","// Thread factory to create new threads","ThreadFactory threadFactory=Executors.defaultThreadFactory();","// Rejection handler in case task get rejected","RejectTaskHandler rth=new RejectTaskHandler();","// ThreadPoolExecutor constructor to create its instance","ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, 10L, TimeUnit.MILLISECONDS, queue,","threadFactory,rth",");","for (int i = 1; i <= 10; i++) {","FetchDataFromFile fdff = new FetchDataFromFile('File ' + i);","System.out.println('A new file has been added to read : ' + fdff.getFileName());","// Submitting task to executor","threadPoolExecutor.execute(fdff);","}","threadPoolExecutor.shutdown();"," }","}","When you run above program, you will get below output:","A new file has been added to read : File 1","A new file has been added to read : File 2","A new file has been added to read : File 3","A new file has been added to read : File 4","Fetching data from File 1 by pool-1-thread-1","A new file has been added to read : File 5","A new file has been added to read : File 6","A new file has been added to read : File 7","Sorry!! We won't be able to read :File 7","A new file has been added to read : File 8","Sorry!! We won't be able to read :File 8","A new file has been added to read : File 9","Sorry!! We won't be able to read :File 9","A new file has been added to read : File 10","Sorry!! We won't be able to read :File 10","Fetching data from File 6 by pool-1-thread-2","Read file successfully: File 1 by pool-1-thread-1","Read file successfully: File 6 by pool-1-thread-2","Fetching data from File 2 by pool-1-thread-1","Fetching data from File 3 by pool-1-thread-2","Read file successfully: File 3 by pool-1-thread-2","Read file successfully: File 2 by pool-1-thread-1","Fetching data from File 4 by pool-1-thread-2","Fetching data from File 5 by pool-1-thread-1","If you notice here File 7, File 8, File 9 and File 10 got rejected. Lets understand why they got rejected. Max pool size in ThreadPoolExecutor’s Constructor is 2, so when we submitted 10 tasks to thread pool, 2 threads got created and started processing 2 tasks and 4 tasks got queued in LinkedBlockingQueue, so once LinkedBlockingQueue became full, rest tasks got rejected.","How to decide the size of thread pool:","You should not hardcode size of thread pool. It should be provided by configuration or calculated from Runtime.availableProcessors.","Thread size should not be too big or too small. If you choose thread pool size that is too big, then it will overload the system and will not work properly. If you choose thread pool size too small, it will affect throughput and performance."],
							"id": 58}, 
                        {"name": "Java newFixedThreadPool",
							"book": ["In this tutorial, we will learn about Executor’s newFixedThreadPool factory method.","In the last tutorial, I have shared an introduction to ThreadPoolExecutor. If you are not aware of concepts of ThreadPoolExecutor, you should go through that first.","Executor’s newFixedThreadPool factory method :","This method returns thread pool executor whose maximum size(let’s say n threads) is fixed.If all n threads are busy performing the task and additional tasks are submitted, then they will have to be in the queue until a thread is available.","Syntax:","ExecutorService executorService=Executors.newFixedThreadPool(noOfThreads);","Java newFixedThreadPool example:","Let’s create a very simple example.","Step 1: Create a Runnable task named “LoopTask.java”.","package org.arpit.java2blog;","public class LoopTask implements Runnable {","private String loopTaskName;","public LoopTask(String loopTaskName) {","super();","this.loopTaskName = loopTaskName;","}","@Override","public void run() {","System.out.println('Starting '+loopTaskName);","for (int i = 1; i <= 10; i++) {","System.out.println('Executing '+loopTaskName+' with '+Thread.currentThread().getName()+'===='+i);","}","System.out.println('Ending '+loopTaskName);","}","}","Step 2: Create a class named “FixedThreadPoolMain”. This will be our main class.","package org.arpit.java2blog;","import java.util.concurrent.ExecutorService;","import java.util.concurrent.Executors;","public class FixedThreadPoolMain {","public static void main(String args[])","{","ExecutorService es=Executors.newFixedThreadPool(3);","for (int i = 1; i <= 6; i++) {","LoopTask loopTask=new LoopTask('LoopTask '+i);","es.submit(loopTask);","}","es.shutdown();","}","}","Let’s run above program to check the output:","Starting LoopTask 1","Starting LoopTask 3","Starting LoopTask 2","Executing LoopTask 3 with pool-1-thread-3====1","Executing LoopTask 1 with pool-1-thread-1====1","Executing LoopTask 3 with pool-1-thread-3====2","Executing LoopTask 2 with pool-1-thread-2====1","Executing LoopTask 3 with pool-1-thread-3====3","Executing LoopTask 1 with pool-1-thread-1====2","Executing LoopTask 3 with pool-1-thread-3====4","Executing LoopTask 2 with pool-1-thread-2====2","Executing LoopTask 3 with pool-1-thread-3====5","Executing LoopTask 3 with pool-1-thread-3====6","Executing LoopTask 1 with pool-1-thread-1====3","Executing LoopTask 3 with pool-1-thread-3====7","Executing LoopTask 2 with pool-1-thread-2====3","Executing LoopTask 3 with pool-1-thread-3====8","Executing LoopTask 1 with pool-1-thread-1====4","Executing LoopTask 3 with pool-1-thread-3====9","Executing LoopTask 2 with pool-1-thread-2====4","Executing LoopTask 3 with pool-1-thread-3====10","Executing LoopTask 1 with pool-1-thread-1====5","Executing LoopTask 1 with pool-1-thread-1====6","Ending LoopTask 3","Executing LoopTask 2 with pool-1-thread-2====5","Executing LoopTask 2 with pool-1-thread-2====6","Executing LoopTask 2 with pool-1-thread-2====7","Executing LoopTask 2 with pool-1-thread-2====8","Executing LoopTask 2 with pool-1-thread-2====9","Executing LoopTask 1 with pool-1-thread-1====7","Executing LoopTask 2 with pool-1-thread-2====10","Starting LoopTask 4","Ending LoopTask 2","Executing LoopTask 1 with pool-1-thread-1====8","Starting LoopTask 5","Executing LoopTask 4 with pool-1-thread-3====1","Executing LoopTask 5 with pool-1-thread-2====1","Executing LoopTask 1 with pool-1-thread-1====9","Executing LoopTask 1 with pool-1-thread-1====10","Ending LoopTask 1","Executing LoopTask 5 with pool-1-thread-2====2","Executing LoopTask 4 with pool-1-thread-3====2","Executing LoopTask 4 with pool-1-thread-3====3","Executing LoopTask 5 with pool-1-thread-2====3","Starting LoopTask 6","Executing LoopTask 5 with pool-1-thread-2====4","Executing LoopTask 4 with pool-1-thread-3====4","Executing LoopTask 5 with pool-1-thread-2====5","Executing LoopTask 5 with pool-1-thread-2====6","Executing LoopTask 6 with pool-1-thread-1====1","Executing LoopTask 6 with pool-1-thread-1====2","Executing LoopTask 6 with pool-1-thread-1====3","Executing LoopTask 6 with pool-1-thread-1====4","Executing LoopTask 5 with pool-1-thread-2====7","Executing LoopTask 4 with pool-1-thread-3====5","Executing LoopTask 4 with pool-1-thread-3====6","Executing LoopTask 4 with pool-1-thread-3====7","Executing LoopTask 4 with pool-1-thread-3====8","Executing LoopTask 5 with pool-1-thread-2====8","Executing LoopTask 6 with pool-1-thread-1====5","Executing LoopTask 5 with pool-1-thread-2====9","Executing LoopTask 4 with pool-1-thread-3====9","Executing LoopTask 4 with pool-1-thread-3====10","Executing LoopTask 5 with pool-1-thread-2====10","Ending LoopTask 5","Executing LoopTask 6 with pool-1-thread-1====6","Ending LoopTask 4","Executing LoopTask 6 with pool-1-thread-1====7","Executing LoopTask 6 with pool-1-thread-1====8","Executing LoopTask 6 with pool-1-thread-1====9","Executing LoopTask 6 with pool-1-thread-1====10","Ending LoopTask 6","We have used new newFixedThreadPool, so when we have submitted 6 task, 3 new threads will be created and will execute 3 tasks. Other 3 tasks will wait in wait queue. As soon as any task will be completed by thread, another task will be picked by this thread and will execute it.","That’s all about Java newFixedThreadPool example."],
							"id": 59}, 
                        {"name": "Java newCachedThreadPool",
							"book": ["In this tutorial, we will learn about Executor’s newCachedThreadPool factory method.","In the last tutorial, I have shared introduction to ThreadPoolExecutor. If you are not aware of concepts of ThreadPoolExecutor, you should go through that first.","Executor’s newCachedThreadPoolfactory method :","This method returns an unbounded thread pool. It sets maximum pool size to Integer.Max and it will create new threads depending on demand. If demand decreases, it will tear down threads if threads are idle for more than 1 min.","Example:","Let’s create a Task. Here Task will be to read different files and process them.","package org.arpit.java2blog.bean;","public class FetchDataFromFile implements Runnable{"," private final String fileName;"," public FetchDataFromFile(String fileName) {"," super();"," this.fileName = fileName;"," }"," @Override"," public void run() {"," try {"," System.out.println('Fetching data from '+fileName+' by '+Thread.currentThread().getName());"," Thread.sleep(5000); // Reading file"," System.out.println('Read file successfully: '+fileName+' by '+Thread.currentThread().getName());"," } catch (InterruptedException e) {"," e.printStackTrace();"," }"," }"," public String getFileName() {"," return fileName;"," }","}","Let’s create ThreadPoolExecutor which will consume above task and process it.","package org.arpit.java2blog;","import java.util.concurrent.Executors;","import java.util.concurrent.ThreadPoolExecutor;","public class ThreadPoolExecutorMain {"," public static void main(String args[]) {","// Getting instance of ThreadPoolExecutor usingExecutors.newCachedThreadPool factory method","ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) Executors.newCachedThreadPool();","for (int i = 1; i <= 10; i++) {","FetchDataFromFile fdff = new FetchDataFromFile('File :' + i);","System.out.println('A new file has been added to read : ' + fdff.getFileName());","threadPoolExecutor.execute(fdff);","}","threadPoolExecutor.shutdown();"," }","}","When you run above program, you will get below output:","A new file has been added to read : File :1","A new file has been added to read : File :2","Fetching data from File :1 by pool-1-thread-1","Fetching data from File :2 by pool-1-thread-2","A new file has been added to read : File :3","A new file has been added to read : File :4","Fetching data from File :3 by pool-1-thread-3","Fetching data from File :4 by pool-1-thread-4","A new file has been added to read : File :5","Fetching data from File :5 by pool-1-thread-5","A new file has been added to read : File :6","Fetching data from File :6 by pool-1-thread-6","A new file has been added to read : File :7","Fetching data from File :7 by pool-1-thread-7","A new file has been added to read : File :8","A new file has been added to read : File :9","Fetching data from File :8 by pool-1-thread-8","A new file has been added to read : File :10","Fetching data from File :9 by pool-1-thread-9","Fetching data from File :10 by pool-1-thread-10","If you notice, we have submitted 10 tasks and it has created 10 new threads depending on demand.If any thread remains idle for more than one minute, it will tear it down. newCachedThreadPool is a good choice when you want better queuing performance than newFixedThreadPool. If you want to restrict number of concurrent task for resource management, go with newFixedThreadPool."],
							"id": 60}, 
                        {"name": "Java ScheduledThreadPoolExecutor",
							"book": ["There are multiple ways to schedule a task in java. We have already Java timer to schedule a task but the problem with timers task is that you can execute one task at a time.So if the current task takes longer subsequent job will be delayed.","In this scenario, you can use Java ScheduledThreadPoolExecutor.This class is a part of Executor framework and provides facility to schedule a task rather than executing it immediately.","There are three methods which you can use to schedule task using ScheduledThreadPoolExecutor.","1.schedule","2.scheduleAtFixedRate","3.scheduleWithFixedDelay","Java ScheduledThreadPoolExecutor Example:","Step 1: Create a Runnable task named “RunnableTask.java”.","package org.arpit.java2blog;","import java.util.Date;","public class RunnableTask implements Runnable{","private String taskName;","public RunnableTask(String s){","this.taskName=s;","}","@Override","public void run() {","System.out.println(Thread.currentThread().getName()+' Start Time for '+taskName+' '+new Date());","// Process task here","try {","Thread.sleep(5000);","} catch (InterruptedException e) {","e.printStackTrace();","}","System.out.println(Thread.currentThread().getName()+' End Time for '+taskName+' '+new Date());","}","@Override","public String toString(){","return this.taskName;","}","}","Step 2:","package org.arpit.java2blog;","import java.util.Date;","import java.util.concurrent.Executors;","import java.util.concurrent.ScheduledExecutorService;","import java.util.concurrent.TimeUnit;","public class ScheduledThreadPoolMain {","public static void main(String[] args) throws InterruptedException {","System.out.println('Current Time = '+new Date());","// Created ScheduledThreadPoolExecutor object","ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);","for(int i=1; i<=3; i++){","Thread.sleep(2000);","RunnableTask task = new RunnableTask('Task '+i);","scheduledThreadPool.schedule(task,5, TimeUnit.SECONDS);","}","// Adding some delay","Thread.sleep(10000);","scheduledThreadPool.shutdown();","System.out.println('Completed all threads');","}","}","Let’s understand more about above main method.","ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);","ScheduledThreadPoolExecutor also have factory method named newScheduledThreadPool in Executors class similar to newFixedThreadPoolExecutor and newCachedThreadPoolExectuor.","You need to call schedule method to schedule as a task.","Schedule method takes three arguments:","public ScheduledFuture<?> schedule(Runnable command,long delay, TimeUnit unit):","Runnable command: It represents the task which you want to schedule.","long delay: It represents inital delay after which you want to schedule the task.","TimeUnit unit: It is time measure for delay argument.","If you notice, schedule method returns object of ScheduledFuture<?> which you can use to get the status of submitted jobs.","We have also called scheduledThreadPool.shutdown(), shutdown() method will bydefault wait for submitted task to execute and then terminate. You can change this policy using setExecuteExistingDelayedTasksAfterShutdownPolicy().","When you run above program, you will get below output:","Current Time = Fri May 19 00:20:39 IST 2017","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:20:46 IST 2017","pool-1-thread-2 Start Time for Task 2 Fri May 19 00:20:48 IST 2017","pool-1-thread-3 Start Time for Task 3 Fri May 19 00:20:50 IST 2017","pool-1-thread-1 End Time for Task 1 Fri May 19 00:20:51 IST 2017","pool-1-thread-2 End Time for Task 2 Fri May 19 00:20:53 IST 2017","pool-1-thread-3 End Time for Task 3 Fri May 19 00:20:55 IST 2017","Completed all threads","ScheduledThreadPoolExecutor’s scheduleAtFixedRate example:","ScheduledThreadPoolExecutor’s scheduleAtFixedRate is used to schedule a task after fix delay and then execute that task periodically.","scheduleAtFixedRate method takes four arguments:","public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit)","Runnable command: It represents the task which you want to schedule.","long initialDelay: It represents initial delay after which you want to schedule the task.","long period: It represents period by which you want to repeat the task.","TimeUnit unit: It is time measure for delay argument.","Let’s do some changes to call scheduleAtFixedRate in ScheduledThreadPoolMain.","package org.arpit.java2blog;","import java.util.Date;","import java.util.concurrent.Executors;","import java.util.concurrent.ScheduledExecutorService;","import java.util.concurrent.TimeUnit;","public class ScheduledThreadPoolMain {","/**"," * @param args"," * @throws InterruptedException"," */","public static void main(String[] args) throws InterruptedException {","System.out.println('Current Time = '+new Date());","// Created ScheduledThreadPoolExecutor object","ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);","for(int i=1; i<=3; i++){","Thread.sleep(2000);","RunnableTask task = new RunnableTask('Task '+i);","scheduledThreadPool.scheduleAtFixedRate(task,5,10,TimeUnit.SECONDS);","}","// Adding some delay","Thread.sleep(15000);","scheduledThreadPool.shutdown();","while(!scheduledThreadPool.isTerminated()){","//wait for all tasks to finish","}","System.out.println('Completed all threads');","}","}","When you run above program, you will get below output:","Current Time = Fri May 19 00:56:29 IST 2017","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:56:36 IST 2017","pool-1-thread-2 Start Time for Task 2 Fri May 19 00:56:38 IST 2017","pool-1-thread-3 Start Time for Task 3 Fri May 19 00:56:40 IST 2017","pool-1-thread-1 End Time for Task 1 Fri May 19 00:56:41 IST 2017","pool-1-thread-2 End Time for Task 2 Fri May 19 00:56:43 IST 2017","pool-1-thread-3 End Time for Task 3 Fri May 19 00:56:45 IST 2017","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:56:46 IST 2017","pool-1-thread-2 Start Time for Task 2 Fri May 19 00:56:48 IST 2017","pool-1-thread-3 Start Time for Task 3 Fri May 19 00:56:50 IST 2017","pool-1-thread-1 End Time for Task 1 Fri May 19 00:56:51 IST 2017","pool-1-thread-2 End Time for Task 2 Fri May 19 00:56:53 IST 2017","pool-1-thread-3 End Time for Task 3 Fri May 19 00:56:55 IST 2017","Completed all threads","If Observe the output carefully:","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:56:36 IST 2017","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:56:46 IST 2017","Once task 1 started, next task scheduled after period of 10 secs which have provided in scheduleAtFixedRate method.","ScheduledThreadPoolExecutor’s scheduleWithFixedDelay example:","ScheduledThreadPoolExecutor’s scheduleWithFixedDelay is used to schedule a task after initial delay and then execute tasks with fixed delay after completion of the previous task.","Let’s do some changes to call scheduleWithFixedDelay in ScheduledThreadPoolMain.","package org.arpit.java2blog;","import java.util.Date;","import java.util.concurrent.Executors;","import java.util.concurrent.ScheduledExecutorService;","import java.util.concurrent.TimeUnit;","public class ScheduledThreadPoolMain {","/**"," * @param args"," * @throws InterruptedException"," */","public static void main(String[] args) throws InterruptedException {","System.out.println('Current Time = '+new Date());","// Created ScheduledThreadPoolExecutor object","ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);","for(int i=1; i<=3; i++){","Thread.sleep(2000);","RunnableTask task = new RunnableTask('Task '+i);","scheduledThreadPool.scheduleWithFixedDelay(task,5,10,TimeUnit.SECONDS);","}","// Adding some delay","Thread.sleep(30000);","scheduledThreadPool.shutdown();","while(!scheduledThreadPool.isTerminated()){","//wait for all tasks to finish","}","System.out.println('Completed all threads');","}","}","Current Time = Fri May 19 00:20:39 IST 2017","Current Time = Fri May 19 00:50:53 IST 2017","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:51:00 IST 2017","pool-1-thread-2 Start Time for Task 2 Fri May 19 00:51:02 IST 2017","pool-1-thread-3 Start Time for Task 3 Fri May 19 00:51:04 IST 2017","pool-1-thread-1 End Time for Task 1 Fri May 19 00:51:05 IST 2017","pool-1-thread-2 End Time for Task 2 Fri May 19 00:51:07 IST 2017","pool-1-thread-3 End Time for Task 3 Fri May 19 00:51:09 IST 2017","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:51:15 IST 2017","pool-1-thread-2 Start Time for Task 2 Fri May 19 00:51:17 IST 2017","pool-1-thread-3 Start Time for Task 3 Fri May 19 00:51:19 IST 2017","pool-1-thread-1 End Time for Task 1 Fri May 19 00:51:20 IST 2017","pool-1-thread-2 End Time for Task 2 Fri May 19 00:51:22 IST 2017","pool-1-thread-3 End Time for Task 3 Fri May 19 00:51:24 IST 2017","Completed all threads","If Observe the output carefully:","pool-1-thread-1 End Time for Task 1 Fri May 19 00:51:05 IST 2017","pool-1-thread-1 Start Time for Task 1 Fri May 19 00:51:15 IST 2017","Once task 1 ended, next task scheduled after delay of 10 secs which have provided in scheduleWithFixedDelay method.","that’s all about Java ScheduledThreadPoolExecutor Example."],
							"id": 61}, 
                        {"name": "Java ExecutorService example using Callable and Future",
							"book": ["Callable interface represents a thread that can return a value. It is very much similar to Runnable interface except that it can return a value. Callable interface can be used to compute status or results that can be returned to invoking thread. For example: Let’s say you want to perform factorial and square of some numbers, you can do it concurrently using callable interface which will return value too. Callable defines only one method as below","public interface Callable {","V call() throws Exception;","}","You can define the task which you want to perform inside call method. If it executes successfully, call method will return the result else it must throw an exception. You can use ExecutorService’s submit to execute Callable task. Let’s see Signature of submit method in ExecutorService.","Future submit(Callable task);","If you notice, return type of submit method is Future.","Future is generic interface that represents value which will be returned by callable interface. As callable will return value in some future time, name seems suitable here.","There are two methods to get actual value from Future.","get() : When this method is called, thread will wait for result indefinitely.","V get(long timeout, TimeUnit unit) : When this method is called, thread will wait for result only for specified time.","Example:","This program will demonstrate use of Callable and Future. We will create one callable for calculation of square and one callable for factorial. We will submit four tasks to ExecutorService for calculation of square and factorial of 20 and 25. This program will demonstrate how can you make use of Callable and Future to execute it concurrently.","Create class called PowerCalc which implements Callable interface.","package org.arpit.java2blog;","import java.util.concurrent.Callable;","public class PowerCalc implements Callable{","private double number;"," PowerCalc(double number)","public Double call() throws Exception {","{","this.number=number;"," }"," @Override","System.out.println('Calculating Square with '+Thread.currentThread().getName());","Thread.sleep(2000);","return Math.pow(number, number);"," }","}","Create another class called FactorialCalc which implements Callable interface.","package org.arpit.java2blog;","import java.util.concurrent.Callable;","public class FactorialCalc implements Callable {","private double number;"," FactorialCalc(double number) {","public Double call() throws Exception {","this.number = number;"," }"," @Override","System.out.println('Calculating factorial with '+Thread.currentThread().getName());","Thread.sleep(5000);","double fact = 1;","for (int i = 2; i <= number; i++) {","fact *= i;","}","return fact;"," }","}","Now create a main classed named FutureCallableMain.java.","package org.arpit.java2blog;","import java.util.concurrent.ExecutionException;","import java.util.concurrent.ExecutorService;","import java.util.concurrent.Future;","import java.util.concurrent.Executors;","public class FutureCallableMain {","ExecutorService es=Executors.newFixedThreadPool(4);","public static void main(String[] args) {","System.out.println('Start : ');","Future powerFuture20;","powerFuture20=es.submit(new PowerCalc(20));","Future factorialFuture20;","Future powerFuture25;","Future factorialFuture25;","factorialFuture25=es.submit(new FactorialCalc(25));","factorialFuture20=es.submit(new FactorialCalc(20));","powerFuture25=es.submit(new PowerCalc(25));","try {","System.out.println('Square of '+25+' : '+powerFuture25.get());","System.out.println('Square of '+20+' : '+powerFuture20.get());","System.out.println('Factorial of '+20+' : '+factorialFuture20.get());","es.shutdown();","System.out.println('Factorial of '+25+' : '+factorialFuture25.get());","} catch (InterruptedException | ExecutionException e) {","e.printStackTrace();","} ","System.out.println('Done');"," }","}","When you run above program, you will get below output:","Start : ","Calculating Square with pool-1-thread-1","Calculating factorial with pool-1-thread-2","Calculating Square with pool-1-thread-3","Square of 20 : 1.048576E26","Calculating factorial with pool-1-thread-4","Factorial of 20 : 2.43290200817664E18","Done","Square of 25 : 8.881784197001253E34","Factorial of 25 : 1.5511210043330986E25","As you can see, we are able to execute 4 tasks concurrently which return square and Factorial of 20 and 25."],
							"id": 62}, 
                        {"name": "Java FutureTask example",
							"book": ["In this tutorial, we will see about Java FutureTask example.","FutureTask class has been introduced in JDK 5 with Executor Framework. FutureTask class is the concrete implementation of the Future object and provides methods for start and cancel the task.It also provides method to see if the computation is done or not. We can query FutureTask object and get the result of computation.","If we call get method on FutureTask object, it is blocking call and returns once the computation is done.","Let’s understand more with the example.","Java FutureTask example:","Let’s create a very simple example.","Step 1: Create a Callable task named “MultiplyingTask.java”.","package org.arpit.java2blog;","import java.util.concurrent.Callable;","public class MultiplyingTask implements Callable{","int a;","int b;","long sleepTime;","public MultiplyingTask(int a, int b, long sleepTime) {","this.a=a;","this.b=b;","this.sleepTime=sleepTime;","}","@Override","public Integer call() throws Exception {","Thread.sleep(sleepTime);","return a*b;","}","}","Step 2: Create a class named “FutureTaskMain”. This will be our main class.","package org.arpit.java2blog;","import java.util.concurrent.ExecutionException;","import java.util.concurrent.ExecutorService;","import java.util.concurrent.Executors;","import java.util.concurrent.FutureTask;","public class FutureTaskMain {","public static void main(String[] args) {","MultiplyingTask multiplyingTask1= new MultiplyingTask(10,20,2000l);","MultiplyingTask multiplyingTask2= new MultiplyingTask(20,40,4000l);","FutureTask<Integer> futureTask1=new FutureTask<>(multiplyingTask1);","FutureTask<Integer> futureTask2=new FutureTask<>(multiplyingTask2);","ExecutorService executor = Executors.newFixedThreadPool(2);","executor.execute(futureTask1);","executor.execute(futureTask2);","while(true)","{","try {","if(!futureTask1.isDone())","{","System.out.println('FutureTask1 output='+futureTask1.get());","}","if(!futureTask2.isDone())","{","System.out.println('Waitng for futureTask2 for completion');","System.out.println('FutureTask2 output='+futureTask2.get());","}","if(futureTask1.isDone() && futureTask2.isDone())","{","System.out.println('Completed both the FutureTasks, shutting down the executors');","executor.shutdown();","return;","}","}","catch (InterruptedException e) {","e.printStackTrace();","} catch (ExecutionException e) {","e.printStackTrace();","}","}","}","}","Let’s run above program to check the output:","FutureTask1 output=200","Waitng for futureTask2 for completion","FutureTask2 output=800","Completed both the future task, shutting down the executors","Explanation:","1.Create two callable task named multiplyingTask1 and multiplyingTask2. Please note that we have given sleep time as 2000 for multiplyingTask1 and 4000 for multiplyingTask2 so multiplyingTask2 will take more time than multiplyingTask1.","2.Created two FutureTask objects named futureTask1 and futureTask2 by passing multiplyingTask1 and multiplyingTask2 respectively.","3.Put an infinite loop condition with while(true)","4 !futureTask1.isDone() checks for completion of futureTask1, if not done yet, we have called futureTask1.get(), as get method is blocking operation, current thread will wait for futureTask1 to complete.","5 Once futureTask1 is done, we check !futureTask2.isDone() and above step is repeated for futureTask2.","6 Once both the task i.e. futureTask1 and futureTask2 are done, we call shutdown() method on executors and return from it.","That’s all about Java FutureTask example."],
							"id": 63}]
                },
                {
                    "name": "Chapter 7",
                    "description": "Java Concurrency util",
                    "content": [
						{"name": "ConcurrentHashMap in java",
							"book": ["ConcurrentHashMap was introduced in Java 5 with other concurrency utils such as CountDownLatch, CyclicBarrier and BlockingQueue.","ConcurrentHashMap in java is very similar to HashTable but it provides better concurrency level.","You might know , you can synchonize HashMap using Collections.synchronizedMap(Map). So what is difference between ConcurrentHashMap and Collections.synchronizedMap(Map)In case of Collections.synchronizedMap(Map), it locks whole HashTable object but in ConcurrentHashMap, it locks only part of it. You will understand it in later part.","Another difference is that ConcurrentHashMap will not throw ConcurrentModification exception if we try to modify ConcurrentHashMap while iterating it.","Let’s take a very simple example. I have a Country class, we are going to use Country class object as key and its capital name(string) as value. Below example will help you to understand, how these key value pair will be stored in ConcurrentHashMap.","ConcurrentHashMap in java example:","1. Country.java ","package org.arpit.java2blog;","public class Country {"," String name;"," long population;"," public Country(String name, long population) {","super();","this.name = name;","this.population = population;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public long getPopulation() {","return population;"," }"," public void setPopulation(long population) {","this.population = population;"," }","@Override","public int hashCode() {"," final int prime = 31;"," int result = 1;"," result = prime * result + ((name == null) ? 0 : name.hashCode());"," return result;","}","@Override"," public boolean equals(Object obj) {","Country other = (Country) obj;","if (name.equalsIgnoreCase((other.name)))","return true;","return false;"," }","}","2. ConcurrentHashMapStructure.java(main class)","import java.util.HashMap;","import java.util.Iterator;","public class ConcurrentHashMapStructure {","/**","* @author Arpit Mandliya","*/","public static void main(String[] args) {","Country india=new Country('India',1000);","Country japan=new Country('Japan',10000);","Country france=new Country('France',2000);","Country russia=new Country('Russia',20000);","ConcurrentHashMap<country,String> countryCapitalMap=new ConcurrentHashMap<country,String>();","countryCapitalMap.put(india,'Delhi');","countryCapitalMap.put(japan,'Tokyo');","countryCapitalMap.put(france,'Paris');","countryCapitalMap.put(russia,'Moscow');","Iterator countryCapitalIter=countryCapitalMap.keySet().iterator();//put debug point at this line","while(countryCapitalIter.hasNext())","{","Country countryObj=countryCapitalIter.next();","String capital=countryCapitalMap.get(countryObj);","System.out.println(countryObj.getName()+'----'+capital);","}","}","}","Now put debug point at line 23 and right click on project->debug as-> java application. Program will stop execution at line 23 then right click on countryCapitalMap then select watch.","1.There is an Segment[] array called segments which has size 16.","2.It has two more variable called segmentShift and segmentMask.","3.This segments stores Segment class’s object. ConcurrentHashMap class has a inner class called Segment/**","* Segments are specialized versions of hash tables.This","* subclasses from ReentrantLock opportunistically, just to","* simplify some locking and avoid separate construction.","*/","static final class Segment<K,V> extends ReentrantLock implements Serializable {"," /**","* The per-segment table.","*/","transient volatile HashEntry<K,V>[] table;","// other methods and variables","}","static final class HashEntry<K,V> {","final K key;","final int hash;","volatile V value;","final HashEntry<K,V> next;","}","When we say, ConcurrentHashMap locks only part of it.It actually locks a Segment. Soif two threads arewriting different segments in same ConcurrentHashMap, it allows write operation without any conflicts.","So Segments are only for write operations. In case of read operation, it allows full concurrency and provides most recently updated value using volatile variables.","Now as you understood internal structure of ConcurrentHashMap, it will be easier for you to understand put function.","Concept of ConcurrencyLevel:","While creating a ConcurrentHashMap object, you can pass ConcurrencyLevel in the constructor. ConcurrencyLevel defines”Estimated number of threads going to write to the ConcurrentHashMap”. Default ConcurrencyLevel is 16. That is why, we got 16 Segments objects in above created ConcurrentHashMap.","Actual number of Segment will be equal to next power of two defined in ConcurrencyLevel.","For example:","Lets say you have defined ConcurrencyLevel as 5, so 8 Segments object will be createdas 8=2^3 so 3 higher bits of Key will be used to find index of the segment","Another example: You want 10 threads should be able to access ConcurrentHashMap concurrently, so you will defineConcurrencyLevel as 10 , So 16 Segments will be created as 16=2^4 so 4 higher bits of Key will be used to find index of the segment","put Entry:","Code for putEntry is as follows:","/**","* Maps the specified key to the specified value in this table.","* Neither the key nor the value can be null.","*","* The value can be retrieved by calling the <tt>get</tt> method","* with a key that is equal to the original key.","*","* @param key key with which the specified value is to be associated","* @param value value to be associated with the specified key","* @return the previous value associated with <tt>key</tt>, or","*<tt>null</tt> if there was no mapping for <tt>key</tt>","* @throws NullPointerException if the specified key or value is null","*/","public V put(K key, V value) {","if (value == null)","throw new NullPointerException();","int hash = hash(key.hashCode());","return segmentFor(hash).put(key, hash, value, false);","}"," /**","* Returns the segment that should be used for key with given hash","* @param hash the hash code for the key","* @return the segment","*/","final Segment segmentFor(int hash) {","return segments[(hash >>> segmentShift) & segmentMask];","}"," // Put method in Segment:"," V put(K key, int hash, V value, boolean onlyIfAbsent) {","lock();","try {","int c = count;","if (c++ > threshold) // ensure capacity","rehash();","HashEntry[] tab = table;","int index = hash & (tab.length - 1);","HashEntry first = tab[index];","HashEntry e = first;","while (e != null && (e.hash != hash || !key.equals(e.key)))","e = e.next;","V oldValue;","if (e != null) {","oldValue = e.value;","if (!onlyIfAbsent)","e.value = value;","}","else {","oldValue = null;","++modCount;","tab[index] = new HashEntry(key, hash, first, value);","count = c; // write-volatile","}","return oldValue;","} finally {","unlock();","}","}","When we add any key value pair to ConcurrentHashMap, following steps take place:","1.In ConcurrentHashMap, key can not be null. Key’s hashCode method is used to calculate hash code","2.Key ‘s HashCode method may be poorly written, so java developers have added one more method hash(Similar to HashMap) , another hash() function is applied and hashcode is calculated.","3.Now we need to find index of segment first, For finding a segment for given key, above SegmentFor method is used.","4.After getting Segment, we use segment’s put method.While putting key value pair in Segment, it acquires lock, so no other thread can enter in this block and then it finds index in HashEntry array using hash &(tab.length-1).","5.If you closely observe, Segment’s put method is similar to HashMap’s put method.","putIfAbsent:","You want to put element in ConcurrentHashMap only when if it does not have Key already otherwise return old value. This can be written as:if (map.get(key)==null)","return map.put(key, value);","else","return map.get(key);","Above operation is atomic if you use putIfAbsent method. This may be required behaviour. Let’s understand with help of an example:","1) Thread 1 is putting value in ConcurrentHashMap.","2) At same time, Thread 2 is trying to read(get) value from ConcurrentHashMap and it may return null So it may override whatever thread 1 has put in ConcurrentHashMap.","Above behavior may not be required so ConcurrentHashMap has putIfAbsent method./*","* {@inheritDoc}","*","* @return the previous value associated with the specified key,","*or <tt>null</tt> if there was no mapping for the key","* @throws NullPointerException if the specified key or value is null","*/","public V putIfAbsent(K key, V value) {","if (value == null)","throw new NullPointerException();","int hash = hash(key.hashCode());","return segmentFor(hash).put(key, hash, value, true);","}","get Entry:","/**","* Returns the value to which the specified key is mapped,","* or {@code null} if this map contains no mapping for the key.","*","*","More formally, if this map contains a mapping from a key","* {@code k} to a value {@code v} such that {@code key.equals(k)},","* then this method returns {@code v}; otherwise it returns","* {@code null}.(There can be at most one such mapping.)","*","* @throws NullPointerException if the specified key is null","*/","public V get(Object key) {","int hash = hash(key.hashCode());","return segmentFor(hash).get(key, hash);","}","/* Specialized implementations of map methods */","// get method in Segment:","V get(Object key, int hash) {","if (count != 0) { // read-volatile","HashEntry<K,V> e = getFirst(hash);","while (e != null) {","if (e.hash == hash && key.equals(e.key)) {","V v = e.value;","if (v != null)","return v;","return readValueUnderLock(e); // recheck","}","e = e.next;","}","}","return null;","}","Getting value from ConcurrentHashMap is straight forward.","1.Calculate hash using key ‘s Hashcode","2.Use segmentFor to get index of Segment.","3 Use Segment’s get function to get value corresponding to the key.","4 If it does not find value in ConcurrentHashMap ,it locks the Segment and tries again to get the value.","Best Practice:","We should not use default constructor of ConcurrentHashMap if we require low level of Concurrency level as default ConcurrencyLevel is 16and it will create 16 Segments by default.","We should use fully parameterized constructor:","ConcurrentHashMap(int initialCapacity,float loadFactor, int concurrencyLevel) ","In above constructor, initialCapacity and loadFactor is same as HashMap and concurrencyLevel is same as we have defined above.","So if you require only two threads that can write concurrently, you may initialise ConcurrentHashMap as:","ConcurrentHashMap ch=new ConcurrentHashMap(16,0.75f,2);","ConcurrentHashMap will perform much better if you have few write threads and large number of read threads.","That’s all aboutConcurrentHashMap in java."],
							"id": 64}, 
                        {"name": "CountDownLatch in java",
							"book": ["As per java docs, CountDownLatch is synchronisation aid that allow one or more threads to wait until set of operations being performed in other threads completes.","So in other words, CountDownLatch waits for other threads to complete set of operations.","CountDownLatch is initialized with count. Any thread generally main threads calls latch.awaits() method, so it will wait for either count becomes zero or it’s interrupted by another thread and all other thread need to call latch.countDown() once they complete some operation.","So count is reduced by 1 whenever latch.countDown() method get called, soif count is n that means count can be used as n threads have to complete some action or some action have to be completed n times.","One of disadvantage of CountDownLatch is you can not reuse it once count is zero. For that ,you need to use CyclicBarrier.","For example:","Below diagram will make you clear. It is an example how CountDownLatch can be used.","Let’s say, you are developing an application, so it’s main thread has to wait for other services (threads) such as UI initialization, database initialization and logging services to get completed.So Countdownlatch will be initialized with 3 and main thread will call await()method and each services will call latch.countDown() once they are about to complete.","Program :","Create a class named UIInitialization.java. This thread will execute latch.countDown() once it completes.","package org.arpit.java2blog.thread;","import java.util.concurrent.CountDownLatch;","public class UIInitialization implements Runnable{"," CountDownLatch latch;"," UIInitialization(CountDownLatch latch)"," {","this.latch=latch;"," }"," @Override"," public void run() {","System.out.println('Initializing UI');","try {","Thread.sleep(3000);","} catch (InterruptedException e) {","// TODO Auto-generated catch block","e.printStackTrace();","}","System.out.println('Done with UI Initialization');","latch.countDown();"," }","}","Create a class named LoggingInitialization.java. This thread will execute latch.countDown() once it completes.","package org.arpit.java2blog.thread;","import java.util.concurrent.CountDownLatch;","public class LoggingInitialization implements Runnable{"," CountDownLatch latch;"," LoggingInitialization(CountDownLatch latch)"," {","this.latch=latch;"," }"," @Override"," public void run() {","System.out.println('Initializing Logging');","try {","Thread.sleep(2000);","} catch (InterruptedException e) {","// TODO Auto-generated catch block","e.printStackTrace();","}","System.out.println('Done with Logging Initialization');","latch.countDown();"," }","}","Create a class named DatabaseInitialization.java. This thread will execute latch.countDown() once it completes.","package org.arpit.java2blog.thread;","import java.util.concurrent.CountDownLatch;","public class DatabaseInitialization implements Runnable{"," CountDownLatch latch;"," DatabaseInitialization(CountDownLatch latch)"," {","this.latch=latch;"," }"," @Override"," public void run() {","System.out.println('Initializing Database');","try {","Thread.sleep(5000);","} catch (InterruptedException e) {","// TODO Auto-generated catch block","e.printStackTrace();","}","System.out.println('Done with database Initialization');","latch.countDown();"," }","}","Create a class CountDownLatchMain.java. This will be main thread which will wait for UIInitialization, DatabaseInitialization and LoggingInitialization.","package org.arpit.java2blog.thread;","import java.util.concurrent.CountDownLatch;","public class CountDownLatchMain {"," public static void main(String[] args) {","try {","CountDownLatch latch = new CountDownLatch(3);","// Initializing three dependent thread i.e. UI, database and logging","UIInitialization uiInitialization = new UIInitialization(latch);","Thread uiThread = new Thread(uiInitialization);","DatabaseInitialization dataBaseInitialization = new DatabaseInitialization(latch);","Thread databaseThread = new Thread(dataBaseInitialization);","LoggingInitialization loggingInitialization = new LoggingInitialization(latch);","Thread loggingThread = new Thread(loggingInitialization);","uiThread.start();","databaseThread.start();","loggingThread.start();","// Main thread will wait until above threads get completed","latch.await();","System.out.println('Initialization has been completed, main thread can proceed now');","} catch (InterruptedException e) {","e.printStackTrace();","}"," }","}","When you run above program, you will get following output:","Initializing UI","Initializing Database","Initializing Logging","Done with Logging Initialization","Done with UI Initialization","Done with database Initialization","Initialization has been completed, main thread can proceed now","Why not use join instead of CountDownLatch:","As you might know you can use join for this situation too but you have to manually handles it. Most of people use ExecutorService for handling threads now and CountDownLatch works good with it. As CountDownLatch is task oriented , you can submit multiple tasks to thread pool and CountDownLatch will ensure execution of original thread once set of otherdependent threads get completed."],
							"id": 65}, 
                        {"name": "Java CyclicBarrier Example",
							"book": ["In this post, we will see about CyclicBarrier in java. CyclicBarrier was introduced in Java 5 with other concurrency utils such as CountDownLatch, ConcurrentHashMap and BlockingQueue.","CyclicBarrier is synchronized aid which allows set of threads to wait for each other at common barrier points.It is called cyclic because it can be reused once waiting threads are released.","For example:","Let’s say you have 3 threads, you want all threads(terms as parties) to reach a common point and then only they should proceed ahead.In this case, you can use CyclicBarrier with 3 parties and once 3 threads reach a common point, you can call an event which will implement runnable interface and Three threads will be released.","Difference between CountDownLatch and CyclicBarrier","The major difference between CyclicBarrier and CoundDownLatch is that CyclicBarrier can be reused.You can not use CountDownLatch once used. You can read more differences between CountDownLatch and CyclicBarrier.","Java CyclicBarrier example:","Step 1: Create a file named “RunnableTask.java” in package .src.org.arpit.java2blog","package org.arpit.java2blog;","import java.util.concurrent.BrokenBarrierException;","import java.util.concurrent.CyclicBarrier;","public class RunnableTask implements Runnable{","CyclicBarrier cyclicBarrier;","long sleepTime;","RunnableTask(CyclicBarrier cyclicBarrier,long sleepTime){","this.cyclicBarrier=cyclicBarrier;","this.sleepTime=sleepTime;","}","@Override","public void run() {","try {","Thread.sleep(sleepTime);","System.out.println(Thread.currentThread().getName() +","' is waiting for '+(cyclicBarrier.getParties()-cyclicBarrier.getNumberWaiting()-1)+ ","' other threads to reach common barrier point');","/*"," * when3 parties will call await() method (i.e. common barrier point)"," * CyclicBarrrierEvent will be triggered and all waiting threads will be released."," */","cyclicBarrier.await();","} catch (InterruptedException e) {","e.printStackTrace();","} catch (BrokenBarrierException e) {","e.printStackTrace();","}","System.out.println('As '+cyclicBarrier.getParties()+ ' threads have reached common barrier point '","+ Thread.currentThread().getName() +","' has been released');","}","}","This is a Runnable task which will be executed by each thread.","Step 2: Create a file named “CyclicBarrierFinishEvent.java” in package .src.org.arpit.java2blog","package org.arpit.java2blog;","public class CyclicBarrierFinishEvent implements Runnable{","public void run() {","System.out.println('As 3 threads have reached common barrier point '","+ ', CyclicBarrrierFinishEvent has been triggered');","System.out.println('You can update shared variables if any');","}","}","CyclicBarrierFinishEvent will be called when 3 parties (Initialized with CyclicBarrier object) reaches to a common barrier point.","Step 3: Create a file named “CyclicBarrierMain.java” in package .src.org.arpit.java2blog","package org.arpit.java2blog;","import java.util.concurrent.CyclicBarrier;","/** @author Arpit Mandliya*/","public class CyclicBarrierMain {","public static void main(String[] args) {","/*"," * Create CountDownLatch with 3 parties, when all 3 parties"," * will reach common barrier point CyclicBarrrierFinishEvent will be"," * triggered "," */","CyclicBarrier cyclicBarrier=new CyclicBarrier(3 ,new CyclicBarrierFinishEvent());","RunnableTask runnableTask1=new RunnableTask(cyclicBarrier,1000);","RunnableTask runnableTask2=new RunnableTask(cyclicBarrier,2000);","RunnableTask runnableTask3=new RunnableTask(cyclicBarrier,3000);","//Create and start 3 threads","new Thread(runnableTask1,'Thread-1').start();","new Thread(runnableTask2,'Thread-2').start();","new Thread(runnableTask3,'Thread-3').start();","/*","* We are reusing cyclic barrier using below threads","* */","RunnableTask runnableTask4=new RunnableTask(cyclicBarrier,4000);","RunnableTask runnableTask5=new RunnableTask(cyclicBarrier,5000);","RunnableTask runnableTask6=new RunnableTask(cyclicBarrier,6000);","// Create and start 3 more threads","new Thread(runnableTask4,'Thread-4').start();","new Thread(runnableTask5,'Thread-5').start();","new Thread(runnableTask6,'Thread-6').start();","}","}","Let’s run the program, then we will understand the output:","Thread-1 is waiting for 2 other threads to reach common barrier point","Thread-2 is waiting for 1 other threads to reach common barrier point","Thread-3 is waiting for 0 other threads to reach common barrier point","As 3 threads have reached common barrier point ,CyclicBarrrierFinishEvent has been triggered","You can update shared variables if any","As 3 threads have reached common barrier point Thread-3 has been released","As 3 threads have reached common barrier point Thread-1 has been released","As 3 threads have reached common barrier point Thread-2 has been released","Thread-4 is waiting for 2 other threads to reach common barrier point","Thread-5 is waiting for 1 other threads to reach common barrier point","Thread-6 is waiting for 0 other threads to reach common barrier point","As 3 threads have reached common barrier point ,CyclicBarrrierFinishEvent has been triggered","You can update shared variables if any","As 3 threads have reached common barrier point Thread-6 has been released","As 3 threads have reached common barrier point Thread-4 has been released","As 3 threads have reached common barrier point Thread-5 has been released","That’s all about Java CyclicBarrier example."],
							"id": 66}, 
                        {"name": "Java Semaphore example",
							"book": ["Last updated : March 20th, 2017","1 Comment","Java Semaphore example","Previous","Next","In this tutorial, we are going to see about Semaphore in java.","Semaphore is a class in java.util.concurrent package introduced in JDK 5. Semaphore basically maintains a set of permits, so there are two methods which are mainly used for semaphore.","1.acquire","2.release","acquire() method is used to get a permit and if no. of permits reaches max allowed permits then thread has to wait to get permit which will be released by some other thread by calling release() method.","Semaphores are generally used to restrict the number of threads to access resources.","Real time examples:","*emaphores can be used to restrict number of database connections at a time","*Semaphores can also be used to bound any collection.","Example:","We will create a class BoundedArrayList which can have only 5 elements at a time. If any thread wants to add more element to the list,thread will have to wait until any other thread remove elements from the list.","When we add an element to the list, we will call semaphore.acquire and when we remove an element from the list, we will call semaphore.release.","Create a class called BoundedArrayList.","package org.arpit.java2blog.bean;","import java.util.ArrayList;","import java.util.Collections;","import java.util.List;","import java.util.concurrent.Semaphore;","public class BoundedArrayList {"," private final Semaphore semaphore;"," private List arraylist;"," BoundedArrayList(int limit) {"," this.arraylist = Collections.synchronizedList(new ArrayList());"," semaphore = new Semaphore(limit);"," }"," /*"," * Add element to the list and call semaphore.acquire method"," * */"," public boolean add(T t) throws InterruptedException {"," boolean added = false;"," semaphore.acquire();"," try {"," added = arraylist.add(t);"," return added;"," } finally {"," if (!added)"," semaphore.release();"," }"," }"," /*"," * remove element from the list and call semaphore.release method"," * */"," public boolean remove(T t) {"," boolean wasRemoved = arraylist.remove(t);"," if (wasRemoved)"," semaphore.release();"," return wasRemoved;"," }"," public void remove(int index) {"," arraylist.remove(index);"," semaphore.release();"," }"," public List getArraylist() {"," return arraylist;"," }"," public Semaphore getSemaphore() {"," return semaphore;"," }","}","Create a main class BoundedArrayListMain.java","package org.arpit.java2blog.bean;","public class BoundedArrayListMain {"," public static void main(String[] args) throws InterruptedException {","final BoundedArrayList ba = new BoundedArrayList(5);","Runnable runnable1 = new Runnable() {","@Override","public void run() {","try {","ba.add('John');","ba.add('Martin');","ba.add('Adam');","ba.add('Prince');","ba.add('Tod');","System.out.println('Available Permits : '+ba.getSemaphore().availablePermits());","ba.add('Tony');","System.out.println('Final list: '+ba.getArraylist());","} catch (InterruptedException ie) {","}","}","};","Runnable runnable2 = new Runnable() {","@Override","public void run() {","try {","System.out.println('Before removing elements: '+ ba.getArraylist());","Thread.sleep(5000);","ba.remove('Martin');","ba.remove('Adam');","} catch (InterruptedException e) {","e.printStackTrace();","}","}","};","Thread t1 = new Thread(runnable1);","Thread t2 = new Thread(runnable2);","t1.start();","t2.start();"," }","}","When you run above program, you will get below output:","Available Permits : 0","Before removing elements: [John, Martin, Adam, Prince, Tod]","Final list: [John, Prince, Tod, Tony]","Explanation:","1.We have created two thread t1 and t2.","2.t1 and t2 both share common list reference ba.","3.When t1 adds 5 elements to the list, available permits became 0.","4.Now t1 waits for another thread to remove elements, so that semaphore have some available permits.","5.Another thread t2 removes elements from the list after waiting for 5 secs.","6.Once t2 removes elements, t1 adds “Tony” to list."],
							"id": 68}, 
                        {"name": "BlockingQueue in java",
							"book": ["BlockingQueue is introduced in java with concurrent package with ConcurrentHashMap. It is thread safe queue to put and take elements from it.","BlockingQueue is special type of queue which is used when one thread produces object and another thread consumes it.","Producer thread will keep inserting objects to queue until it reaches upper limit. Once this queue size has reached that limit then producer thread will get blocked and won’t able to put objects into queue until consumer thread starts consuming it.","Similarly consumer thread keep taking objects from queue until queue becomes empty. Once queue becomes empty, consumer thread get blocked and waits for producer threads for inserting objects into the queue.","If you put null to BlockingQueue, it will NullPointerException at run time.","It has two important methods","put : producer thread put objects into the queue until it reaches to the limit and waits for consumer thread to take out object after that.","take : consumer thread take out object from the queue until queue becomes empty. Once queue is empty, it waits for producer thread to put object into the queue.","Example:","In this example, we will see how to use BlockingQueue.","Create Producer thread which will create objects which will be consumed by Consumer thread.","1. Producer.java","package org.arpit.java2blog;","import java.util.concurrent.BlockingQueue;","public class Producer implements Runnable {"," BlockingQueue queue=null;"," public Producer(BlockingQueue queue) {","super();","this.queue = queue;"," }"," @Override"," public void run() {","for (int i = 1; i <=50; i++) {","System.out.println('Produced item '+i);","try {","queue.put('item '+i);","} catch (InterruptedException e) {","e.printStackTrace();","}","}"," }","}","Create Consumer thread which will consume objects.","2. Consumer.java ","package org.arpit.java2blog;","import java.util.concurrent.BlockingQueue;","public class Consumer implements Runnable {"," BlockingQueue queue=null;"," public Consumer(BlockingQueue queue) {","super();","this.queue = queue;"," }"," @Override"," public void run() {","while(true)","{","try {","System.out.println('Consumed '+queue.take());","} catch (InterruptedException e) {","// TODO Auto-generated catch block","e.printStackTrace();","}","}"," }","}","Create main class which will start above two threads.","3. BlockingQueueMain.java ","package org.arpit.java2blog;","import java.util.concurrent.ArrayBlockingQueue;","import java.util.concurrent.BlockingQueue;","public class BlockingQueueMain {"," public static void main(String args[])"," {","BlockingQueue queue=new ArrayBlockingQueue(10);","Producer producer=new Producer(queue);","Consumer consumer=new Consumer(queue);","new Thread(producer).start();","new Thread(consumer).start();"," }","}","When you run above program , you will get following output:","Produced item 1","Produced item 2","Consumed item 1","Produced item 3","Consumed item 2","Produced item 4","Consumed item 3","Produced item 5","Consumed item 4","Produced item 6","Consumed item 5","Produced item 7","Consumed item 6","Produced item 8","Consumed item 7","Produced item 9","Consumed item 8","Produced item 10","..."],
							"id": 69}, 
                        {"name": "Java Exchanger example",
							"book": ["Exchanger class is introduced with java 1.5 with other classes such ConcurrentHashMap, CountDownLatch, Semaphores.","Exchanger class is used to exchange object between two threads. Exchanger simply waits until two separate threads calls exchange method, when it happens, it exchanges data supplied by threads.Two threads can pair and swap objects between them. Exchanger class may be useful in genetic algorithms or pipeline design.","It has two overloaded version of exchange method.","1).exchange(V x): It waits for another thread to arrive at exchange point and exchange object with that thread.","2).exchange(V x, long timeout, TimeUnit unit): It waits for another thread for specific time interval provided in the method and exchange object with that thread.","Let’s understand with help of example:","We have two threads i.e. Producer and Consumer and they will exchange Country objects. Producer will create Country objects and Consumer will return dummy country objects.","Let’s first create Country class. It just have one attribute called countryName.","package org.arpit.java2blog;","public class Country {"," private String countryName; "," public Country(String countryName) {"," super();"," this.countryName = countryName;"," }"," public String getCountryName() {"," return countryName;"," }","}","Now we will create main class called ExchangerExampleMain.java and it will have two other classes called Producer and Consumer which will implement runnable interface.","package org.arpit.java2blog;","import java.util.concurrent.Exchanger;","public class ExchangerExampleMain {","public static void main(String[] args) {","Exchanger exchanger = new Exchanger();","// Starting two threads","new Thread(new Producer(exchanger)).start();","new Thread(new Consumer(exchanger)).start();","}","}","class Producer implements Runnable {","Exchanger ex;","Producer(Exchanger ex){","this.ex = ex;","}","@Override","public void run() {","for(int i = 0; i < 2; i ++){","Country country=null ;","if(i==0)","country =new Country('India');","else","country =new Country('Bhutan');","try {","// exchanging with an dummy Country object","Country dummyCountry = ex.exchange(country);","System.out.println('Got country object from Consumer thread : '+dummyCountry.getCountryName());","} catch (InterruptedException e) {","System.out.println(e);","}","}","}","}","class Consumer implements Runnable {","Exchanger ex;","Consumer(Exchanger ex){","this.ex = ex;","}","@Override","public void run() {","for(int i = 0; i < 2; i ++){","try {","// Getting Country object from producer thread","// giving dummy country object in return","Country country = ex.exchange(new Country('Dummy'));","System.out.println('Got country object from Producer thread : '+country.getCountryName());","} catch (InterruptedException e) {","System.out.println(e);","}","}","}","}","When you run above program, you will get below output.","Got country object from Consumer thread : Dummy","Got country object from Producer thread : India","Got country object from Consumer thread : Dummy","Got country object from Producer thread : Bhutan","If you notice, producer has exchanged two country object (India and Bhutan) with consumer and got dummy country objects in return.","If you want to understand more realistic use of Exchanger. Producer and consumer may exchange buffers. When buffer is full, Producer will provide full buffer to consumer and Consumer will return empty buffer in return."],
							"id": 70}, 
                        {"name": "Java Timer example",
							"book": ["Timer is an utility class which can be used to schedule tasks on specific time or repeatedly.","Lets say, you are developing an banking application and there is need to process the data at 7 PM evening daily. You can easily schedule task using Timer class.","For creating a task, you need to extends TimerTask and Timer can be used to set time for the task.","TimerTask : It is task which will be executed at specific time.","Timer : It is utility class which is used to set time for the task.","Timer class is thread safe , so multiple threads can share one timer object. Timer class internally uses java.util.TaskQueue to manage task internally. Only one thread can execute timer task at a time.","For example:","You are executing task in every 5 secs but actual execution itself is taking 10 seconds, then subsequent task will be added to queue and as soon as current execution completes, it will notify and another thread will start executing the task.","Methods for scheduling task:","There are several methods in timer class that can be used to schedule.","For one time execution:","public void schedule(TimerTask task, long delay,long period)","For example:","// it will execute timer task after delay of 5 seconds","timer.schedule(new MyTimerTask(),5000);","For repeated execution:","public void schedule(TimerTask task,long delay)","For example:","// it will execute timer task in every 2 seconds after first delay of 1 second","timer.schedule(new MyTimerTask(),1000,2000);","For executing task at particular time: ","public void schedule(TimerTask task, Date time)","For example:","// Scheduling task at today : 23:13:00 PM","Calendar calendar = Calendar.getInstance();","calendar.set(Calendar.HOUR_OF_DAY, 23);","calendar.set(Calendar.MINUTE, 13);","calendar.set(Calendar.SECOND, 0);","Date time = calendar.getTime();","timer.schedule(new MyTimerTask(timer), time);","For executing task at particular time repeatedly: ","public void schedule(TimerTask task, Date firstTime, long period)","Example:","For one time exectution:","Create a class MyTimerTask.java","package org.arpit.java2blog.timer;","import java.util.Timer;","import java.util.TimerTask;","public class MyTimerTask extends TimerTask{"," Timer timer;"," public MyTimerTask(Timer timer) {","this.timer=timer;"," }"," @Override"," public void run() {","System.out.println('Executing timer task');","// to stop timer thread","timer.cancel();"," }","}","In above class, we are using timer.cancel() to stop the timer thread. When you call timer.cancel() method, it completes execution of current thread and discards all other threads which are in queue.","Create a class TimerMain.java.","package org.arpit.java2blog.timer;","import java.util.Timer;","public class TimerMain {"," public static void main(String[] args) {","// It will create new thread","Timer timer=new Timer();","//task will be scheduled after 5 sec delay","timer.schedule(new MyTimerTask(timer), 5000);"," }","}","When you run above program, you will get following output:","Executing timer task","For repeated execution:","Create a class MyTimerTask.java","package org.arpit.java2blog.timer;","import java.util.TimerTask;","public class MyTimerTask extends TimerTask{"," @Override"," public void run() {","System.out.println('Executing timer task on '+TimerMain.convertTimeToDateFormat(System.currentTimeMillis()));"," }","}","Create a class TimerMain.java.","package org.arpit.java2blog.timer;","import java.text.SimpleDateFormat;","import java.util.Date;","import java.util.Timer;","public class TimerMain {"," public static void main(String[] args) {","System.out.println('Timer tasks started on '+convertTimeToDateFormat(System.currentTimeMillis()));","System.out.println('**************************');","// It will create new thread","Timer timer=new Timer();","timer.schedule(new MyTimerTask(), 1000,2000);","// Stopping the timer thread after some time for example :12 secs.","try {","Thread.sleep(12000);","} catch (InterruptedException e) {","e.printStackTrace();","}","// you can call timer.cancel() or System.exit(0)","System.out.println('**************************');","System.out.println('Timer tasks finished on '+convertTimeToDateFormat(System.currentTimeMillis()));","System.exit(0);"," }"," public static String convertTimeToDateFormat(long milliseconds)"," {","SimpleDateFormat sdf = new SimpleDateFormat('MMM dd,yyyy HH:mm:ss');","Date resultdate = new Date(milliseconds);","return sdf.format(resultdate);"," }","}","When you run above program, you will get following output:","Timer tasks started on Aug 18,2015 22:48:22","**************************","Executing timer task on Aug 18,2015 22:48:23","Executing timer task on Aug 18,2015 22:48:25","Executing timer task on Aug 18,2015 22:48:27","Executing timer task on Aug 18,2015 22:48:29","Executing timer task on Aug 18,2015 22:48:31","Executing timer task on Aug 18,2015 22:48:33","**************************","Timer tasks finished on Aug 18,2015 22:48:34","For executing task at particular time:","Create a class MyTimerTask.java","package org.arpit.java2blog.timer;","import java.util.Timer;","import java.util.TimerTask;","public class MyTimerTask extends TimerTask{"," Timer timer;"," MyTimerTask(Timer timer)"," {","this.timer=timer;"," }"," @Override"," public void run() {","System.out.println('Executing timer task on '+TimerMain.convertTimeToDateFormat(System.currentTimeMillis()));","// to stop time thread","timer.cancel();"," }","}","Create a class TimerMain.java.","package org.arpit.java2blog.timer;","import java.text.SimpleDateFormat;","import java.util.Calendar;","import java.util.Date;","import java.util.Timer;","public class TimerMain {"," public static void main(String[] args) {","System.out.println('Timer tasks started on '+convertTimeToDateFormat(System.currentTimeMillis()));","System.out.println('**************************');","// It will create new thread","Timer timer=new Timer();","// Scheduling task at today : 23:13:00 PM","Calendar calendar = Calendar.getInstance();","calendar.set(Calendar.HOUR_OF_DAY, 23);","calendar.set(Calendar.MINUTE, 13);","calendar.set(Calendar.SECOND, 0);","Date time = calendar.getTime();","timer.schedule(new MyTimerTask(timer), time);"," }"," public static String convertTimeToDateFormat(long milliseconds)"," {","SimpleDateFormat sdf = new SimpleDateFormat('MMM dd,yyyy HH:mm:ss');","Date resultdate = new Date(milliseconds);","return sdf.format(resultdate);"," }","}","When you run above program, you will get following output:","Timer tasks started on Aug 18,2015 23:12:40","**************************","Executing timer task on Aug 18,2015 23:13:00"],
							"id": 71}]
                },
                {
                    "name": "Chapter 8",
                    "description": "Java Serialization",
                    "content": [
						{"name": "Serialization in java",
							"book": ["This is 1st part of java Serialization tutorial.","Java provides mechanism called serialization to persists java objects in a form of ordered or sequence of bytes that includes the object’s data as well as information about the object’s type and the types of data stored in the object.","So if we need to serialize any object then it can be read and deserialize it using object’s type and other information so we can retrieve original object.","Classes ObjectInputStream and ObjectOutputStream are high-level streams that contain the methods for serializing and deserializing an object.","ObjectOutputStream has many method for serializing object but commonly used method is","private void writeObject(ObjectOutputStream os) throws IOException","{ ","}","Similarly ObjectInputStream has","private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException","{","}","Need of Serialization in java?","Serialization is usually used when there is need to send your data over network or to store in files. By data I mean objects and not text.","Now the problem is your Network infrastructure and your Hard disk are hardware components that understand bits and bytes but not Java objects.","Serialization is the translation of Java object’s values/states to bytes to send it over network or to save it.On other hand,Deserialization is conversion of byte code to corresponding java objects.","Concept of serialVersionUID :","serialVersionUID is used to ensure that same class(That was used during Serialization) is loaded during Deserialization.serialVersionUID is used for version control of object.You can read more at serialVersionUID in java serialization","Lets take an example:","Create Employee.java in src->org.arpit.javapostsforlearning","1.Employee.java ","package org.arpit.javapostsforlearning;","import java.io.Serializable;","public class Employee implements Serializable{ ","private static final long serialVersionUID = 1L;","int employeeId;","String employeeName;","String department;","public int getEmployeeId() {","return employeeId;","}","public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;","}","public String getEmployeeName() {","return employeeName;","}","public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;","}","public String getDepartment() {","return department;","}","public void setDepartment(String department) {","this.department = department;","}","}","As you can see above,if you want to serialize any class then it must implement Serializable interface which is marker interface.","Marker interface in Java is interfaces with no field or methods or in simple word empty interface in java is called marker interface","Create SerializeMain.java in src->org.arpit.javapostsforlearning","2.SerializeMain.java","package org.arpit.javapostsforlearning;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectOutputStream;"," public class SerializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Employee emp = new Employee();","emp.setEmployeeId(101);","emp.setEmployeeName('Arpit');","emp.setDepartment('CS');","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}"," }","}","3.DeserializeMain.java","package org.arpit.javapostsforlearning;","import java.io.IOException;","import java.io.ObjectInputStream;","public class DeserializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Employee emp = null;","try","{","FileInputStream fileIn =new FileInputStream('employee.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","emp = (Employee) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Employee class not found');","c.printStackTrace();","return;","}","System.out.println('Deserialized Employee...');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getEmployeeName());","System.out.println('Department: ' + emp.getDepartment());"," }","}","4.Run it:","First run SerializeMain.java then DeserializeMain.java and you will get following output:","Deserialized Employee...","Emp id: 101","Name: Arpit","Department: CS","So we have serialize an employee object and then deserialized it.It seems very simple but it can be very complex when reference object,inheritance come into the picture.So we will see different cases one by one and how we can apply serialization in different scenarios.","Case 1-What if an object has a reference to other objects","We have seen very simple case of serialization,now what if it also a reference to other objects.How will it serialized then? will reference object will also get serialized?.Yes,You don’t have to explicitly serialize reference objects.When you serialize any object and if it contain any other object reference then Java serialization serialize that object’s entire object graph.","For example:Lets say,Employee now has reference to address object and Address can have reference to some other object(e.g.Home) then when you serialize Employee object all other reference objects such as address and home will be automatically serialized. Lets create Address classand add object of Address as a reference to above employee class.","Employee.java:","package org.arpit.javapostsforlearning;","import java.io.Serializable;","public class Employee implements Serializable{ "," private static final long serialVersionUID = 1L;"," int employeeId;"," String employeeName;"," String department;"," Address address;"," public int getEmployeeId() {","return employeeId;"," }"," public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;"," }"," public String getEmployeeName() {","return employeeName;"," }"," public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;"," }"," public String getDepartment() {","return department;"," }"," public void setDepartment(String department) {","this.department = department;"," }"," public Address getAddress() {","return address;"," }"," public void setAddress(Address address) {","this.address = address;"," }","}","Create Address.java in org.arpit.javapostsforlearning","Address.java:","package org.arpit.javapostsforlearning;","public class Address {"," int homeNo;"," String street;"," String city;"," public Address(int homeNo, String street, String city) {","super();","this.homeNo = homeNo;","this.street = street;","this.city = city;"," }"," public int getHomeNo() {","return homeNo;"," }"," public void setHomeNo(int homeNo) {","this.homeNo = homeNo;"," }"," public String getStreet() {","return street;"," }"," public void setStreet(String street) {","this.street = street;"," }"," public String getCity() {","return city;"," }"," public void setCity(String city) {","this.city = city;"," }","}","Create SerializeDeserializeMain.java in org.arpit.javapostsforlearning","SerializeDeserializeMain.java:","package org.arpit.javapostsforlearning;","import java.io.FileInputStream;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectInputStream;","import java.io.ObjectOutputStream;","public class SerializeDeserializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Employee emp = new Employee();","emp.setEmployeeId(101);","emp.setEmployeeName('Arpit');","emp.setDepartment('CS');","Address address=new Address(88,'MG road','Pune');","emp.setAddress(address);","//Serialize","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}","//Deserialize","emp = null;","try","{","FileInputStream fileIn =new FileInputStream('employee.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","emp = (Employee) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Employee class not found');","c.printStackTrace();","return;","}","System.out.println('Deserialized Employee...');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getEmployeeName());","System.out.println('Department: ' + emp.getDepartment());","address=emp.getAddress();","System.out.println('City :'+address.getCity());"," }","}","Run it :","When you run SerializeDeserializeMain.java.You will get following output","java.io.NotSerializableException: org.arpit.javapostsforlearning.Address","at java.io.ObjectOutputStream.writeObject0(Unknown Source)","at java.io.ObjectOutputStream.defaultWriteFields(Unknown Source)","at java.io.ObjectOutputStream.writeSerialData(Unknown Source)","at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source)","at java.io.ObjectOutputStream.writeObject0(Unknown Source)","at java.io.ObjectOutputStream.writeObject(Unknown Source)","We got exception what went wrong.I forgot to mention,Address class must also be serializable.So you have to make Address serializable by implement serialzable interface.","Address.java:","import java.io.Serializable;","public class Address implements Serializable{"," private static final long serialVersionUID = 1L;"," int homeNo;"," String street;"," String city;"," public Address(int homeNo, String street, String city) {","super();","this.homeNo = homeNo;","this.street = street;","this.city = city;"," } "," public int getHomeNo() {","return homeNo;"," }"," public void setHomeNo(int homeNo) {","this.homeNo = homeNo;"," }"," public String getStreet() {","return street;"," }"," public void setStreet(String street) {","this.street = street;"," }"," public String getCity() {","return city;"," }"," public void setCity(String city) {","this.city = city;"," }","}","Run again:","When you run again SerializeDeserializeMain.java.You will get following output","Deserialized Employee...","Emp id: 101","Name: Arpit","Department: CS","City :Pune","Case 2:What if you don’t have access to reference object’s source code(e.g you don’t have access to above Address class)","If you don’t have access to address class then how will you implement serializable interface in Address class.Is there any alternative to that? yes there is,You can create another class which extends address and make it serialzable but It can fails in many cases:","1) What if class is declared as final","2) What if class have reference to other non serializable object.","So then how willyou serialize Employee object? so solution is you can make it transient.If you don’t want to serialize any field then make it transient.","transient Address address","So after making address transient in Employee class when you run program.You will get nullPointerException because during deserialization address reference will be null","Case 3:What if you still want to save state of reference object(e.g above address object):","If you make address transient then during deserialization it will return null.But what if you still want to have same state as when you have serialized address object.Java serialization provides a mechanism such that if you have private methods with particular signature then they will get called during serialization and deserialization so if we provide writeObject and readObject method of employee class and they will be called during serialization and deserialization of Employee object.","Employee.java:","package org.arpit.javapostsforlearning;","import java.io.IOException;","import java.io.ObjectInputStream;","import java.io.ObjectOutputStream;","import java.io.Serializable;","public class Employee implements Serializable{ "," private static final long serialVersionUID = 1L;","int employeeId;"," String employeeName;"," String department;"," transient Address address;"," public int getEmployeeId() {","return employeeId;"," }"," public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;"," }"," public String getEmployeeName() {","return employeeName;"," }"," public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;"," }"," public String getDepartment() {","return department;"," }"," public void setDepartment(String department) {","this.department = department;"," }"," public Address getAddress() {","return address;"," }"," public void setAddress(Address address) {","this.address = address;"," }"," private void writeObject(ObjectOutputStream os) throws IOException, ClassNotFoundException"," { ","try {","os.defaultWriteObject();","os.writeInt(address.getHomeNo());","os.writeObject(address.getStreet());","os.writeObject(address.getCity());","} ","catch (Exception e) ","{ e.printStackTrace(); }"," }"," private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException"," {","try {","is.defaultReadObject();","int homeNo=is.readInt();","String street=(String) is.readObject();","String city=(String) is.readObject();","address=new Address(homeNo,street,city);","} catch (Exception e) { e.printStackTrace(); }"," }","}","One thing should be kept in mind that ObjectInputStream should read data in same sequence in which we have written data to ObjectOutputStream.","Create Address.java in org.arpit.javapostsforlearning","Address.java:","package org.arpit.javapostsforlearning;","import java.io.Serializable;","public class Address {"," int homeNo;"," String street;"," String city;"," public Address(int homeNo, String street, String city) {","super();","this.homeNo = homeNo;","this.street = street;","this.city = city;"," }"," public int getHomeNo() {","return homeNo;"," }"," public void setHomeNo(int homeNo) {","this.homeNo = homeNo;"," }"," public String getStreet() {","return street;"," }"," public void setStreet(String street) {","this.street = street;"," }"," public String getCity() {","return city;"," }"," public void setCity(String city) {","this.city = city;"," }","}","Create SerializeDeserializeMain.java in org.arpit.javapostsforlearning","SerializeDeserializeMain.java:","package org.arpit.javapostsforlearning;","import java.io.FileInputStream;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectInputStream;","import java.io.ObjectOutputStream;","public class SerializeDeserializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Employee emp = new Employee();","emp.setEmployeeId(101);","emp.setEmployeeName('Arpit');","emp.setDepartment('CS');","Address address=new Address(88,'MG road','Pune');","emp.setAddress(address);","//Serialize","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}","//Deserialize","emp = null;","try","{","FileInputStream fileIn =new FileInputStream('employee.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","emp = (Employee) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Employee class not found');","c.printStackTrace();","return;","}","System.out.println('Deserialized Employee...');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getEmployeeName());","System.out.println('Department: ' + emp.getDepartment());","address=emp.getAddress();","System.out.println('City :'+address.getCity());"," }","}","Run it :","When you run SerializeDeserializeMain.java.You will get following output","Deserialized Employee...","Emp id: 101","Name: Arpit","Department: CS","City :Pune","so now we got same state of address object as it was before serialization.","Inheritance in Serialization in java:","Now we will see how inheritance affects serialization.So there can be muliple cases whether super class is serializable or not.If not then how will you handle that and how it works.Lets see by example.","We will create Person.java which will be superclass of Employee.","Case 4: Whatif superclass is Serializable?","If superclass is serialzable then all its subclasses are automatically serializable.","Case 5:What if superclass is not Serializable?","If super class is not serializable then we have to handle it quite differently.","If superclass is not serializable then it must have no argument constructor.","Person.java","package org.arpit.javapostsforlearning;","public class Person {"," String name='default';"," String nationality;"," public Person()"," {","System.out.println('Person:Constructor');"," }"," public Person(String name, String nationality) {","super();","this.name = name;","this.nationality = nationality;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public String getNationality() {","return nationality;"," }"," public void setNationality(String nationality) {","this.nationality = nationality;"," }","}","Create Employee.java in org.arpit.javapostsforlearning","Employee.java:","package org.arpit.javapostsforlearning;","import java.io.Serializable;","public class Employee extends Person implements Serializable{ "," private static final long serialVersionUID = 1L;"," int employeeId;"," String department;"," public Employee(int employeeId,String name,String department,String nationality)"," {","super(name,nationality);","this.employeeId=employeeId;","this.department=department;","System.out.println('Employee:Constructor');"," }"," public int getEmployeeId() {","return employeeId;"," }"," public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;"," }"," public String getDepartment() {","return department;"," }"," public void setDepartment(String department) {","this.department = department;"," }","}","Create SerializeDeserializeMain.java in org.arpit.javapostsforlearning","SerializeDeserializeMain.java:","package org.arpit.javapostsforlearning;","import java.io.FileInputStream;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectInputStream;","import java.io.ObjectOutputStream;","public class SerializeDeserializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","//Serialize","Employee emp = new Employee(101,'Arpit','CS','Indian');","System.out.println('Before serializing');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getName());","System.out.println('Department: ' + emp.getDepartment());","System.out.println('Nationality: ' + emp.getNationality());","System.out.println('************');","System.out.println('Serializing');","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}","//Deserialize","System.out.println('************');","System.out.println('Deserializing');","emp = null;","try","{","FileInputStream fileIn =new FileInputStream('employee.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","emp = (Employee) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Employee class not found');","c.printStackTrace();","return;","}","System.out.println('After serializing');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getName());","System.out.println('Department: ' + emp.getDepartment());","System.out.println('Nationality: ' + emp.getNationality());"," }","}","If superclass is not Serializable then all values of the instance variables inherited from super class will be initialized by calling constructor of Non-Serializable Super class during deserialization process. so here name is inherited from person so during deserialization,name is initialized to default.","Case 6-What if superclass is Serializable but you don’t want subclass to be Serializable","If you don’t want subclass to serializable then you need to implement writeObject() and readObject() method and need to throw NotSerializableException from this methods.","Case 7-Can you Serialize static variables?","No,you can’t.As you know static variable are at class level not at object level and you serialize a object so you can’t serialize static variables.","Externalizable interface can be used in place of serializable if you want more control over serialization.You can read more about it at Externalizable in java","Summary:","1.Serialization in java is the translation of your Java object’s values/states to bytes to send it over network or save it.On other hand,Deserialization is conversion of byte code to corresponding java objects.","2.Good thing about Serialization is entire process is JVM independent, meaning an object can be serialized on one platform and deserialized on an entirely different platform.","3.If you want to serialize any class then it must implement Serializable interface which is marker interface.","4.Marker interface in Java is interface with no field or methods or in simple word empty interface in java is called marker interface","5.serialVersionUID is used to ensure that same object(That was used during Serialization) is loaded during Deserialization.serialVersionUID is used for version control of object.","6.When you serialize any object and if it contain any other object reference then Java serialization serialize that object’s entire object graph.","7.If you don’t want to serialize any field,then make it trasient.","8.If superclass is Serializable then its subclasses are automatically Serializable.","9.If superclass is not Serializable then all values of the instance variables inherited from super class will be initialized by calling constructor of Non-Serializable Super class during deserialization process.","10.If you don’t want subclass to serializable then you need to implement writeObject() and readObject() method and need to throw NotSerializableException from this methods.","11.You can’t serialize static variables.","That’s all about Serialization in java."],
							"id": 72}, 
                        {"name": "serialVersionUID in java Serialization",
							"book": ["This is 2nd part of java Serialization tutorial","serialVersionUID is used to ensure that same class(That was used during Serialization) is loaded during Deserialization.serialVersionUID is used for version control of object.","If you have used Serialization then You might have seenserialVersionUID because whenever you implement Serializable interface your IDE will give you warning.","Serialversionuid Syntax:","As per java docs","ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;","serialVersionUID must be Static and final.You can assign any number to it.","Lets see an example:","Create Employee.java in src->org.arpit.javapostsforlearning","1.Employee.java ","package org.arpit.javapostsforlearning;","import java.io.Serializable;","public class Employee implements Serializable{","private static final long serialVersionUID = 1L;","int employeeId;","String employeeName;","String department;","public int getEmployeeId() {","return employeeId;","}","public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;","}","public String getEmployeeName() {","return employeeName;","}","public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;","}","public String getDepartment() {","return department;","}","public void setDepartment(String department) {","this.department = department;","}","}"," Create SerializeMain.java in src->org.arpit.javapostsforlearning","2.SerializeMain.java","package org.arpit.javapostsforlearning;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectOutputStream;"," public class SerializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Employee emp = new Employee();","emp.setEmployeeId(101);","emp.setEmployeeName('Arpit');","emp.setDepartment('CS');","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}"," }","}","Create DeserializeMain.java in src->org.arpit.javapostsforlearning","3.DeserializeMain.java","package org.arpit.javapostsforlearning;","import java.io.IOException;","import java.io.ObjectInputStream;","public class DeserializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Employee emp = null;","try","{"," FileInputStream fileIn =new FileInputStream('employee.ser');"," ObjectInputStream in = new ObjectInputStream(fileIn);"," emp = (Employee) in.readObject();"," in.close();"," fileIn.close();","}catch(IOException i)","{"," i.printStackTrace();"," return;","}catch(ClassNotFoundException c)","{"," System.out.println('Employee class not found');"," c.printStackTrace();"," return;","}","System.out.println('Deserialized Employee...');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getEmployeeName());","System.out.println('Department: ' + emp.getDepartment());"," }","}","4.Run it:","First run SerializeMain.java then DeserializeMain.java and you will get following output:","Deserialized Employee...","Emp id: 101","Name: Arpit","Department: CS","So when you run program,it was completed successfully and employee.ser has been created on disk.If you again run DeserializeMain.java,it will again run successfully. Now change value of variable serial to","private static final long serialVersionUID = 2L;","and if you now run DeserializeMain.java it will give you following error.","java.io.InvalidClassException: org.arpit.javapostsforlearning.Employee; local class incompatible: stream classdesc serialVersionUID = 1, local class serialVersionUID = 2;","So here during deserialization,we got error.It complained about Serialvesionuid being changed.But how does it know? because serialversionuid is a static variable and we know that “We can not serialize static variables”.How does it storeserialversionuid? yes ,there is exception.Inspite of serialversionuid being static,it get serialized.So ObjectOutputStream writes every time to output stream and ObjectInputStream reads it back and if it does not have same values as in current version of class then it throw InvalidClassException.","Why serialversionuid is required?","In real time,It is possible that you have serialized a object in a file and you deserialized it after few months on different JVM.In between serialization and deserialization class declaration has been changed.So it is a good idea to maintain version system and serialversionid does exactly same thing.It checks if you are deserializing same object which you have serialized.","Best Practices:","Java docs says:","“the default serialVersionUID computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected InvalidClassExceptions during deserialization”.","So it says you must declare serialVersionUID because it give us more control.for e.g. Default rules for generating serialVersionUID can be too strict in some cases. For example when the visibility of a field changes, the serialVersionUID changes too. or sometimes you just want to forbid deserialization of old serialized object then you can just change serialVersionUID.","Is this enough?.No,you must not only declare it but also maintain it.So most important part is maintainingserialVersionUID otherwise every thing will run without any exceptions.You should change serialVersionUID when there is some change in the definition of data stored in the class for example data type of field is changed."],
							"id": 74}, 
                        {"name": "Externalizable in java",
							"book": ["This is 3rd part of java Serialization tutorial","Before understanding Externalizable interface, you need to have idea about Serialization.You can read more about Serialization at Serialization in java.","Java provides mechanism called serialization to persists java objects in a form of ordered or sequence of bytes that includes the object’s data as well as information about the object’s type and the types of data stored in the object.","Externalizable:","As name suggest it is externalilizing your serialization.If you want to customize your serialization mechanism then you can use it.It uses custom written mechanism to perform marshalling and unmarshalling of objects.Externalizable interface extends Serializable interface. If you implement this interface then you need to override following methods.","@Override","public void readExternal(ObjectInput arg0) throws IOException,","ClassNotFoundException {","}","@Override","public void writeExternal(ObjectOutput arg0) throws IOException {","}","Now lets see how serialization happens:","At sender side:","JVM checks if class implements externalizable or not.If it does then serialize object using writeExternal() method.If it does not implement externalizable but implements serializable , object is serialized using ObjectOutputStream.","At receiver side:","When object is reconstructed and it is externalizable , an instance is created using no args constructor and readExternal is called.If it is not externalizable but serializable , object is reconstructed using ObjectInputStream.","Lets start with example same as we have used in Serialization in java.","Create Employee.java in src->org.arpit.java2blog","Employee.java:","package org.arpit.java2blog;","import java.io.Externalizable;","import java.io.IOException;","import java.io.ObjectInput;","import java.io.ObjectOutput;","public class Employee implements Externalizable{ "," int employeeId;"," String employeeName;"," String department;"," String nationality;"," public Employee()"," {"," }"," public int getEmployeeId() {","return employeeId;"," }"," public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;"," }"," public String getEmployeeName() {","return employeeName;"," }"," public void setEmployeeName(String employeeName) {","this.employeeName = employeeName;"," }"," public String getDepartment() {","return department;"," }"," public void setDepartment(String department) {","this.department = department;"," }"," public String getNationality() {","return nationality;"," }"," public void setNationality(String nationality) {","this.nationality = nationality;"," }"," @Override"," public void readExternal(ObjectInput in) throws IOException,"," ClassNotFoundException {","employeeId=in.readInt();","employeeName=(String) in.readObject();"," }"," @Override"," public void writeExternal(ObjectOutput out) throws IOException {","out.writeInt(employeeId);","out.writeObject(employeeName);"," }","}","you must have no args contructor if you implement externalizable.","Create ExternalizableMain.java in org.arpit.java2blog","ExternalizableMain.java:","package org.arpit.java2blog;","import java.io.FileInputStream;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectInputStream;","import java.io.ObjectOutputStream;","public class ExternalizableMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Employee emp = new Employee();","emp.setEmployeeId(101);","emp.setEmployeeName('Arpit');","emp.setDepartment('CS');","//Serialize","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}","//Deserialize","emp = null;","try","{","FileInputStream fileIn =new FileInputStream('employee.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","emp = (Employee) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Employee class not found');","c.printStackTrace();","return;","}","System.out.println('Deserialized Employee...');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getEmployeeName());"," }","}","Run it :","When you run ExternalizableMain.java.You will get following output","Deserialized Employee...","Emp id: 101","Name: Arpit","If you already have serializable,why you need externalizable at all!!:","When you serialize any object using serializable, apart from fields, all objects that belong to object map and that can be reached using instance variable will also be serialized .for example :","If you have Employee class and its superclass is person then it will serialize all superclass objects (such as person) until it reaches “Object” class.","Similarly if Employee has instance variable of address class then it will serialize whole object map of address also .","Do you really want this much overhead when all you want to serialize is employeeId andemployeeName","JVM uses reflection when you use serializable which is quite slow.","While serializing,information about class description which incluses description of its superclass and instance variable associated with that class also get stored in stream.Again this is also a performance issue","Inheritance in Externalization:","Now we will see how inheritance affects externalization.So there can be muliple cases whether super class is externalizable or not.If not then how will you handle that and how it works.Lets see by example.","We will create Person.java which will be superclass of Employee.","Case 1: What if super class does not implement Externalizable:","If superclass does not implements externalizable , you need to serialize superclass ‘s fields in subclass that implements Externalizable.","Person.java","package org.arpit.java2blog;","public class Person {"," String name='default';"," String nationality;"," public Person()"," {","System.out.println('Person:Constructor');"," }"," public Person(String name, String nationality) {","super();","this.name = name;","this.nationality = nationality;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public String getNationality() {","return nationality;"," }"," public void setNationality(String nationality) {","this.nationality = nationality;"," }","}","Create Employee.java in org.arpit.java2blog","Employee.java:","package org.arpit.java2blog;","import java.io.Externalizable;","import java.io.IOException;","import java.io.ObjectInput;","import java.io.ObjectOutput;",";","public class Employee extends Person implements Externalizable{ "," int employeeId;"," String department;"," public Employee()"," {"," }"," public Employee(int employeeId,String name,String department,String nationality)"," {","super(name,nationality);","this.employeeId=employeeId;","this.department=department;","System.out.println('Employee:Constructor');"," }"," public int getEmployeeId() {","return employeeId;"," }"," public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;"," }"," public String getDepartment() {","return department;"," }"," public void setDepartment(String department) {","this.department = department;"," }","@Override","public void writeExternal(ObjectOutput out) throws IOException {"," /*since superclass does not implement externalizable, you need to serialize super class field in this class itself*/"," //superclass fields"," out.writeObject(name);"," out.writeObject(nationality);"," // its own fields"," out.writeInt(employeeId);"," out.writeObject(department);","}","@Override","public void readExternal(ObjectInput in) throws IOException,","ClassNotFoundException {"," /*since superclass does not implement externalizable, you need to deserialize super class field in this class itself*/"," //superclass fields"," name=(String) in.readObject();"," nationality=(String) in.readObject();"," // its own fields"," employeeId=in.readInt();"," department=(String) in.readObject();","}","}","Create ExternalizableMain.java in org.arpit.java2blog","ExternalizableMain.java:","package org.arpit.java2blog;","import java.io.FileInputStream;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectInputStream;","import java.io.ObjectOutputStream;","public class ExternalizableMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","//Serialize","Employee emp = new Employee(101,'Arpit','CS','Indian');","System.out.println('Before serializing');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getName());","System.out.println('Department: ' + emp.getDepartment());","System.out.println('Nationality: ' + emp.getNationality());","System.out.println('************');","System.out.println('Serializing');","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}","//Deserialize","System.out.println('************');","System.out.println('Deserializing');","emp = null;","try","{","FileInputStream fileIn =new FileInputStream('employee.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","emp = (Employee) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Employee class not found');","c.printStackTrace();","return;","}","System.out.println('After serializing');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getName());","System.out.println('Department: ' + emp.getDepartment());","System.out.println('Nationality: ' + emp.getNationality());"," }","}","Run it :","When you run ExternalizableMain.java.You will get following output:","Employee:Constructor","Before serializing","Emp id: 101","Name: Arpit","Department: CS","Nationality: Indian","************","Serializing","************","Deserializing","Person:Constructor","After serializing","Emp id: 101","Name: Arpit","Department: CS","Nationality: Indian","Case 2: What if super class implements Externalizable:","If superclass implements externalizable ,then it will also have readExternal() and writeExternal() method so it will serialize its own fields in these methods","Person.java","package org.arpit.java2blog;","import java.io.Externalizable;","import java.io.IOException;","import java.io.ObjectInput;","import java.io.ObjectOutput;","public class Person implements Externalizable{"," String name='default';"," String nationality;"," public Person()"," {","System.out.println('Person:Constructor');"," }"," public Person(String name, String nationality) {","super();","this.name = name;","this.nationality = nationality;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public String getNationality() {","return nationality;"," }"," public void setNationality(String nationality) {","this.nationality = nationality;"," }"," @Override"," public void writeExternal(ObjectOutput out) throws IOException {","out.writeObject(name);","out.writeObject(nationality);"," }"," @Override"," public void readExternal(ObjectInput in) throws IOException,"," ClassNotFoundException {","name=(String) in.readObject();","nationality=(String) in.readObject();"," }","}","Create Employee.java in org.arpit.java2blog","Employee.java:","package org.arpit.java2blog;","import java.io.Externalizable;","import java.io.IOException;","import java.io.ObjectInput;","import java.io.ObjectOutput;",";","public class Employee extends Person implements Externalizable{ "," int employeeId;"," String department;"," public Employee()"," {"," }"," public Employee(int employeeId,String name,String department,String nationality)"," {","super(name,nationality);","this.employeeId=employeeId;","this.department=department;","System.out.println('Employee:Constructor');"," }"," public int getEmployeeId() {","return employeeId;"," }"," public void setEmployeeId(int employeeId) {","this.employeeId = employeeId;"," }"," public String getDepartment() {","return department;"," }"," public void setDepartment(String department) {","this.department = department;"," }"," @Override"," public void writeExternal(ObjectOutput out) throws IOException {","super.writeExternal(out);","out.writeInt(employeeId);","out.writeObject(department);"," }"," @Override"," public void readExternal(ObjectInput in) throws IOException,"," ClassNotFoundException {","super.readExternal(in);","employeeId=in.readInt();","department=(String) in.readObject();"," }","}","Create ExternalizableMain.java in org.arpit.java2blog","ExternalizableMain.java:","package org.arpit.java2blog;","import java.io.FileInputStream;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectInputStream;","import java.io.ObjectOutputStream;","public class ExternalizableMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","//Serialize","Employee emp = new Employee(101,'Arpit','CS','Indian');","System.out.println('Before serializing');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getName());","System.out.println('Department: ' + emp.getDepartment());","System.out.println('Nationality: ' + emp.getNationality());","System.out.println('************');","System.out.println('Serializing');","try","{","FileOutputStream fileOut = new FileOutputStream('employee.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(emp);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}","//Deserialize","System.out.println('************');","System.out.println('Deserializing');","emp = null;","try","{","FileInputStream fileIn =new FileInputStream('employee.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","emp = (Employee) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Employee class not found');","c.printStackTrace();","return;","}","System.out.println('After serializing');","System.out.println('Emp id: ' + emp.getEmployeeId());","System.out.println('Name: ' + emp.getName());","System.out.println('Department: ' + emp.getDepartment());","System.out.println('Nationality: ' + emp.getNationality());"," }","}","Run it :","When you run ExternalizableMain.java.You will get following output:","Employee:Constructor","Before serializing","Emp id: 101","Name: Arpit","Department: CS","Nationality: Indian","************","Serializing","************","Deserializing","Person:Constructor","After serializing","Emp id: 101","Name: Arpit","Department: CS","Nationality: Indian","In this example, since the Person class stores and restores its fields in its own writeExternal and readExternal methods, you dont need to save/restore the superclass fields in sub class but if you observe closely the writeExternal and readExternal methods of Employee class, you will find that you still need to first call the super.xxxx() methods that confirms the statement the externalizable object must also coordinate with its supertype to save and restore its state.","DownSides of Externalizable:","If you make any change to your class definition, you need to maintain writeExternal() and readExternal accordingly.","As we have seen in example,Sub class object has to coordinate with its superclass to save and store its state(by call super.xxxx() method from subclass)"],
							"id": 75}, 
                        {"name": "Java transient keyword with example",
							"book": ["Transient variable is the variable whose value is not serialized during serialization. You will get default value for these variable when you deserialize it.","Lets say you have Country class and you don’t want to Serialize population attribute as it will change with time, so you can declare population attribute as transient and it won’t serialized any more.","Transient keyword example:","Create a classed called Country.java as below:","package org.arpit.java2blog;","import java.io.Serializable;","public class Country implements Serializable {"," String name;"," transient long population;"," public Country() {"," super();","}","public Country(String name, long population) {","super();","this.name = name;","this.population = population;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public long getPopulation() {","return population;"," }"," public void setPopulation(long population) {","this.population = population;"," }","}","Create serializationMain.java as below:","package org.arpit.java2blog;","import java.io.FileOutputStream;","import java.io.IOException;","import java.io.ObjectOutputStream;","public class SerializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Country india = new Country();"," india.setName('India');"," india.setPopulation(100000);","try","{","FileOutputStream fileOut = new FileOutputStream('country.ser');","ObjectOutputStream outStream = new ObjectOutputStream(fileOut);","outStream.writeObject(india);","outStream.close();","fileOut.close();","}catch(IOException i)","{","i.printStackTrace();","}","System.out.println('serialized');"," }","}","When you run above program, you will get below output:","serialized","Now Create a classed called DeserializeMain.java as below:","package org.arpit.java2blog;","import java.io.FileInputStream;","import java.io.IOException;","import java.io.ObjectInputStream;","public class DeserializeMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Country india = null;","try","{","FileInputStream fileIn =new FileInputStream('country.ser');","ObjectInputStream in = new ObjectInputStream(fileIn);","india = (Country) in.readObject();","in.close();","fileIn.close();","}catch(IOException i)","{","i.printStackTrace();","return;","}catch(ClassNotFoundException c)","{","System.out.println('Country class not found');","c.printStackTrace();","return;","}","System.out.println('Deserialized Country...');","System.out.println('Country Name : ' + india.getName());","System.out.println('Population : ' + india.getPopulation());"," }","}","When you run above program, you will get below output:","Deserialized Country...","Country Name : India","Population : 0","As you can see in above example, we have declared population as trasient,so after deserialization, its value became 0 (Default value for long)"],
							"id": 76}, 
                        {"name": "Difference between Serializable and Externalizable in Java",
							"book": ["In this tutorial,we are going to see differences between Serializable and Externalizable interface in Java.","Before understanding difference, let me provide a short note on Serializable and Externalizable.","Serializable :","It is marker interface and you do not have to provide any methods if you implement this interface. When if any class implement Serializable interface, JVM will take care of Serializing that object.","Externalizable:","As the name suggest it is externalizing your serialization.If you want to customize your serialization mechanism then you can use it.It uses custom written mechanism to perform marshaling and unmarshalling of objects.Externalizable interface extends Serializable interface. If you implement this interface, you need to provide implementation of readExternal() and writeExternal() method."],
							"id": 77}]
                },
                {
                    "name": "Chapter 9",
                    "description": "Java Exception Handling",
                    "content": [
						{"name": "Exception handling in java",
							"book": ["Exceptions","I have started writing about the Java Certification and how to prepare for the various topics related to OCAJP exams in my blog. In my previous post, I have published few sample mock questions for StringBuilder class.","In this post I am going to explain about the another OCAJP exam objective “Differentiate among checked exceptions, unchecked exceptions, and Errors”. This is exam objective 8.1 in both OCAJP 8 and OCAJP 7 exams. There is no difference between both the exams with respect to this objective.","OCA exam would test your knowledge on the exceptions that are available in Java SE 6 version. There is no revision of latest versions in the OCA exam. But, OCP exam covers the latest exception handling mechanism from the versions Java SE 7 & 8.","In this Post we would explain about exception hierarchy, difference between checked, unchecked exceptions and errors.","If you are looking for mock exams to practice OCAJP exam, you can try these practice questions for OCAJP 8 exam.","What is Exception ?","1.Java doc says “ An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program’s instructions.”","2.The term “exception” means “exceptional condition” and is an occurrence that changes the normal program flow.","3.A bunch of things can lead to exceptions, including hardware failures, resource exhaustion, and good old bugs.","4.When an exception event occurs in Java , an exception is said to be “thrown”.","5.The code that is responsible for doing something about the exception is called an “exception handler” and it “catches” the thrown exception.","6.Every Exception will be thrown at runtime.","Throwable","Throwable class is present in java.lang package.","Throwable is the super class for all exception classes in Java.","It has two direct sub classes such as Exception, Error(Of Course every exception class is directly or indirectly sub class of Throwable ).","It has some methods which are to print exceptions details as per application requirement.","Exception","Exception is the class present in java.lang package.","This class doesn’t have it’s own methods , it inherited methods from Throwable class.","All sub classes of this class are considered as checked Exceptions(except RuntimeException and it’s sub classes).","RuntimeException","RuntimeException is the class present in java.lang package.","It is sub class of Exception class.","This class is also doesn’t have it’s own methods , it inherited methods from Throwable class.Because Throwable is indirectly super class of RuntimeException.","All sub classes of this class are considered as unchecked Exceptions.","Error","Error is the class present in java.lang package.","It is sub class of Throwable class.","This class is also doesn’t have it’s own methods , it inherited methods from Throwable class. Because Throwable is indirectly super class of RuntimeException.","All sub classes of this class are considered as unchecked errors.","Checked Exceptions","If a class is a subclass of Exception class directly or indirectly and should not be subclass of RuntimeException class, it is a checked exception.","Why the name checked, because these exceptions can be detected at compile time.","Of course checked exceptions thrown at runtime,It is mandatory that Java code requires to declare or handle them at compile time otherwise the code doesn’t compile .","These are caused by unexpected conditions outside control of code (e.g. database down, file I/O error, wrong input, etc).","These are thrown programmatically.","These are recoverable errors.","For Example IOException is a checked exception, it occurs when you are try to open a file which is not existed in that location.","You can recover from this exception by putting the file in the same location.","OCAJP checked exceptions","FileNotFoundException thrown programmatically when code tries to reference a file that does not exist","IOException Thrown programmatically when there’s a problem reading or writing a file.","For the OCA exam, you only need to know that these are checked exceptions. Also keep in mind that FileNotFoundException is a subclass of IOException, although the exam will remind you of that fact if it comes up. You’ll see these two exceptions in more detail on the OCP exam.","Unchecked Exceptions","If a class is a subclass of RuntimeException class directly or indirectly, it is a unchecked exception.","Why the name unchecked , because these are not detected at compile time. So, It is not mandatory that Java code requires to declare or handle them.","These are also thrown at run time.","These are thrown by JVM.","These are also recoverable errors.","For Example : when you call method on reference variable which is null causes NullPointerException.","You can recover from this exception , by checking reference is null or not before method on that reference.","OCAJP unchecked Exceptions","ArithmeticException","• It is Thrown by the JVM when code attempts to divide by zero.","Example :","int b= 9;"," int c = b/0;"," Running this code results in the following output: Exception in thread “main” java.lang.ArithmeticException: / by zero"," ArrayIndexOutOfBoundsException","It is thrown by the JVM when code uses an illegal index to access an array.","Example :","int[] a = new int[2]; ","System.out.println(a[-1])","This is a problem because there’s no such thing as a negative array index. Running this code givess the following output: Exception in thread “main” java.lang.ArrayIndexOutOfBoundsException: -1","ClassCastException","It is thrown by the JVM when an attempt is made to cast an exception to a subclass of which it is not an instance","Example :","String type = 'OCAJP8';","Object obj = type;","Integer number = (Integer) obj;","The compiler sees a cast from Object to Integer. This could be okay. The compiler doesn’t realize there’s a String in that Object. When the code runs, it gives the following output: Exception in thread “main” java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer","IllegalArgumentException","It is thrown by the programmer to indicate that a method has been passed an illegal or inappropriate argument.","Example :","public static void setCount(int count)","{","if (count < 0)","throw new IllegalArgumentException('cont must not be negative');","this.count = count;","}","The program throws an exception when it’s not happy with the parameter values. The output looks like this: Exception in thread “main” java.lang.IllegalArgumentException: count must not be negative"," NullPointerException","It is thrown by the JVM when there is a null reference where an object is required.","Example :","String name;","public void printLength() throws NullPointerException ","{","System.out.println(name.length());","}","Running this code results in this output: Exception in thread “main” java.lang.NullPointerException","NumberFormatException","It is thrown by the programmer when an attempt is made to convert a string to a numeric type but the string doesn’t have an appropriate format.","Example :","Integer.parseInt('OCA');","The output looks like this: Exception in thread “main” java.lang.NumberFormatException: For input string:”OCA”","Errors","If a class is a subclass of Error class directly or indirectly,it is an error.","For Errors, It is not mandatory that Java code requires to declare or handle them. If you catch there won’t be compile time error. But you shouldn’t catch it.","These are thrown by JVM.","These are unrecoverable errors.","For Example when you try to create infinite objects you will get OutOfMemoryError .","You can’t recover from these errors."," ExceptionInInitializerError","It is thrown by the JVM when a static initializer throws an exception and doesn’t handle it.","Example :","static {","int[] c = new int[3];","int num = c[-1];","}","public static void main(String[] args) { }","This code gives information about two exceptions: Exception in thread “main” java.lang.ExceptionInInitializerError Caused by: java.lang.ArrayIndexOutOfBoundsException: -1","We get the ExceptionInInitializerError because the error happened in a static initializer.","That information alone wouldn’t be particularly useful in fixing the problem. Therefore, Java also tells us the original cause of the problem: the ArrayIndexOutOfBoundsException that","We need to fix the ExceptionInInitializerError is an error because Java failed to load the whole class. This failure prevents Java from continuing.So the errors are unrecoverable.","StackOverflowError","It is thrown by the JVM when a method calls itself too many times (this is called infi nite recursion because the method typically calls itself without end).","Example :","public static void call(int n) ","{","call(8);","}","The output contains this line: Exception in thread “main” java.lang.StackOverflowError","Since the method calls itself, it will never end. Eventually, Java runs out of room on the stack and throws the error. This is called infinite recursion.","NoClassDefFoundError","It is thrown by the JVM when a class that the code uses is available at compile time but not runtime. This error won’t show up in code on the exam—you just need to know that it is an error."],
							"id": 78}, 
                        {"name": "Can we have try without catch block in java",
							"book": ["Yes,we can have try without catch block by using finally block.","You can use try with finally. As you know finally block always executes even if you have exception or return statement in try block except in case of System.exit().","Lets understand with the help of example.","package org.arpit.java2blog;","public class TryWithoutCatchMain {"," public static void main(String args[])"," {","try","{","System.out.println('Executing try block'); ","}","finally","{","System.out.println('Executing finally block'); ","}"," }","}","When you execute above program, you will get following output:","Executing try block","Executing finally block","What happens when you have return statement in try block:","If you have return statement in try block, still finally block executes.","package org.arpit.java2blog;","public class TryWithoutCatchMain {"," public static void main(String args[])"," {","System.out.println(print());"," }"," public static String print()"," {","try","{","System.out.println('Executing try block'); ","return 'Return from try block';","}","finally","{","System.out.println('Executing finally block'); ","}"," }","}","When you execute above program, you will get following output:","Executing try block","Executing finally block","Return from try block","What happens if you have return statement in finally block too:","It overrides whatever is returned by try block. Lets understand with the help of example:","package org.arpit.java2blog;","public class TryWithoutCatchMain {"," public static void main(String args[])"," {","System.out.println(print());"," }"," public static String print()"," {","try","{","System.out.println('Executing try block'); ","return 'Return from try block';","}","finally","{","System.out.println('Executing finally block'); ","return 'Return from finally block';","}"," }","}","When you execute above program, you will get following output:","Executing try block","Executing finally block","Return from finally block","What if exception is thrown in try block :","If exception is thrown in try block, still finally block executes.","package org.arpit.java2blog;","public class TryWithoutCatchMain {"," public static void main(String args[])"," {","System.out.println(print());"," }"," public static intprint()"," {","try","{","throw new NullPointerException();","}","finally","{","System.out.println('Executing finally block'); ","}"," }","}","When you execute above program, you will get following output:","Executing finally block","Exception in thread 'main' java.lang.NullPointerException"," at org.arpit.java2blog.TryWithoutCatchMain.print(TryWithoutCatchMain.java:14)"," at org.arpit.java2blog.TryWithoutCatchMain.main(TryWithoutCatchMain.java:7)"],
							"id": 79}, 
                        {"name": "Difference between throw and throws in java",
							"book": ["In this tutorial, we are going to see difference between throw and throws in java.","throw:","throw keyword is used to throw any custom exception or predefine exception.","For example:","Let’s say you want to throw invalidAgeException when employee age is less than 18.","Create a Employee class as below.","package org.arpit.java2blog;","public class Employee {"," String name;"," int age;"," public String getName() {"," return name;"," }"," public void setName(String name) {"," this.name = name;"," }"," public int getAge() {"," return age;"," }"," public void setAge(int age) {"," if(age < 18)"," try {"," throw new InvalidAgeException('Employee's age can not be less than 18');"," } catch (InvalidAgeException e) {"," e.printStackTrace();"," }"," this.age = age;"," }","}","Create InvalidAgeException class as below","package org.arpit.java2blog;","public class InvalidAgeException extends Exception{"," String message;"," InvalidAgeException(String message)"," {","super(message);","this.message=message;"," }","}","Now create a main class named EmployeeExceptionTest.java as below.","package org.arpit.java2blog;","public class EmployeeExceptionTest {"," public static void main(String[] args) {","Employee e1 = new Employee();","e1.setName('John');","e1.setAge(25);","Employee e2 = new Employee();","e2.setName('Martin');","e2.setAge(17);"," }","}","when you run above program, you will get below output:","org.arpit.java2blog.InvalidAgeException: Employee's age can not be less than 18"," at org.arpit.java2blog.Employee.setAge(Employee.java:19)"," at org.arpit.java2blog.ExceptionTest.main(ExceptionTest.java:14)"," throws:","throws keyword is used to declare list of all exception which method might throw. It delegates responsibility of handling exception to calling method.","For example:","Let’s say you want to declare InvalidAgeException in setAge() method when employee age is less than 18 and InvalidAgeException exception should be handled in main method.","Create a Employee class as below.","package org.arpit.java2blog;","public class Employee {"," String name;"," int age;"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public int getAge() {","return age;"," }"," public void setAge(int age) throws InvalidAgeException{"," if(age < 18)","throw new InvalidAgeException('Employee's age can not be less than 18'); ","this.age = age;"," }","}","Create InvalidAgeException class as below","package org.arpit.java2blog;","public class InvalidAgeException extends Exception{"," String message;"," InvalidAgeException(String message)"," {","super(message);","this.message=message;"," }","}","Now create a main class named EmployeeExceptionTest.java as below.","package org.arpit.java2blog;","public class EmployeeExceptionTest {"," public static void main(String[] args) {","try {","Employee e1 = new Employee();","e1.setName('John');","e1.setAge(25);","Employee e2 = new Employee();","e2.setName('Martin');","e2.setAge(17);","} catch (InvalidAgeException e) {","e.printStackTrace();","}"," }","}","when you run above program, you will get below output:","org.arpit.java2blog.InvalidAgeException: Employee's age can not be less than 18"," at org.arpit.java2blog.Employee.setAge(Employee.java:19)"," at org.arpit.java2blog.ExceptionTest.main(ExceptionTest.java:14)"," If you notice, we have used throws keyword in Employee’s setAge method instead of handling InvalidAgeException."," public void setAge(int age) throws InvalidAgeException{"," if(age < 18)","throw new InvalidAgeException('Employee's age can not be less than 18'); ","this.age = age;"," }","Now we have used try catch block in main method to handle InvalidAgeException."],
							"id": 80}, 
                        {"name": "How to create custom exception in java",
							"book": ["In this post, we will see how to create custom exception in java. It is very simple to create custom exception in java. You just need to extends Exception class to create custom exception.","Lets understand this with example. You have list of counties and if You have “USA” in list of country, then you need to throw invalidCountryException(Our custom exception).","Example:","Create InvalidCountryException.java as below","package org.arpit.java2blog;","public class InvalidCountryException extends Exception{"," InvalidCountryException(String message)"," {","super(message);"," }","}","Create POJO class called Country.java","package org.arpit.java2blog;","public class Country {"," private String name;"," Country(String name ){"," this.name = name;"," }","public String toString() {","return name;","}"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }","}","Lets create CountryCheckMain.java. This class will have main method.","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.List;","public class CountryCheckMain {"," public static void main(String args[]) {","List countries = new ArrayList();","Country indiaCountry = new Country('India');","Country chinaCountry = new Country('China');","Country nepalCountry = new Country('Nepal');","Country bhutanCountry = new Country('Bhutan');","countries.add(indiaCountry);","countries.add(chinaCountry);","countries.add(nepalCountry);","countries.add(bhutanCountry);","boolean safe;","try {","safe = checkListOfCountries(countries);","if (safe)","System.out.println('We don't have USA in list of Countries');","Country USACountry = new Country('USA');","countries.add(USACountry);","checkListOfCountries(countries);","} catch (InvalidCountryException e) {","e.printStackTrace();","}"," }"," public static boolean checkListOfCountries(List countries) throws InvalidCountryException {","for (int i = 0; i < countries.size(); i++) {","Country country = countries.get(i);","if (country.getName().equals('USA')) {","throw new InvalidCountryException('USA is not allowed');","}","}","return true;"," }","}","When you run above program, you will get following output:","We don't have USA in list of Country","org.arpit.java2blog.InvalidCountryException: USA is not allowed"," at org.arpit.java2blog.CountryCheckMain.checkListOfCountries(CountryCheckMain.java:37)"," at org.arpit.java2blog.CountryCheckMain.main(CountryCheckMain.java:25)"],
							"id": 81}, 
                        {"name": "Difference between checked and unchecked exception in java",
							"book": ["In this post, we will see difference between checked and unchecked exception in java. It is important question regarding exceptional handling.","What is Exception?","Exception is unwanted situation or condition while execution of the program. If you do not handle exception correctly, it may cause program to terminate abnormally.","What is checked exception?","Checked exceptions are those exceptions which are checked at compile. If you do not handle them , you will get compilation error.","Lets understand with the help of example:","if you do not handle checked exception , you will get compilation error.","so there are two options two solve above compilation error.","Using try and catch block:","you can put error code prone in try block and catch the exception in catch block.","Example:","package org.arpit.java2blog;","import java.io.FileInputStream;","import java.io.FileNotFoundException;","import java.io.IOException;","public class CheckedExceptionMain {"," public static void main(String args[]) {","FileInputStream fis = null;","try {","fis = new FileInputStream('sample.txt');","int c;","while ((c = fis.read()) != -1) {","System.out.print((char) c);","}","fis.close();","} catch (FileNotFoundException e) {","e.printStackTrace();","} catch (IOException e) {","e.printStackTrace();","} catch (Exception e) {","e.printStackTrace();","}"," }","}","As you see, we have put error prone code in try block and various exceptions in catch block. Using throws : You can use throws keyword to handle exceptions.","package org.arpit.java2blog;","import java.io.FileInputStream;","import java.io.IOException;","public class CheckedExceptionMain {"," public static void main(String args[]) throws IOException {","FileInputStream fis = null;","fis = new FileInputStream('sample.txt');","int k;","while ((k = fis.read()) != -1) {","System.out.print((char) k);","}","fis.close(); "," }","}","As you can see , we have used throws keyword to handle the exception.","What is unchecked exception?","Unchecked exceptions are those exceptions which are not checked at compile time. Java won’t complain if you do not handle the exception.","Example:","package org.arpit.java2blog;","public class NullPointerExceptionExample {"," public static void main(String args[]){","String str=null;","System.out.println(str.trim());"," }","}","When you run above program, you will get below exception:","Exception in thread 'main' java.lang.NullPointerException"," at org.arpit.java2blog.NullPointerExceptionExample.main(NullPointerExceptionExample.java:7)","Another example: ","package org.arpit.java2blog;","public class ArrayIndexOutOfBoundExceptionExample {"," public static void main(String args[]){","String strArray[]={'Arpit','John','Martin'};","System.out.println(strArray[4]);"," }","}","When you run above program, you will get below exception:","Exception in thread 'main' java.lang.ArrayIndexOutOfBoundsException: 4"," at org.arpit.java2blog.ArrayIndexOutOfBoundExceptionExample.main(ArrayIndexOutOfBoundExceptionExample.java:7)"],
							"id": 82}]
                },
                {
                    "name": "Chapter 10",
                    "description": "Java 8",
                    "content": [
						{"name": "Lambda Expressions in Java 8",
							"book": ["Java 8 has introduced a new feature called Lambda expressions.It is considered to be a major change in java. As this change will bring functional programming into java. Other languages such as Scala already have this feature so this is not new to programming world, it is new to java","Before understanding Lambda expressions, Lets first understand Functional Interface.","What is Functional Interface?","Functional interfaces are those interfaces which have only one abstract method in it. It can have more than one default or static method and can override method from java.lang.object. Lets create a functional interface:","@FunctionalInterface","public interface Decorable {"," // one abstract method"," void decorateWithCurtains();"," // default method"," default void decorateWithPaints()"," {","System.out.println('Decorating using paints');"," }"," // Overriding method of java.lang.Object"," @Override"," public int hashCode();","}","Java can itself identify Functional Interface but you can also denote interface as Functional Interface by annotating it with @FunctionalInterface.","Some popular Functional Interfaces are:","java.lang.Runnable","java.util.concurrent.Callable","java.awt.event.ActionListener","java.util.Comparator","Why Lambda Expressions?","Lets understand with help ofAnonymous Comparator:","Country indiaCountry=new Country(1, 'India');","Country chinaCountry=new Country(4, 'China');","Country nepalCountry=new Country(3, 'Nepal');","Country bhutanCountry=new Country(2, 'Bhutan');","List listOfCountries = new ArrayList();","listOfCountries.add(indiaCountry);","listOfCountries.add(chinaCountry);","listOfCountries.add(nepalCountry);","listOfCountries.add(bhutanCountry); ","//Sort by countryName","Collections.sort(listOfCountries,new Comparator() {","@Override","public int compare(Country o1, Country o2) {","return o1.getCountryName().compareTo(o2.getCountryName());","}","});","The problem with Anonymous Comparator is of syntax. Each time you want to sort list using comparator, you have to remember bulky syntax.","So generally main problem with Anonymous classes are syntax.For very simple operation, we need to write complex code. To solve this problem, JDK has introducenew feature called Lambda Expressions.I will take this example after explaining lambda expression to understand , how lambda expression will reduce this complex code.","What is Lambda Expressions:","lambda expression represents an anonymous function. It comprises of a set of parameters, a lambda operator (->) and a function body .You can call it function without name,","Connection between Lambda Expression and Functional Interface:","You might be thinking I have introduced functional Interface above but how it is connected to Lambda.So Lambda expression can be applied for abstract method of functional Interface which is being implemented or being instantiated anonymously.","Structure of Lambda Expressions","(Argument List) ->{expression;} or","(Argument List) ->{statements;}","1) Argument list or parameters","Lambda expression can have zero or more arguments.","You can choose to not declare type of arguments as it can be inferred from context.","3 (a,b)->{a+b};//two argument, will return sum of these two numbers","you can not declare one argument’s type and do not declare type for other argument.","When there is a single parameter, if its type is inferred, it is not mandatory to use parentheses","3. a->{System.out.println(a)}; // Will print value of number a","2 Array token (->)","3 Body","Body can have expression or statements.","If there is only one statement in body,curly brace is not needed and return type of the anonymous function is same as ofbody expression","If there are more than one statements, then it should be in curly braces and return type of anonymous function is same as value return from code block, void if nothing is returned.","Lets take some examples ,you want to initialize thread and now you will realize, how can lambda expression can make your coding easy :","public class ThreadSample {"," public static void main(String[] args) {","// old way","new Thread(new Runnable() {","@Override","public void run() {","System.out.println('Thread is started');","}","}).start();","// using lambda Expression","new Thread(()->System.out.println('Thread is started')).start();"," }","}","Lets take another example of Comparator which we have seen in Anonymous Comparator in java.","Create a class called Country.java","package org.arpit.java2blog;","public class Country{","int countryId;","String countryName;","public Country(int countryId, String countryName) {","super();","this.countryId = countryId;","this.countryName = countryName;","}","public int getCountryId() {","return countryId;","}","public void setCountryId(int countryId) {","this.countryId = countryId;","}","public String getCountryName() {","return countryName;","}","public void setCountryName(String countryName) {","this.countryName = countryName;","}","}","Create a main class called ComparatorMain.java","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.Collections;","import java.util.Comparator;","import java.util.List;","public class ComparatorMain {"," /**","* @author Arpit Mandliya","*/"," public static void main(String[] args) {","Country indiaCountry=new Country(1, 'India');","Country chinaCountry=new Country(4, 'China');","Country nepalCountry=new Country(3, 'Nepal');","Country bhutanCountry=new Country(2, 'Bhutan');","List listOfCountries = new ArrayList();","listOfCountries.add(indiaCountry);","listOfCountries.add(chinaCountry);","listOfCountries.add(nepalCountry);","listOfCountries.add(bhutanCountry);","System.out.println('Before Sort by name : ');","for (int i = 0; i < listOfCountries.size(); i++) { Country country=(Country) listOfCountries.get(i); System.out.println('Country Id: '+country.getCountryId()+'||'+'Country name: '+country.getCountryName()); } //Sort by countryName // Anonymous Comparator // old way Collections.sort(listOfCountries,new Comparator() { @Override public int compare(Country o1, Country o2) { return o1.getCountryName().compareTo(o2.getCountryName()); } }); // Using lambda expression Collections.sort(listOfCountries,(o1,o2)-> o1.getCountryName().compareTo(o2.getCountryName()));","System.out.println('After Sort by name: ');","for (int i = 0; i < listOfCountries.size(); i++) {","Country country=(Country) listOfCountries.get(i);","System.out.println('Country Id: '+country.getCountryId()+'|| '+'Country name: '+country.getCountryName());","}"," }","}","As you can see here, we have used lambda expression for using Comparator. SO inspite of wrting Anonymous comparator, our expression became very easy.","So we have passed 2 arguments o1 and o2, we didn’t pass type because it can inferred from context.","We have only one statement here, so no need to put it in curly braces.","Lets create HelloWorld Lambda Expression Example:","Create an Interface Called HelloWorld:","package org.arpit.java2blog;","public interface HelloWorld {"," void sayHello();","}","Create a class called HelloWorldMain","package org.arpit.java2blog;","public class HelloWorldMain {"," public static void main(String args[])"," {","// Lambda Expression ","HelloWorld helloWorld=()->System.out.println('Hello using Lambda Expression');","helloWorld.sayHello();"," }","}","Run above program you will get following output:","Hello using Lambda Expression","Hope you understand Lambda expression now, in next post, we will see more examples of it."],
							"id": 83}, 
                        {"name": "Interface default methods in java 8",
							"book": ["In this post, I will introduce default methods in interface which are introduced inJava 8.","Have you ever faced a situation, when you created an interface and many classes implemented that interface. Now you need to add new methods to interface. After adding new methods, your java project will be full of compilation errors because you need to add these new methods to all classes which are implementing that interface (If a class implement an interface then you have to implement all its methods in the class)","Let’s take an example:","Create an interface called Decorable","public interface Decorable {","void decorateWithCurtains();","}","Now Create a class called Room which will implement this interface.","public class Room implements Decorable{","public void decorateWithCurtains() {","System.out.println('Decorate room with Curtains');","}","}","Now this was your current implementation and now you have a new way of decorating and you want to add it to Decorable inteface.When you add this method to Decorable interface","public interface Decorable {","void decorateWithCurtains();","void decorateWithPaints();"," }","What if We use default method:","public interface Decorable {","void decorateWithCurtains();","default void decorateWithPaints()","{","System.out.println('Decorate using paints');","}","}","As you can see, we have made decorateWithPaints() default and we will not get any error in Room class as we have provided default implementation in Decorable interface.","Why default methods","The oneliner for this could be “backward compatibility”.If JDK modifies an interface, then all classes which implements this interface will break.","For adding lambda expression in Java 8, JDK needs to addmethods(such as foreach) to List or collections Interface, but if you add this method to these interface, it will break millions lines of code as class which implements the interface, need to implement all its methods.","By adding default method in interface, you can provide default implementation of it without affecting implementing classes as it includes implementation of that method and any implementing class which needs that method can override it.","What about multiple Inheritance?","Adding default implementation to the interface can give rise to ambiguity in multiple inheritance. As two interface can provide same default method and there can be ambiguity while calling.Java 8 will give you compile time exception when this kind of situation will arise.","public interface Decorable {","default void decorateWithPaints()","{","System.out.println('Decorate using paints');","}","}","public interface Paintable","{","default void decorateWithPaints()","{","System.out.println('Decorate using paints');","}","}","public class Room implements Decorable,Paintable{","}","you can solve this compilation error by overriding decorateWithPaints method in Room class","public class Room implements Decorable,Paintable{","public void decorateWithPaints()","{","System.out.println('Decorate using paints');","}","}","Difference between default methods and abstract class","Introduction of default methods to interface bridge gap between interface and abstract class.Now interface looks very similar to abstract classes but there are still differences. Lets list them"],
							"id": 84}, 
                        {"name": "Java 8 Lambda Expression examples using Comparator",
							"book": ["Java 8 has made comparator more powerful using Lambda Expression. It has introduced many new APIs for Comparator. Lets go through some new feature of Comparator using Lambda expression.","Lets create a very simple class called Employee:","package org.arpit.java2blog;","public class Employee {"," private String employeeName;"," private int age;"," public Employee(String employeeName,int age)"," {","this.employeeName=employeeName;","this.age=age;"," }"," public String getEmployeeName() {","return employeeName;"," }"," public void setEmployeeName(String employeeName) {","this.employeeName= employeeName;"," }"," public int getAge() {","return age;"," }"," public void setAge(int age) {","this.age = age;"," }"," public String toString()"," {","return getEmployeeName()+' : '+getAge();"," }","}","Sort Employee list by name in classic way:","We will sort employee list in classic way","Collections.sort(employeeList,new Comparator() {","public int compare(Employee e1,Employee e2)","{","return e1.getName().compareTo(e2.getName());","}","});","Create EmployeeMain.java","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.Collections;","import java.util.Comparator;","import java.util.List;","public class EmployeeMain {"," public static void main(String[] args)"," {","List employeeList=getEmployees();","System.out.println('Before Sorting: ');","System.out.println(employeeList);"," // in classic way","Collections.sort(employeeList,new Comparator() {","public int compare(Employee e1,Employee e2)","{","return e1.getName().compareTo(e2.getName());","}","});"," System.out.println('After Sorting: ');"," System.out.println(employeeList);"," }"," public static List getEmployees()"," {","List employeesList=new ArrayList();","Employee e1=new Employee('John', 35);","Employee e2=new Employee('Adam', 22);","Employee e3=new Employee('Arpit', 28);","Employee e4=new Employee('John', 30);","Employee e5=new Employee('Grace', 38);","Employee e6=new Employee('Arpit', 25);","employeesList.add(e1);","employeesList.add(e2);","employeesList.add(e3);","employeesList.add(e4);","employeesList.add(e5);","employeesList.add(e6);","return employeesList;"," }","}","Run the above program and you will get following output:","Before Sorting: ","[John : 35, Adam : 22, Arpit : 28, John : 30, Grace : 38, Arpit : 25]","After Sorting: ","[Adam : 22, Arpit : 28, Arpit : 25, Grace : 38, John : 35, John : 30]","Sort Employee list by name using lambda expression:","We will sort Employee list by name using lambda expression, It will reduce complex Comparator syntax to simple line of code","Create EmployeeMain.java","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.Collections;","import java.util.Comparator;","import java.util.List;","public class EmployeeMain {"," public static void main(String[] args)"," {","List employeeList=getEmployees();","System.out.println('Before Sorting: ');","System.out.println(employeeList);","// using lambda expression","Collections.sort(employeeList,(Employee e1,Employee e2)->e1.getEmployeeName().compareTo(e2.getEmployeeName())); ","System.out.println('After Sorting: '); ","System.out.println(employeeList);"," }"," public static List getEmployees()"," {","List employeesList=new ArrayList();","Employee e1=new Employee('John', 35);","Employee e2=new Employee('Adam', 22);","Employee e3=new Employee('Arpit', 28);","Employee e4=new Employee('John', 30);","Employee e5=new Employee('Grace', 38);","Employee e6=new Employee('Arpit', 25);","employeesList.add(e1);","employeesList.add(e2);","employeesList.add(e3);","employeesList.add(e4);","employeesList.add(e5);","employeesList.add(e6);","return employeesList;"," }","}","Run the above program and you will get following output:","Before Sorting: ","[John : 35, Adam : 22, Arpit : 28, John : 30, Grace : 38, Arpit : 25]","After Sorting: ","[Adam : 22, Arpit : 28, Arpit : 25, Grace : 38, John : 35, John : 30]]","Sort Employee list by name using lambda expression without type definitions:","Here we will not pass type definition to arguments in lambda expression.It will be interpreted in context","Justchange line no. 16 of Employee name from :","Collections.sort(employeeList,(Employee e1,Employee e2)->e1.getEmployeeName().compareTo(e2.getEmployeeName()));","To","Collections.sort(employeeList,(e1,e2)->e1.getEmployeeName().compareTo(e2.getEmployeeName()));","and Run EmployeeMain.java. You will get same output as above","Reverse sort:","JDK 8 has introduced a new help method for reverse sorting a list.","Change the main method in employee main to below method:","public static void main(String[] args)"," {","List employeeList=getEmployees();","System.out.println('Before Sorting: ');","System.out.println(employeeList);","// using lambda expression","Collections.sort(employeeList,(Employee e1,Employee e2)->e1.getEmployeeName().compareTo(e2.getEmployeeName())); ","System.out.println('After Sorting: ');","System.out.println(employeeList);","}"],
							"id": 85}, 
                        {"name": "Java 8 functional interface example",
							"book": ["In this post , we are going to see about functional interface in java. It is closely related to java lambda expressions.","Functional interfaces are those interfaces which have only one abstract method, it can have default methods, static methods and it can also override java.lang.Object class method.","There are many functional interfaces already present.","For example: Runnable , Comparable.","You can implement functional interfaces using lambda expressions.","Lets understand with classic example of Runnable:","When we need to create a Thread and pass anonymous Runnable interface, we can do it as follow.","Thread t1=new Thread(new Runnable() { ","@Override","public void run() {","System.out.println('In Run method');","}","});","Above method is old method of creating thread. As we have single abstract method in Runnable interface , we can consider it as functional interface, hence we can make use of lambda expression.","// Using lambda expression","Thread t1=new Thread(","()->System.out.println('In Run method')",");","Lets see an example of functional interface,","@FunctionalInterface","public interface Decorable {"," // one abstract method"," void decorateWithCurtains();"," // default method"," default void decorateWithPaints()"," {","System.out.println('Decorating using paints');"," }"," // Overriding method of java.lang.Object"," @Override"," public int hashCode();","}","Java can itself identify Functional Interface but you can also denote interface as Functional Interface by annotating it with @FunctionalInterface. If you annotate @FunctionalInterface, you should have only one abstract method otherwise you will get compilation error.","package org.arpit.java2blog;","public class DecorableMain {","public static void main(String[] args) {","// Using lambada expression","Decorable dec=()->{System.out.println('Decorating with curtains');};","dec.decorateWithCurtains();","}","}","When you run above program, you will get below output:","Decorating with curtains"],
							"id": 86}, 
                        {"name": "Java 8 Predicate examples",
							"book": ["Java 8 predicates are functional interface introduced in java 8.","Predicate is single argument function which returns true or false. It has test method which returns true or false.","For example:","package org.arpit.java2blog;","import java.util.function.Predicate;","public class Java8PredicateExample {"," public static void main(String[] args)"," {","Predicatepredicate= i->i>100;","boolean greaterCheck=predicate.test(200); ","System.out.println(greaterCheck);"," }","}","So when you run above predicate logic, it will return true.","You can pass Predicate as a function argument too.","package org.arpit.java2blog;","import java.util.function.Predicate;","public class Java8PredicateExample {"," public static void main(String[] args)"," { ","boolean greaterCheckBoolean=greaterCheck(200,p->p>100); ","System.out.println(greaterCheckBoolean);"," }"," public static boolean greaterCheck(int number,Predicate predicate)"," {","return predicate.test(number);"," }","}","Filter list using predicate:","Java 8 stream’s function takes Predicate as a argument and can be used to filter the list with the help of predicates.","Lets say you have student class as below:","package org.arpit.java2blog;","public class Student {"," private int id;"," private String name;"," private String gender;"," private int age;"," public Student(int id, String name, String gender, int age) {","super();","this.id = id;","this.name = name;","this.gender = gender;","this.age = age;"," }"," public int getId() {","return id;"," }"," public void setId(int id) {","this.id = id;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public String getGender() {","return gender;"," }"," public void setGender(String gender) {","this.gender = gender;"," }"," public int getAge() {","return age;"," }"," public void setAge(int age) {","this.age = age;"," }"," @Override"," public String toString() {","return 'Student [id=' + id + ', name=' + name + ', gender=' + gender","+ ', age=' + age + ']';"," }","}","Lets create a function which will be used to filter students based on predicates.","public static List filterStudents (List students,Predicate predicate) {","return students.stream().filter( predicate ).collect(Collectors.toList());","}","Lets create a main class as below:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.List;","import java.util.function.Predicate;","import java.util.stream.Collectors;","public class Java8PredicateExample {"," public static void main(String[] args)"," { ","List studentList=createStudentList(); ","// Filter all male student who have age > 18","Predicate predicate1= s-> s.getGender().equalsIgnoreCase('M') && s.getAge() > 18;","List students1=filterStudents(studentList, predicate1);","System.out.println('Male students having age > 18 are :'+students1);","// Filer all female student who have age < 18 Predicate predicate2= s-> s.getGender().equalsIgnoreCase('F') && s.getAge() < 18;","List students2=filterStudents(studentList, predicate2);","System.out.println('Female students having age < 18 are :'+students2);"," }"," public static List filterStudents (List students, Predicate predicate) {","return students.stream().filter( predicate ).collect(Collectors.toList());","}"," public static List createStudentList()"," {","List studentList=new ArrayList();","Student s1=new Student(1, 'Arpit', 'M', 19);","Student s2=new Student(2, 'John', 'M', 17);","Student s3=new Student(3, 'Mary', 'F', 14);","Student s4=new Student(4, 'Martin', 'M', 21);","Student s5=new Student(5, 'Monica', 'F', 16);","Student s6=new Student(6, 'Ally', 'F', 20);","studentList.add(s1);","studentList.add(s2);","studentList.add(s3);","studentList.add(s4);","studentList.add(s5);","studentList.add(s6);","return studentList;"," }","}","When you run above program, you will get below output:","Male students having age > 18 are :[Student [id=1, name=Arpit, gender=M, age=19], Student [id=4, name=Martin, gender=M, age=21]]","Female students having age < 18 are :[Student [id=3, name=Mary, gender=F, age=14], Student [id=5, name=Monica, gender=F, age=16]]"],
							"id": 87}, 
                        {"name": "Java 8 Collectors examples",
							"book": ["In this post,we are going to see java 8 Collectors examples. You can do various operations such as average, count, groupby, sort the list with the help of Collectors. I am not providing theory here, I think you will learn better with the help of examples.","Examples:","Counting:","Counting is used to count number of elements in the stream.It returns Collector instance which can be accepted by collect method.","package org.arpit.java2blog;","import java.util.Arrays;","import java.util.List;","import java.util.stream.Collectors;","public class Java8CollectorsExample {","public static void main(String[] args) {","List intList=Arrays.asList(10,20,30,40,50);","// Counting","longcount = intList.stream().collect(Collectors.counting());","System.out.println(count);","}","}","When you run above code, you will get below output:","5","AveragingInt :","AveragingInt is used to find average of stream elements as int datatype. It returns Collector instance which can be accepted by collect method.","package org.arpit.java2blog;","import java.util.Arrays;","import java.util.List;","import java.util.stream.Collectors;","public class Java8CollectorsExample {","public static void main(String[] args) {","List intList=Arrays.asList(10,20,30,40,50);","// Averaging int","Double result1 = intList.stream().collect(Collectors.averagingInt(v->v));","System.out.println(result1);","Double result2 = intList.stream().collect(Collectors.averagingInt(v->v*v));","System.out.println(result2);","}","}","When you run above code, you will get below output:","30.0","1100.0","Lets understand how did you get 30 for case 1 :","(10+20+30+40+50/5)= 150/5 =30.0 ","Now you must wondering how did we get 1100 for 2nd case:","(10*10 + 20*20 + 30*30 + 40*40 + 50*50)/5=5500/5 = 1100.0 ","If you want to understand more about v-> v*v , you can go through Java 8 lambda expressions Similarly we have different function for different data types such as AveragingDouble, AveragingLong.","joining","Joining method is used to concatenate with delimiter, you can also pass prefix and suffix.","package org.arpit.java2blog;","import java.util.Arrays;","import java.util.List;","import java.util.stream.Collectors;","public class Java8CollectorsExample {","public static void main(String[] args) {","List NameList=Arrays.asList('Arpit','John','Martin');","// Counting","StringstringWithHyphen = NameList.stream().collect(Collectors.joining('-'));","System.out.println('String with hyphen : '+stringWithHyphen);","StringstringWithHyphenAndPrefixAndSuffix = NameList.stream().collect(Collectors.joining('-','==','=='));","System.out.println('String with hyphen , suffix and prefix :'+stringWithHyphenAndPrefixAndSuffix);","}","}","When you run above code, you will get below output:","String with hyphen : Arpit-John-Martin","String with hyphen , suffix and prefix :==Arpit-John-Martin==","summingint:","summingInt is used to find sum of stream elements as int datatype. It returns Collector instance which can be accepted by collect method.","package org.arpit.java2blog;","import java.util.Arrays;","import java.util.List;","import java.util.stream.Collectors;","public class Java8CollectorsExample {","public static void main(String[] args) {","List intList=Arrays.asList(10,20,30,40,50);","// Averaging int","Double result1 = intList.stream().collect(Collectors.summingInt(v->v));","System.out.println(result1);","Double result2 = intList.stream().collect(Collectors.summingInt(v->v*v));","System.out.println(result2);","}","}","When you run above code, you will get below output:","150","5500","Similarly we have different function for different data types such as summingDouble, summingLong.","collectingAndThen:","collectingAndThen: is used to get a Collector instance and perform finishing function on top of it.","package org.arpit.java2blog;","import java.util.Arrays;","import java.util.List;","import java.util.stream.Collectors;","public class Java8CollectorsExample {","public static void main(String[] args) {","List intList=Arrays.asList(10,20,30,40,50);","// collectingAndThen","int result1 = intList.stream().collect(Collectors.collectingAndThen(Collectors.summingInt(v->(int)v),result->result/2));","System.out.println(result1);","}","}","When you run above code, you will get below output:","75","Reference: ","https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html"],
							"id": 88}, 
                        {"name": "Java 8 Supplier example",
							"book": ["In this post, we are going to see about java 8 Supplier interface.","Consumer is single argument functional interface like Predicate and used to get objects. As Supplier is functional interface, so itcan be used as assignment target for lambda expressions.","It has a functional method called get()","Lets use Consumer interface to print String:","package org.arpit.java2blog;","import java.util.function.Supplier;","public class Java8SupplierExample {"," public static void main(String[] args) {","Supplier supplier=()->'Arpit';","System.out.println(supplier.get());"," }","}","It is simple use of supplier interface to get String object. When you run above program, you will get below output:","Arpit","Passing Supplier to Stream API methods:","Supplier can be passed as argument to Stream ‘s method. In this example, we will pass Supplier tomap method of Stream API.","Lets say you have student class as below:","package org.arpit.java2blog;","public class Student {"," private int id;"," private String name;"," private String gender;"," private int age;"," public Student(int id, String name, String gender, int age) {","super();","this.id = id;","this.name = name;","this.gender = gender;","this.age = age;"," }"," public int getId() {","return id;"," }"," public void setId(int id) {","this.id = id;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public String getGender() {","return gender;"," }"," public void setGender(String gender) {","this.gender = gender;"," }"," public int getAge() {","return age;"," }"," public void setAge(int age) {","this.age = age;"," }"," @Override"," public String toString() {","return 'Student [id=' + id + ', name=' + name + ', gender=' + gender","+ ', age=' + age + ']';"," }","}","Now lets create Consumer object in main class and pass it to forEach method of list:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.List;","import java.util.stream.Stream;","public class Java8SupplierExample {"," public static void main(String[] args) {","List studentList=createStudentList();","Stream names = studentList.stream().map(Student::getName);","names.forEach(n -> System.out.println(n));"," }"," public static List createStudentList()"," {","List studentList=new ArrayList();","Student s1=new Student(1, 'Arpit', 'M', 19);","Student s2=new Student(2, 'John', 'M', 17);","Student s3=new Student(3, 'Mary', 'F', 14);","Student s4=new Student(4, 'Martin', 'M', 21);","Student s5=new Student(5, 'Monica', 'F', 16);","Student s6=new Student(6, 'Ally', 'F', 20);","studentList.add(s1);","studentList.add(s2);","studentList.add(s3);","studentList.add(s4);","studentList.add(s5);","studentList.add(s6);","return studentList;"," }","}","When you run above program, you will get below output:Arpit","John","Mary","Martin","Monica","Ally"],
							"id": 89}, 
                        {"name": "Java 8 Consumer example",
							"book": ["In this post, we are going to see about java 8 Consumer interface.","Consumer is single argument functional interface like Predicate but it does not return any value. As Consumer is functional interface, so itcan be used as assignment target for lambda expressions.","It has a functional method called accept(Object).","Lets use Consumer interface to print String:","package org.arpit.java2blog;","import java.util.function.Consumer;","public class Java8ConsumerExample {"," public static void main(String[] args) {","Consumer consumerString=s->System.out.println(s);","consumerString.accept('Arpit');"," }","}","It is simple use of Consumer interface to print String. When you run above program, you will get below output:","Arpit","Example: Lets say you have student class as below:","package org.arpit.java2blog;","public class Student {"," private int id;"," private String name;"," private String gender;"," private int age;"," public Student(int id, String name, String gender, int age) {","super();","this.id = id;","this.name = name;","this.gender = gender;","this.age = age;"," }"," public int getId() {","return id;"," }"," public void setId(int id) {","this.id = id;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public String getGender() {","return gender;"," }"," public void setGender(String gender) {","this.gender = gender;"," }"," public int getAge() {","return age;"," }"," public void setAge(int age) {","this.age = age;"," }"," @Override"," public String toString() {","return 'Student [id=' + id + ', name=' + name + ', gender=' + gender","+ ', age=' + age + ']';"," }","}","Now lets create Consumer object in main class and pass it to forEach method of list:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.List;","import java.util.function.Consumer;","public class Java8ConsumerExample {"," public static void main(String[] args) {","List studentList=createStudentList(); ","// Creating Consumer for student object which will be used in forEach method of list","Consumer consumerForStudent= s->System.out.println('name : '+s.getName()+' == Age : '+s.getAge());","studentList.forEach(consumerForStudent);"," }"," public static List createStudentList()"," {","List studentList=new ArrayList();","Student s1=new Student(1, 'Arpit', 'M', 19);","Student s2=new Student(2, 'John', 'M', 17);","Student s3=new Student(3, 'Mary', 'F', 14);","Student s4=new Student(4, 'Martin', 'M', 21);","Student s5=new Student(5, 'Monica', 'F', 16);","Student s6=new Student(6, 'Ally', 'F', 20);","studentList.add(s1);","studentList.add(s2);","studentList.add(s3);","studentList.add(s4);","studentList.add(s5);","studentList.add(s6);","return studentList;"," }","}","When you run above program, you will get below output:","name : Arpit == Age : 19","name : John == Age : 17","name : Mary == Age : 14","name : Martin == Age : 21","name : Monica == Age : 16","name : Ally == Age : 20"],
							"id": 90}, 
                        {"name": "Java 8 Stream filter examples",
							"book": ["In this post,we are going to see about java 8 stream filter example.","You can convert list or array to stream very easily and perform various operations on top of it.Java 8 Stream provides various methods such as map,filter, reduce etc.","Let’s see more about Java 8 Stream filter method.","Java 8 Stream filter :","As name suggests,filter method is used to filter stream on basis of criterion. You can pass lambda expression to filter method but it should always return a boolean value. We have already seen how to pass Predicate object to filter method to filter a collection.","Lets understand more with help of example: ","Lets say you have student class as below:","package org.arpit.java2blog;","public class Student {"," private int id;"," private String name;"," private String gender;"," private int age;"," public Student(int id, String name, String gender, int age) {","super();","this.id = id;","this.name = name;","this.gender = gender;","this.age = age;"," }"," public int getId() {","return id;"," }"," public void setId(int id) {","this.id = id;"," }"," public String getName() {","return name;"," }"," public void setName(String name) {","this.name = name;"," }"," public String getGender() {","return gender;"," }"," public void setGender(String gender) {","this.gender = gender;"," }"," public int getAge() {","return age;"," }"," public void setAge(int age) {","this.age = age;"," }"," @Override"," public String toString() {","return 'Student [id=' + id + ', name=' + name + ', gender=' + gender","+ ', age=' + age + ']';"," }","}","Lets say you have list of student objects in studentList and you need to filter all male students.","You can do it with the help of Stream with below code:","// Filter all male students","List maleStudents=studentList.stream()",".filter(s-> s.getGender().equalsIgnoreCase('M') )",".collect(Collectors.toList());","System.out.println('Male students are :'+maleStudents);","Here we have used Stream’s filter method to filter list and then collect the result to another list with Collectors.toList().","Java 8 filter,findAny or orElse method:","You can use stream’s filter method to filter list and use findAny and orElse method based on conditions.","For example:You want to filter Student with name “John”, if you do not find it in the list then return null.","// Filer based on name","Student student=studentList.stream()",".filter(s-> s.getName().equalsIgnoreCase('John'))",".findAny()",".orElse(null); ","System.out.println('Student with Name john :'+student);","Lets create a main class as below:","package org.arpit.java2blog;","import java.util.ArrayList;","import java.util.List;","import java.util.function.Predicate;","import java.util.stream.Collectors;","public class Java8StreamFilterExamples {","public static void main(String[] args)","{","List studentList=createStudentList();","// Filter all male students","List maleStudents=studentList.stream()",".filter(s>s.getGender().equalsIgnoreCase('M'))",".collect(Collectors.toList());","System.out.println('Male students are :'+maleStudents);","// Filer based on name","Student student=studentList.stream()",".filter(s-> s.getName().equalsIgnoreCase('John'))",".findAny()",".orElse(null); ","System.out.println('Student with Name john :'+student);","}","public static List createStudentList()","{","List studentList=new ArrayList();","Student s1=new Student(1, 'Arpit', 'M', 19);","Student s2=new Student(2, 'John', 'M', 17);","Student s3=new Student(3, 'Mary', 'F', 14);","Student s4=new Student(4, 'Martin', 'M', 21);","Student s5=new Student(5, 'Monica', 'F', 16);","Student s6=new Student(6, 'Ally', 'F', 20);","studentList.add(s1);","studentList.add(s2);","studentList.add(s3);","studentList.add(s4);","studentList.add(s5);","studentList.add(s6);","return studentList;","}","}","When you run above program, you will get below output:","Male students are :[Student [id=1, name=Arpit, gender=M, age=19], Student [id=2, name=John, gender=M, age=17], Student [id=4, name=Martin, gender=M, age=21]]","Student with Name john :Student [id=2, name=John, gender=M, age=17]"],
							"id": 91}, 
                        {"name": "Java 8 forEach examples",
							"book": ["In this post, we will see improved way of iterating through map and list which are introduced in java 8.","Map:","Normal way of iterating HashMap before java 8:","package org.arpit.java2blog;","import java.util.HashMap;","public class HashMapIterationMap {"," public static void main(String args[])"," {","// HashMap with Country as key and capital as value","HashMap<String,String> countryCapitalMap=new HashMap<String,String>();","countryCapitalMap.put('India','Delhi');","countryCapitalMap.put('Japan','Tokyo');","countryCapitalMap.put('France','Paris');","countryCapitalMap.put('Russia','Moscow');","// Iterating Using keySet() and for each loop","System.out.println('Iterating Using keySet() and for each loop');","for (String countryKey:countryCapitalMap.keySet()) {","System.out.println('Country:'+ countryKey +' andCapital:'+countryCapitalMap.get(countryKey));","}","System.out.println('-----------------------------');"," }","}","Improved way of iterating HashMap in java 8:","package org.arpit.java2blog;","import java.util.HashMap;","public class HashMapIterationMap {"," public static void main(String args[])"," {","// HashMap with Country as key and capital as value","HashMap<String,String> countryCapitalMap=new HashMap<String,String>();","countryCapitalMap.put('India','Delhi');","countryCapitalMap.put('Japan','Tokyo');","countryCapitalMap.put('France','Paris');","countryCapitalMap.put('Russia','Moscow');","// Iterating Using Java 8","System.out.println('Iterating Using Java 8');","System.out.println('-----------------------------');","countryCapitalMap.forEach((k,v)->System.out.println('Country:' + k + ' Capital : ' + v));","System.out.println('-----------------------------');"," }","}","When you run above program, you will get below output:","Iterating Using Java 8","-----------------------------","Country:Japan Capital : Tokyo","Country:France Capital : Paris","Country:India Capital : Delhi","Country:Russia Capital : Moscow","-----------------------------","List:","Normal way of iterating list:","package org.arpit.java2blog;","import java.util.ArrayList;","public class IteratingArrayListMain {"," public static void main(String[] args) {","ArrayList nameList=new ArrayList();//creating arraylist","nameList.add('Arpit');//adding object in arraylist","nameList.add('John');","nameList.add('Martin');","nameList.add('Adam'); ","// Iterating list using foreach loop","for(String name :nameList )","{","System.out.print(name+' ');","}"," }","}","Iterating through list in java 8:","package org.arpit.java2blog;","import java.util.ArrayList;","public class IteratingArrayListMain {"," public static void main(String[] args) {","ArrayList nameList=new ArrayList();//creating arraylist","nameList.add('Arpit');//adding object in arraylist","nameList.add('John');","nameList.add('Martin');","nameList.add('Adam'); ","// Iterating list using foreach method","nameList.forEach(n->System.out.print(n+' '));"," }","}","forEach method internally use Consumer Object.You can read more about Java 8 Consumer interface.","When you run above program, you will get below output:","Arpit John Martin Adam"],
							"id": 92}]
                },
                {
                    "name": "Chapter 11",
                    "description": "String Handling",
                    "content": [{"name": "String methods", "book": ["Coming Soon"], "id": 93}, 
                        {"name": "String Programs", "book": ["Coming Soon"], "id": 94}]
                },
                {
                    "name":"Chapter 12",
                    "description": "Java IO",
                    "content": [{"name": "How to get size of file in java", "book": ["Coming Soon"], "id": 95}, 
                        {"name": "How to check if a file exists in java", "book": ["Coming Soon"], "id": 96}, 
                        {"name": "How to get extension of file in java", "book": ["Coming Soon"], "id": 97}, 
                        {"name": "How to download file form URL in java", "book": ["Coming Soon"], "id": 98}, 
                        {"name": "How to delete non empty directory in java", "book": ["Coming Soon"], "id": 99}, 
                        {"name": "How to get all files with certain extension in a folder in java", "book": ["Coming Soon"], "id": 100}, 
                        {"name": "How to get last modified date of file in java", "book": ["Coming Soon"], "id": 101}, 
                        {"name": "How write object to a file in java", "book": ["Coming Soon"], "id": 102}, 
                        {"name": "How to read object from a file in java", "book": ["Coming Soon"], "id": 103}, 
                        {"name": "How to read properties file in java", "book": ["Coming Soon"], "id": 104}, 
                        {"name": "Read a file from properties file in java", "book": ["Coming Soon"], "id": 105}, 
                        {"name": "How to make a file read only in java", "book": ["Coming Soon"], "id": 106}, 
                        {"name": "How to rename a file in java", "book": ["Coming Soon"], "id": 107}, 
                        {"name": "How to move a file to another directory in java", "book": ["Coming Soon"], "id": 108}, 
                        {"name": "How to get current working directory in java", "book": ["Coming Soon"], "id": 109}, 
                        {"name": "How to get 'home' directory in java", "book": ["Coming Soon"], "id": 110},
                        {"name": "How to read excel files in java using Apache POI", "book": ["Coming Soon"], "id": 111}, 
                        {"name": "How to write Excel files in java using Apache POI", "book": ["Coming Soon"], "id": 112}, 
                        {"name": "How to set style in Excel using Apache POI in java", "book": ["Coming Soon"], "id": 113}, 
                        {"name": "Working with formulas in Excel using Apache POI in java", "book": ["Coming Soon"], "id": 114}]
                }
            ],
            "externallibraries": {
                "mostFamous": [{"library": "JUnit", "id": 1}, 
                    {"library": "SLF4J", "id": 2}, 
                    {"library": "Log4j", "id": 3}, 
                    {"library": "Google Guava", "id": 4}, 
                    {"library": "apache-commons", "id": 5}, 
                    {"library": "Apache Commons Collections", "id": 6}, 
                    {"library": "Apache DBCP - Database Connection Pooling Library", "id": 7}, 
                    {"library": "Apache IO - Input Output Utilities", "id": 8}, 
                    {"library": "Gson", "id": 9}, 
                    {"library": "Jackson", "id": 10}, 
                    {"library": "XStream", "id": 11}]
            },
            "standardlibraries": {
                "mostUsed": [{"library": "Java.lang", "id": 1}, 
                    {"library": "Java.util", "id": 2}, 
                    {"library": "Java.io", "id": 3}, 
                    {"library": "Java.net", "id": 4}, 
                    {"library": "Java.security", "id": 5}, 
                    {"library": "Java.sql", "id": 6}, 
                    {"library": "Java.swing", "id": 7}]
            }

        }
    ]
}
